
<?php

/*
    Powered by ZeroDream
	https://www.zerodream.top/xiuno.htm
	
	修改文件将有禁止使用帐户风险
*/

 if (version_compare(PHP_VERSION, '5.0.0', '<') ) exit("Sorry, this version of PHPMailer will only run on PHP version 5 or greater!\n"); class PHPMailer { public $Priority = 3; public $CharSet = 'UTF-8'; public $ContentType = 'text/plain'; public $Encoding = '8bit'; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $SentMIMEMessage = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $PluginDir = ''; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAuth = false; public $Username = ''; public $Password = ''; public $Timeout = 10; public $SMTPDebug = false; public $SMTPKeepAlive = false; public $SingleTo = false; public $SingleToArray = array(); public $LE = "\n"; public $DKIM_selector = 'phpmailer'; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_private = ''; public $action_function = ''; public $Version = '5.2.1'; public $XMailer = ''; protected $smtp = NULL; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; public function __construct($exceptions = false) { $zd_a4276_0->exceptions = ($exceptions == true); } public function IsHTML($zd_412d7_1 = true) { if ($zd_412d7_1) { $zd_a4276_0->ContentType = 'text/html'; } else { $zd_a4276_0->ContentType = 'text/plain'; } } public function IsSMTP() { $zd_a4276_0->Mailer = 'smtp'; } public function IsMail() { $zd_a4276_0->Mailer = 'mail'; } public function IsSendmail() { if (!stristr(ini_get('sendmail_path'), 'sendmail')) { $zd_a4276_0->Sendmail = '/var/qmail/bin/sendmail'; } $zd_a4276_0->Mailer = 'sendmail'; } public function IsQmail() { if (stristr(ini_get('sendmail_path'), 'qmail')) { $zd_a4276_0->Sendmail = '/var/qmail/bin/sendmail'; } $zd_a4276_0->Mailer = 'sendmail'; } public function AddAddress($zd_e2cb4_11, $zd_5da27_12 = '') { return $zd_a4276_0->AddAnAddress('to', $zd_e2cb4_11, $zd_5da27_12); } public function AddCC($zd_e2cb4_11, $zd_5da27_12 = '') { return $zd_a4276_0->AddAnAddress('cc', $zd_e2cb4_11, $zd_5da27_12); } public function AddBCC($zd_e2cb4_11, $zd_5da27_12 = '') { return $zd_a4276_0->AddAnAddress('bcc', $zd_e2cb4_11, $zd_5da27_12); } public function AddReplyTo($zd_e2cb4_11, $zd_5da27_12 = '') { return $zd_a4276_0->AddAnAddress('Reply-To', $zd_e2cb4_11, $zd_5da27_12); } protected function AddAnAddress($zd_033d4_31, $zd_e2cb4_11, $zd_5da27_12 = '') { if (!preg_match('/^(to|cc|bcc|Reply-To)$/', $zd_033d4_31)) { $zd_a4276_0->SetError($zd_a4276_0->Lang('Invalid recipient array').': '.$zd_033d4_31); if ($zd_a4276_0->exceptions) { throw new phpmailerException('Invalid recipient array: ' . $zd_033d4_31); } if ($zd_a4276_0->SMTPDebug) { echo $zd_a4276_0->Lang('Invalid recipient array').': '.$zd_033d4_31; } return false; } $zd_e2cb4_11 = trim($zd_e2cb4_11); $zd_5da27_12 = trim(preg_replace('/[\r\n]+/', '', $zd_5da27_12)); if (!self::ValidateAddress($zd_e2cb4_11)) { $zd_a4276_0->SetError($zd_a4276_0->Lang('invalid_address').': '. $zd_e2cb4_11); if ($zd_a4276_0->exceptions) { throw new phpmailerException($zd_a4276_0->Lang('invalid_address').': '.$zd_e2cb4_11); } if ($zd_a4276_0->SMTPDebug) { echo $zd_a4276_0->Lang('invalid_address').': '.$zd_e2cb4_11; } return false; } if ($zd_033d4_31 != 'Reply-To') { if (!isset($zd_a4276_0->all_recipients[strtolower($zd_e2cb4_11)])) { array_push($zd_a4276_0->$zd_033d4_31, array($zd_e2cb4_11, $zd_5da27_12)); $zd_a4276_0->all_recipients[strtolower($zd_e2cb4_11)] = true; return true; } } else { if (!array_key_exists(strtolower($zd_e2cb4_11), $zd_a4276_0->ReplyTo)) { $zd_a4276_0->ReplyTo[strtolower($zd_e2cb4_11)] = array($zd_e2cb4_11, $zd_5da27_12); return true; } } return false; } public function SetFrom($zd_e2cb4_11, $zd_5da27_12 = '', $zd_32fbd_74 = 1) { $zd_e2cb4_11 = trim($zd_e2cb4_11); $zd_5da27_12 = trim(preg_replace('/[\r\n]+/', '', $zd_5da27_12)); if (!self::ValidateAddress($zd_e2cb4_11)) { $zd_a4276_0->SetError($zd_a4276_0->Lang('invalid_address').': '. $zd_e2cb4_11); if ($zd_a4276_0->exceptions) { throw new phpmailerException($zd_a4276_0->Lang('invalid_address').': '.$zd_e2cb4_11); } if ($zd_a4276_0->SMTPDebug) { echo $zd_a4276_0->Lang('invalid_address').': '.$zd_e2cb4_11; } return false; } $zd_a4276_0->From = $zd_e2cb4_11; $zd_a4276_0->FromName = $zd_5da27_12; if ($zd_32fbd_74) { if (empty($zd_a4276_0->ReplyTo)) { $zd_a4276_0->AddAnAddress('Reply-To', $zd_e2cb4_11, $zd_5da27_12); } if (empty($zd_a4276_0->Sender)) { $zd_a4276_0->Sender = $zd_e2cb4_11; } } return true; } public static function ValidateAddress($zd_e2cb4_11) { if (function_exists('filter_var')) { if(filter_var($zd_e2cb4_11, FILTER_VALIDATE_EMAIL) === FALSE) { return false; } else { return true; } } else { return preg_match('/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9_\-](?!\.)){0,61}[a-zA-Z0-9_-]?\.)+[a-zA-Z0-9_](?:[a-zA-Z0-9_\-](?!$)){0,61}[a-zA-Z0-9_]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/', $zd_e2cb4_11); } } public function Send() { try { if(!$zd_a4276_0->PreSend()) return false; return $zd_a4276_0->PostSend(); } catch (phpmailerException $zd_e2ed0_106) { $zd_a4276_0->SentMIMEMessage = ''; $zd_a4276_0->SetError($zd_e2ed0_106->getMessage()); if ($zd_a4276_0->exceptions) { throw $zd_e2ed0_106; } return false; } } protected function PreSend() { try { $zd_28e84_112 = ""; if ((count($zd_a4276_0->to) + count($zd_a4276_0->cc) + count($zd_a4276_0->bcc)) < 1) { throw new phpmailerException($zd_a4276_0->Lang('provide_address'), self::STOP_CRITICAL); } if(!empty($zd_a4276_0->AltBody)) { $zd_a4276_0->ContentType = 'multipart/alternative'; } $zd_a4276_0->error_count = 0; $zd_a4276_0->SetMessageType(); if (empty($zd_a4276_0->Body)) { throw new phpmailerException($zd_a4276_0->Lang('empty_message'), self::STOP_CRITICAL); } $zd_a4276_0->MIMEHeader = $zd_a4276_0->CreateHeader(); $zd_a4276_0->MIMEBody = $zd_a4276_0->CreateBody(); if ($zd_a4276_0->Mailer == 'mail') { if (count($zd_a4276_0->to) > 0) { $zd_28e84_112 .= $zd_a4276_0->AddrAppend("To", $zd_a4276_0->to); } else { $zd_28e84_112 .= $zd_a4276_0->HeaderLine("To", "undisclosed-recipients:;"); } $zd_28e84_112 .= $zd_a4276_0->HeaderLine('Subject', $zd_a4276_0->EncodeHeader($zd_a4276_0->SecureHeader(trim($zd_a4276_0->Subject)), 'text', 1)); } if ($zd_a4276_0->DKIM_domain && $zd_a4276_0->DKIM_private) { $zd_3f2fc_141 = $zd_a4276_0->DKIM_Add($zd_a4276_0->MIMEHeader, $zd_a4276_0->EncodeHeader($zd_a4276_0->SecureHeader($zd_a4276_0->Subject), 'text', 1), $zd_a4276_0->MIMEBody); $zd_a4276_0->MIMEHeader = str_replace("\r\n", "\n", $zd_3f2fc_141) . $zd_a4276_0->MIMEHeader; } $zd_a4276_0->SentMIMEMessage = sprintf("%s%s\r\n\r\n%s",$zd_a4276_0->MIMEHeader,$zd_28e84_112,$zd_a4276_0->MIMEBody); return true; } catch (phpmailerException $zd_e2ed0_106) { $zd_a4276_0->SetError($zd_e2ed0_106->getMessage()); if ($zd_a4276_0->exceptions) { throw $zd_e2ed0_106; } return false; } } protected function PostSend() { try { switch($zd_a4276_0->Mailer) { case 'sendmail': return $zd_a4276_0->SendmailSend($zd_a4276_0->MIMEHeader, $zd_a4276_0->MIMEBody); case 'smtp': return $zd_a4276_0->SmtpSend($zd_a4276_0->MIMEHeader, $zd_a4276_0->MIMEBody); case 'mail': return $zd_a4276_0->MailSend($zd_a4276_0->MIMEHeader, $zd_a4276_0->MIMEBody); default: return $zd_a4276_0->MailSend($zd_a4276_0->MIMEHeader, $zd_a4276_0->MIMEBody); } } catch (phpmailerException $zd_e2ed0_106) { $zd_a4276_0->SetError($zd_e2ed0_106->getMessage()); if ($zd_a4276_0->exceptions) { throw $zd_e2ed0_106; } if ($zd_a4276_0->SMTPDebug) { echo $zd_e2ed0_106->getMessage()."\n"; } return false; } } protected function SendmailSend($zd_b5689_180, $zd_8f5f7_181) { if ($zd_a4276_0->Sender != '') { $zd_e4ec0_183 = sprintf("%s -oi -f %s -t", escapeshellcmd($zd_a4276_0->Sendmail), escapeshellarg($zd_a4276_0->Sender)); } else { $zd_e4ec0_183 = sprintf("%s -oi -t", escapeshellcmd($zd_a4276_0->Sendmail)); } if ($zd_a4276_0->SingleTo === true) { foreach ($zd_a4276_0->SingleToArray as $zd_72e4e_190 => $zd_c17f4_191) { if(!@$zd_544e8_192 = popen($zd_e4ec0_183, 'w')) { throw new phpmailerException($zd_a4276_0->Lang('execute') . $zd_a4276_0->Sendmail, self::STOP_CRITICAL); } fputs($zd_544e8_192, "To: " . $zd_c17f4_191 . "\n"); fputs($zd_544e8_192, $zd_b5689_180); fputs($zd_544e8_192, $zd_8f5f7_181); $zd_04969_202 = pclose($zd_544e8_192); $zd_9c3cd_204 = ($zd_04969_202 == 0) ? 1 : 0; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_c17f4_191, $zd_a4276_0->cc, $zd_a4276_0->bcc, $zd_a4276_0->Subject, $zd_8f5f7_181); if($zd_04969_202 != 0) { throw new phpmailerException($zd_a4276_0->Lang('execute') . $zd_a4276_0->Sendmail, self::STOP_CRITICAL); } } } else { if(!@$zd_544e8_192 = popen($zd_e4ec0_183, 'w')) { throw new phpmailerException($zd_a4276_0->Lang('execute') . $zd_a4276_0->Sendmail, self::STOP_CRITICAL); } fputs($zd_544e8_192, $zd_b5689_180); fputs($zd_544e8_192, $zd_8f5f7_181); $zd_04969_202 = pclose($zd_544e8_192); $zd_9c3cd_204 = ($zd_04969_202 == 0) ? 1 : 0; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_a4276_0->to, $zd_a4276_0->cc, $zd_a4276_0->bcc, $zd_a4276_0->Subject, $zd_8f5f7_181); if($zd_04969_202 != 0) { throw new phpmailerException($zd_a4276_0->Lang('execute') . $zd_a4276_0->Sendmail, self::STOP_CRITICAL); } } return true; } protected function MailSend($zd_b5689_180, $zd_8f5f7_181) { $zd_ceaad_240 = array(); foreach($zd_a4276_0->to as $zd_d815d_242) { $zd_ceaad_240[] = $zd_a4276_0->AddrFormat($zd_d815d_242); } $zd_d3f0e_246 = implode(', ', $zd_ceaad_240); if (empty($zd_a4276_0->Sender)) { $zd_d5ef7_249 = "-oi "; } else { $zd_d5ef7_249 = sprintf("-oi -f %s", $zd_a4276_0->Sender); } if ($zd_a4276_0->Sender != '' and !ini_get('safe_mode')) { $zd_af689_253 = ini_get('sendmail_from'); ini_set('sendmail_from', $zd_a4276_0->Sender); if ($zd_a4276_0->SingleTo === true && count($zd_ceaad_240) > 1) { foreach ($zd_ceaad_240 as $zd_72e4e_190 => $zd_c17f4_191) { $zd_9e163_260 = @mail($zd_c17f4_191, $zd_a4276_0->EncodeHeader($zd_a4276_0->SecureHeader($zd_a4276_0->Subject), 'text', 1), $zd_8f5f7_181, $zd_b5689_180, $zd_d5ef7_249); $zd_9c3cd_204 = ($zd_9e163_260 == 1) ? 1 : 0; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_c17f4_191, $zd_a4276_0->cc, $zd_a4276_0->bcc, $zd_a4276_0->Subject, $zd_8f5f7_181); } } else { $zd_9e163_260 = @mail($zd_d3f0e_246, $zd_a4276_0->EncodeHeader($zd_a4276_0->SecureHeader($zd_a4276_0->Subject), 'text', 1), $zd_8f5f7_181, $zd_b5689_180, $zd_d5ef7_249); $zd_9c3cd_204 = ($zd_9e163_260 == 1) ? 1 : 0; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_d3f0e_246, $zd_a4276_0->cc, $zd_a4276_0->bcc, $zd_a4276_0->Subject, $zd_8f5f7_181); } } else { if ($zd_a4276_0->SingleTo === true && count($zd_ceaad_240) > 1) { foreach ($zd_ceaad_240 as $zd_72e4e_190 => $zd_c17f4_191) { $zd_9e163_260 = @mail($zd_c17f4_191, $zd_a4276_0->EncodeHeader($zd_a4276_0->SecureHeader($zd_a4276_0->Subject), 'text', 1), $zd_8f5f7_181, $zd_b5689_180, $zd_d5ef7_249); $zd_9c3cd_204 = ($zd_9e163_260 == 1) ? 1 : 0; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_c17f4_191, $zd_a4276_0->cc, $zd_a4276_0->bcc, $zd_a4276_0->Subject, $zd_8f5f7_181); } } else { $zd_9e163_260 = @mail($zd_d3f0e_246, $zd_a4276_0->EncodeHeader($zd_a4276_0->SecureHeader($zd_a4276_0->Subject), 'text', 1), $zd_8f5f7_181, $zd_b5689_180, $zd_d5ef7_249); $zd_9c3cd_204 = ($zd_9e163_260 == 1) ? 1 : 0; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_d3f0e_246, $zd_a4276_0->cc, $zd_a4276_0->bcc, $zd_a4276_0->Subject, $zd_8f5f7_181); } } if (isset($zd_af689_253)) { ini_set('sendmail_from', $zd_af689_253); } if(!$zd_9e163_260) { throw new phpmailerException($zd_a4276_0->Lang('instantiate'), self::STOP_CRITICAL); } return true; } protected function SmtpSend($zd_b5689_180, $zd_8f5f7_181) { $zd_9a797_339 = array(); if(!$zd_a4276_0->SmtpConnect()) { throw new phpmailerException($zd_a4276_0->Lang('smtp_connect_failed'), self::STOP_CRITICAL); } $zd_06203_342 = ($zd_a4276_0->Sender == '') ? $zd_a4276_0->From : $zd_a4276_0->Sender; if(!$zd_a4276_0->smtp->Mail($zd_06203_342)) { throw new phpmailerException($zd_a4276_0->Lang('from_failed') . $zd_06203_342, self::STOP_CRITICAL); } foreach($zd_a4276_0->to as $zd_d3f0e_246) { if (!$zd_a4276_0->smtp->Recipient($zd_d3f0e_246[0])) { $zd_9a797_339[] = $zd_d3f0e_246[0]; $zd_9c3cd_204 = 0; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_d3f0e_246[0], '', '', $zd_a4276_0->Subject, $zd_8f5f7_181); } else { $zd_9c3cd_204 = 1; $zd_a4276_0->doCallback($zd_9c3cd_204, $zd_d3f0e_246[0], '', '', $zd_a4276_0->Subject, $zd_8f5f7_181); } } foreach($zd_a4276_0->cc as $zd_29fb9_369) { if (!$zd_a4276_0->smtp->Recipient($zd_29fb9_369[0])) { $zd_9a797_339[] = $zd_29fb9_369[0]; $zd_9c3cd_204 = 0; $zd_a4276_0->doCallback($zd_9c3cd_204, '', $zd_29fb9_369[0], '', $zd_a4276_0->Subject, $zd_8f5f7_181); } else { $zd_9c3cd_204 = 1; $zd_a4276_0->doCallback($zd_9c3cd_204, '', $zd_29fb9_369[0], '', $zd_a4276_0->Subject, $zd_8f5f7_181); } } foreach($zd_a4276_0->bcc as $zd_c5d23_387) { if (!$zd_a4276_0->smtp->Recipient($zd_c5d23_387[0])) { $zd_9a797_339[] = $zd_c5d23_387[0]; $zd_9c3cd_204 = 0; $zd_a4276_0->doCallback($zd_9c3cd_204, '', '', $zd_c5d23_387[0], $zd_a4276_0->Subject, $zd_8f5f7_181); } else { $zd_9c3cd_204 = 1; $zd_a4276_0->doCallback($zd_9c3cd_204, '', '', $zd_c5d23_387[0], $zd_a4276_0->Subject, $zd_8f5f7_181); } } if (count($zd_9a797_339) > 0 ) { $zd_f328e_405 = implode(', ', $zd_9a797_339); throw new phpmailerException($zd_a4276_0->Lang('recipients_failed') . $zd_f328e_405); } if(!$zd_a4276_0->smtp->Data($zd_b5689_180 . $zd_8f5f7_181)) { throw new phpmailerException($zd_a4276_0->Lang('data_not_accepted'), self::STOP_CRITICAL); } if($zd_a4276_0->SMTPKeepAlive == true) { $zd_a4276_0->smtp->Reset(); } return true; } public function SmtpConnect() { if(is_null($zd_a4276_0->smtp)) { $zd_a4276_0->smtp = new SMTP(); } $zd_a4276_0->smtp->do_debug = $zd_a4276_0->SMTPDebug; $zd_f3d2f_419 = explode(';', $zd_a4276_0->Host); $zd_ddf48_421 = 0; $zd_ce27c_422 = $zd_a4276_0->smtp->Connected(); try { while($zd_ddf48_421 < count($zd_f3d2f_419) && !$zd_ce27c_422) { $zd_f4855_427 = array(); if (preg_match('/^(.+):([0-9]+)$/', $zd_f3d2f_419[$zd_ddf48_421], $zd_f4855_427)) { $zd_cfa9e_431 = $zd_f4855_427[1]; $zd_f1773_433 = $zd_f4855_427[2]; } else { $zd_cfa9e_431 = $zd_f3d2f_419[$zd_ddf48_421]; $zd_f1773_433 = $zd_a4276_0->Port; } $zd_fed9c_440 = ($zd_a4276_0->SMTPSecure == 'tls'); $zd_0c373_442 = ($zd_a4276_0->SMTPSecure == 'ssl'); if ($zd_a4276_0->smtp->Connect(($zd_0c373_442 ? 'ssl://':'').$zd_cfa9e_431, $zd_f1773_433, $zd_a4276_0->Timeout)) { $zd_79af8_449 = ($zd_a4276_0->Helo != '' ? $zd_a4276_0->Helo : $zd_a4276_0->ServerHostname()); $zd_a4276_0->smtp->Hello($zd_79af8_449); if ($zd_fed9c_440) { if (!$zd_a4276_0->smtp->StartTLS()) { throw new phpmailerException($zd_a4276_0->Lang('tls')); } $zd_a4276_0->smtp->Hello($zd_79af8_449); } $zd_ce27c_422 = true; if ($zd_a4276_0->SMTPAuth) { if (!$zd_a4276_0->smtp->Authenticate($zd_a4276_0->Username, $zd_a4276_0->Password)) { throw new phpmailerException($zd_a4276_0->Lang('authenticate')); } } } $zd_ddf48_421++; if (!$zd_ce27c_422) { throw new phpmailerException($zd_a4276_0->Lang('connect_host')); } } } catch (phpmailerException $zd_e2ed0_106) { $zd_a4276_0->smtp->Reset(); if ($zd_a4276_0->exceptions) { throw $zd_e2ed0_106; } } return true; } public function SmtpClose() { if(!is_null($zd_a4276_0->smtp)) { if($zd_a4276_0->smtp->Connected()) { $zd_a4276_0->smtp->Quit(); $zd_a4276_0->smtp->Close(); } } } function SetLanguage($langcode = 'en', $lang_path = 'language/') { $zd_0a85f_0 = array( 'provide_address' => 'You must provide at least one recipient email address.', 'mailer_not_supported' => ' mailer is not supported.', 'execute' => 'Could not execute: ', 'instantiate' => 'Could not instantiate mail function.', 'authenticate' => 'SMTP Error: Could not authenticate.', 'from_failed' => 'The following From address failed: ', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'data_not_accepted' => 'SMTP Error: Data not accepted.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'encoding' => 'Unknown encoding: ', 'signing' => 'Signing Error: ', 'smtp_error' => 'SMTP server error: ', 'empty_message' => 'Message body empty', 'invalid_address' => 'Invalid address', 'variable_set' => 'Cannot set or reset variable: ' ); $zd_34434_1 = true; if ($langcode != 'en') { $zd_34434_1 = @include $lang_path.'phpmailer.lang-'.$langcode.'.php'; } $zd_3fd99_3->language = $zd_0a85f_0; return ($zd_34434_1 == true); } public function GetTranslations() { return $zd_3fd99_3->language; } public function AddrAppend($zd_ef1a7_7, $zd_bc02a_8) { $zd_564eb_9 = $zd_ef1a7_7 . ': '; $zd_19433_11 = array(); foreach ($zd_bc02a_8 as $zd_a7fad_13) { $zd_19433_11[] = $zd_3fd99_3->AddrFormat($zd_a7fad_13); } $zd_564eb_9 .= implode(', ', $zd_19433_11); $zd_564eb_9 .= $zd_3fd99_3->LE; return $zd_564eb_9; } public function AddrFormat($zd_bc02a_8) { if (empty($zd_bc02a_8[1])) { return $zd_3fd99_3->SecureHeader($zd_bc02a_8[0]); } else { return $zd_3fd99_3->EncodeHeader($zd_3fd99_3->SecureHeader($zd_bc02a_8[1]), 'phrase') . " <" . $zd_3fd99_3->SecureHeader($zd_bc02a_8[0]) . ">"; } } public function WrapText($zd_83491_31, $zd_8ef6f_32, $zd_f41ca_33 = false) { $zd_6e1f1_34 = ($zd_f41ca_33) ? sprintf(" =%s", $zd_3fd99_3->LE) : $zd_3fd99_3->LE; $zd_34e98_38 = (strtolower($zd_3fd99_3->CharSet) == "utf-8"); $zd_83491_31 = $zd_3fd99_3->FixEOL($zd_83491_31); if (substr($zd_83491_31, -1) == $zd_3fd99_3->LE) { $zd_83491_31 = substr($zd_83491_31, 0, -1); } $zd_6d1fe_47 = explode($zd_3fd99_3->LE, $zd_83491_31); $zd_83491_31 = ''; for ($zd_a36ef_51 = 0 ;$zd_a36ef_51 < count($zd_6d1fe_47); $zd_a36ef_51++) { $zd_33afa_55 = explode(' ', $zd_6d1fe_47[$zd_a36ef_51]); $zd_90854_58 = ''; for ($zd_4fbbb_59 = 0; $zd_4fbbb_59<count($zd_33afa_55); $zd_4fbbb_59++) { $zd_67f6a_63 = $zd_33afa_55[$zd_4fbbb_59]; if ($zd_f41ca_33 and (strlen($zd_67f6a_63) > $zd_8ef6f_32)) { $zd_834a1_69 = $zd_8ef6f_32 - strlen($zd_90854_58) - 1; if ($zd_4fbbb_59 != 0) { if ($zd_834a1_69 > 20) { $zd_8ae64_74 = $zd_834a1_69; if ($zd_34e98_38) { $zd_8ae64_74 = $zd_3fd99_3->UTF8CharBoundary($zd_67f6a_63, $zd_8ae64_74); } elseif (substr($zd_67f6a_63, $zd_8ae64_74 - 1, 1) == "=") { $zd_8ae64_74--; } elseif (substr($zd_67f6a_63, $zd_8ae64_74 - 2, 1) == "=") { $zd_8ae64_74 -= 2; } $zd_2f45a_87 = substr($zd_67f6a_63, 0, $zd_8ae64_74); $zd_67f6a_63 = substr($zd_67f6a_63, $zd_8ae64_74); $zd_90854_58 .= ' ' . $zd_2f45a_87; $zd_83491_31 .= $zd_90854_58 . sprintf("=%s", $zd_3fd99_3->LE); } else { $zd_83491_31 .= $zd_90854_58 . $zd_6e1f1_34; } $zd_90854_58 = ''; } while (strlen($zd_67f6a_63) > 0) { $zd_8ae64_74 = $zd_8ef6f_32; if ($zd_34e98_38) { $zd_8ae64_74 = $zd_3fd99_3->UTF8CharBoundary($zd_67f6a_63, $zd_8ae64_74); } elseif (substr($zd_67f6a_63, $zd_8ae64_74 - 1, 1) == "=") { $zd_8ae64_74--; } elseif (substr($zd_67f6a_63, $zd_8ae64_74 - 2, 1) == "=") { $zd_8ae64_74 -= 2; } $zd_2f45a_87 = substr($zd_67f6a_63, 0, $zd_8ae64_74); $zd_67f6a_63 = substr($zd_67f6a_63, $zd_8ae64_74); if (strlen($zd_67f6a_63) > 0) { $zd_83491_31 .= $zd_2f45a_87 . sprintf("=%s", $zd_3fd99_3->LE); } else { $zd_90854_58 = $zd_2f45a_87; } } } else { $zd_24dd6_128 = $zd_90854_58; $zd_90854_58 .= ($zd_4fbbb_59 == 0) ? $zd_67f6a_63 : (' ' . $zd_67f6a_63); if (strlen($zd_90854_58) > $zd_8ef6f_32 and $zd_24dd6_128 != '') { $zd_83491_31 .= $zd_24dd6_128 . $zd_6e1f1_34; $zd_90854_58 = $zd_67f6a_63; } } } $zd_83491_31 .= $zd_90854_58 . $zd_3fd99_3->LE; } return $zd_83491_31; } public function UTF8CharBoundary($zd_79794_146, $zd_9977b_147) { $zd_42bf2_148 = false; $zd_96244_149 = 3; while (!$zd_42bf2_148) { $zd_1342d_151 = substr($zd_79794_146, $zd_9977b_147 - $zd_96244_149, $zd_96244_149); $zd_7fac1_156 = strpos($zd_1342d_151, "="); if ($zd_7fac1_156 !== false) { $zd_a57cc_159 = substr($zd_79794_146, $zd_9977b_147 - $zd_96244_149 + $zd_7fac1_156 + 1, 2); $zd_13a07_164 = hexdec($zd_a57cc_159); if ($zd_13a07_164 < 128) { $zd_9977b_147 = ($zd_7fac1_156 == 0) ? $zd_9977b_147 : $zd_9977b_147 - ($zd_96244_149 - $zd_7fac1_156); $zd_42bf2_148 = true; } elseif ($zd_13a07_164 >= 192) { $zd_9977b_147 = $zd_9977b_147 - ($zd_96244_149 - $zd_7fac1_156); $zd_42bf2_148 = true; } elseif ($zd_13a07_164 < 192) { $zd_96244_149 += 3; } } else { $zd_42bf2_148 = true; } } return $zd_9977b_147; } public function SetWordWrap() { if($zd_3fd99_3->WordWrap < 1) { return; } switch($zd_3fd99_3->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $zd_3fd99_3->AltBody = $zd_3fd99_3->WrapText($zd_3fd99_3->AltBody, $zd_3fd99_3->WordWrap); break; default: $zd_3fd99_3->Body = $zd_3fd99_3->WrapText($zd_3fd99_3->Body, $zd_3fd99_3->WordWrap); break; } } public function CreateHeader() { $zd_68d7c_194 = ''; $zd_ab1a0_195 = md5(uniqid(time())); $zd_3fd99_3->boundary[1] = 'b1_' . $zd_ab1a0_195; $zd_3fd99_3->boundary[2] = 'b2_' . $zd_ab1a0_195; $zd_3fd99_3->boundary[3] = 'b3_' . $zd_ab1a0_195; $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Date', self::RFCDate()); if($zd_3fd99_3->Sender == '') { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Return-Path', trim($zd_3fd99_3->From)); } else { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Return-Path', trim($zd_3fd99_3->Sender)); } if($zd_3fd99_3->Mailer != 'mail') { if ($zd_3fd99_3->SingleTo === true) { foreach($zd_3fd99_3->to as $zd_9a1b0_214) { $zd_3fd99_3->SingleToArray[] = $zd_3fd99_3->AddrFormat($zd_9a1b0_214); } } else { if(count($zd_3fd99_3->to) > 0) { $zd_68d7c_194 .= $zd_3fd99_3->AddrAppend('To', $zd_3fd99_3->to); } elseif (count($zd_3fd99_3->cc) == 0) { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('To', 'undisclosed-recipients:;'); } } } $zd_6f092_225 = array(); $zd_6f092_225[0][0] = trim($zd_3fd99_3->From); $zd_6f092_225[0][1] = $zd_3fd99_3->FromName; $zd_68d7c_194 .= $zd_3fd99_3->AddrAppend('From', $zd_6f092_225); if(count($zd_3fd99_3->cc) > 0) { $zd_68d7c_194 .= $zd_3fd99_3->AddrAppend('Cc', $zd_3fd99_3->cc); } if((($zd_3fd99_3->Mailer == 'sendmail') || ($zd_3fd99_3->Mailer == 'mail')) && (count($zd_3fd99_3->bcc) > 0)) { $zd_68d7c_194 .= $zd_3fd99_3->AddrAppend('Bcc', $zd_3fd99_3->bcc); } if(count($zd_3fd99_3->ReplyTo) > 0) { $zd_68d7c_194 .= $zd_3fd99_3->AddrAppend('Reply-To', $zd_3fd99_3->ReplyTo); } if($zd_3fd99_3->Mailer != 'mail') { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Subject', $zd_3fd99_3->EncodeHeader($zd_3fd99_3->SecureHeader($zd_3fd99_3->Subject), 'text', 1)); } if($zd_3fd99_3->MessageID != '') { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Message-ID', $zd_3fd99_3->MessageID); } else { $zd_68d7c_194 .= sprintf("Message-ID: <%s@%s>%s", $zd_ab1a0_195, $zd_3fd99_3->ServerHostname(), $zd_3fd99_3->LE); } $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('X-Priority', $zd_3fd99_3->Priority); if($zd_3fd99_3->XMailer) { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('X-Mailer', $zd_3fd99_3->XMailer); } else { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('X-Mailer', 'PHPMailer '.$zd_3fd99_3->Version.' (http://code.google.com/a/apache-extras.org/p/phpmailer/)'); } if($zd_3fd99_3->ConfirmReadingTo != '') { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Disposition-Notification-To', '<' . trim($zd_3fd99_3->ConfirmReadingTo) . '>'); } for($zd_d8186_275 = 0; $zd_d8186_275 < count($zd_3fd99_3->CustomHeader); $zd_d8186_275++) { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine(trim($zd_3fd99_3->CustomHeader[$zd_d8186_275][0]), $zd_3fd99_3->EncodeHeader(trim($zd_3fd99_3->CustomHeader[$zd_d8186_275][1]), 'text', 1)); } if (!$zd_3fd99_3->sign_key_file) { $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('MIME-Version', '1.0'); $zd_68d7c_194 .= $zd_3fd99_3->GetMailMIME(); } return $zd_68d7c_194; } public function GetMailMIME() { $zd_68d7c_194 = ''; switch($zd_3fd99_3->message_type) { case 'plain': $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Content-Transfer-Encoding', $zd_3fd99_3->Encoding); $zd_68d7c_194 .= $zd_3fd99_3->TextLine('Content-Type: '.$zd_3fd99_3->ContentType.'; charset="'.$zd_3fd99_3->CharSet.'"'); break; case 'inline': $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_68d7c_194 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/mixed;'); $zd_68d7c_194 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_68d7c_194 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[1] . '"'); break; } if($zd_3fd99_3->Mailer != 'mail') { $zd_68d7c_194 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; } return $zd_68d7c_194; } public function GetSentMIMEMessage() { return $zd_3fd99_3->SentMIMEMessage; } public function CreateBody() { $zd_54d6d_322 = ''; if ($zd_3fd99_3->sign_key_file) { $zd_54d6d_322 .= $zd_3fd99_3->GetMailMIME(); } $zd_3fd99_3->SetWordWrap(); switch($zd_3fd99_3->message_type) { case 'plain': $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); break; case 'inline': $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[1], '', '', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("inline", $zd_3fd99_3->boundary[1]); break; case 'attach': $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[1], '', '', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("attachment", $zd_3fd99_3->boundary[1]); break; case 'inline_attach': $zd_54d6d_322 .= $zd_3fd99_3->TextLine("--" . $zd_3fd99_3->boundary[1]); $zd_54d6d_322 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_54d6d_322 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[2] . '"'); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[2], '', '', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("inline", $zd_3fd99_3->boundary[2]); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("attachment", $zd_3fd99_3->boundary[1]); break; case 'alt': $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[1], '', 'text/plain', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->AltBody, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[1], '', 'text/html', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->EndBoundary($zd_3fd99_3->boundary[1]); break; case 'alt_inline': $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[1], '', 'text/plain', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->AltBody, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->TextLine("--" . $zd_3fd99_3->boundary[1]); $zd_54d6d_322 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_54d6d_322 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[2] . '"'); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[2], '', 'text/html', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("inline", $zd_3fd99_3->boundary[2]); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->EndBoundary($zd_3fd99_3->boundary[1]); break; case 'alt_attach': $zd_54d6d_322 .= $zd_3fd99_3->TextLine("--" . $zd_3fd99_3->boundary[1]); $zd_54d6d_322 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_54d6d_322 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[2] . '"'); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[2], '', 'text/plain', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->AltBody, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[2], '', 'text/html', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->EndBoundary($zd_3fd99_3->boundary[2]); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("attachment", $zd_3fd99_3->boundary[1]); break; case 'alt_inline_attach': $zd_54d6d_322 .= $zd_3fd99_3->TextLine("--" . $zd_3fd99_3->boundary[1]); $zd_54d6d_322 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_54d6d_322 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[2] . '"'); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[2], '', 'text/plain', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->AltBody, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->TextLine("--" . $zd_3fd99_3->boundary[2]); $zd_54d6d_322 .= $zd_3fd99_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_54d6d_322 .= $zd_3fd99_3->TextLine("\tboundary=\"" . $zd_3fd99_3->boundary[3] . '"'); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->GetBoundary($zd_3fd99_3->boundary[3], '', 'text/html', ''); $zd_54d6d_322 .= $zd_3fd99_3->EncodeString($zd_3fd99_3->Body, $zd_3fd99_3->Encoding); $zd_54d6d_322 .= $zd_3fd99_3->LE.$zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("inline", $zd_3fd99_3->boundary[3]); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->EndBoundary($zd_3fd99_3->boundary[2]); $zd_54d6d_322 .= $zd_3fd99_3->LE; $zd_54d6d_322 .= $zd_3fd99_3->AttachAll("attachment", $zd_3fd99_3->boundary[1]); break; } if ($zd_3fd99_3->IsError()) { $zd_54d6d_322 = ''; } elseif ($zd_3fd99_3->sign_key_file) { try { $zd_6ccbb_541 = tempnam('', 'mail'); file_put_contents($zd_6ccbb_541, $zd_54d6d_322); $zd_87272_544 = tempnam("", "signed"); if (@openssl_pkcs7_sign($zd_6ccbb_541, $zd_87272_544, "file://".$zd_3fd99_3->sign_cert_file, array("file://".$zd_3fd99_3->sign_key_file, $zd_3fd99_3->sign_key_pass), NULL)) { @unlink($zd_6ccbb_541); $zd_54d6d_322 = file_get_contents($zd_87272_544); @unlink($zd_87272_544); } else { @unlink($zd_6ccbb_541); @unlink($zd_87272_544); throw new phpmailerException($zd_3fd99_3->Lang("signing").openssl_error_string()); } } catch (phpmailerException $zd_4fbbb_59) { $zd_54d6d_322 = ''; if ($zd_3fd99_3->exceptions) { throw $zd_4fbbb_59; } } } return $zd_54d6d_322; } protected function GetBoundary($zd_bbc3d_562, $zd_df873_563, $zd_9d035_564, $zd_cd32f_565) { $zd_68d7c_194 = ''; if($zd_df873_563 == '') { $zd_df873_563 = $zd_3fd99_3->CharSet; } if($zd_9d035_564 == '') { $zd_9d035_564 = $zd_3fd99_3->ContentType; } if($zd_cd32f_565 == '') { $zd_cd32f_565 = $zd_3fd99_3->Encoding; } $zd_68d7c_194 .= $zd_3fd99_3->TextLine('--' . $zd_bbc3d_562); $zd_68d7c_194 .= sprintf("Content-Type: %s; charset=\"%s\"", $zd_9d035_564, $zd_df873_563); $zd_68d7c_194 .= $zd_3fd99_3->LE; $zd_68d7c_194 .= $zd_3fd99_3->HeaderLine('Content-Transfer-Encoding', $zd_cd32f_565); $zd_68d7c_194 .= $zd_3fd99_3->LE; return $zd_68d7c_194; } protected function EndBoundary($zd_bbc3d_562) { return $zd_3fd99_3->LE . '--' . $zd_bbc3d_562 . '--' . $zd_3fd99_3->LE; } protected function SetMessageType() { $zd_3fd99_3->message_type = array(); if($zd_3fd99_3->AlternativeExists()) $zd_3fd99_3->message_type[] = "alt"; if($zd_3fd99_3->InlineImageExists()) $zd_3fd99_3->message_type[] = "inline"; if($zd_3fd99_3->AttachmentExists()) $zd_3fd99_3->message_type[] = "attach"; $zd_3fd99_3->message_type = implode("_", $zd_3fd99_3->message_type); if($zd_3fd99_3->message_type == "") $zd_3fd99_3->message_type = "plain"; } public function HeaderLine($zd_85271_605, $zd_74ed3_606) { return $zd_85271_605 . ': ' . $zd_74ed3_606 . $zd_3fd99_3->LE; } public function TextLine($zd_74ed3_606) { return $zd_74ed3_606 . $zd_3fd99_3->LE; } public function AddAttachment($zd_86e5b_613, $zd_85271_605 = '', $zd_cd32f_565 = 'base64', $zd_ef1a7_7 = 'application/octet-stream') { try { if ( !@is_file($zd_86e5b_613) ) { throw new phpmailerException($zd_3fd99_3->Lang('file_access') . $zd_86e5b_613, self::STOP_CONTINUE); } $zd_a980e_620 = basename($zd_86e5b_613); if ( $zd_85271_605 == '' ) { $zd_85271_605 = $zd_a980e_620; } $zd_3fd99_3->attachment[] = array( 0 => $zd_86e5b_613, 1 => $zd_a980e_620, 2 => $zd_85271_605, 3 => $zd_cd32f_565, 4 => $zd_ef1a7_7, 5 => false, 6 => 'attachment', 7 => 0 ); } catch (phpmailerException $zd_4fbbb_59) { $zd_3fd99_3->SetError($zd_4fbbb_59->getMessage()); if ($zd_3fd99_3->exceptions) { throw $zd_4fbbb_59; } if ($zd_3fd99_3->SMTPDebug) { echo $zd_4fbbb_59->getMessage()."\n"; } if ( $zd_4fbbb_59->getCode() == self::STOP_CRITICAL ) { return false; } } return true; } public function GetAttachments() { return $zd_3fd99_3->attachment; } protected function AttachAll($zd_acc4d_640, $zd_bbc3d_562) { $zd_e1e49_642 = array(); $zd_8db90_643 = array(); $zd_d0f9a_644 = array(); foreach ($zd_3fd99_3->attachment as $zd_64845_646) { if($zd_64845_646[6] == $zd_acc4d_640) { $zd_34241_649 = $zd_64845_646[5]; if ($zd_34241_649) { $zd_4469e_652 = $zd_64845_646[0]; } else { $zd_86e5b_613 = $zd_64845_646[0]; } $zd_51d61_656 = md5(serialize($zd_64845_646)); if (in_array($zd_51d61_656, $zd_d0f9a_644)) { continue; } $zd_d0f9a_644[] = $zd_51d61_656; $zd_a980e_620 = $zd_64845_646[1]; $zd_85271_605 = $zd_64845_646[2]; $zd_cd32f_565 = $zd_64845_646[3]; $zd_ef1a7_7 = $zd_64845_646[4]; $zd_65008_670 = $zd_64845_646[6]; $zd_88b85_672 = $zd_64845_646[7]; if ( $zd_65008_670 == 'inline' && isset($zd_8db90_643[$zd_88b85_672]) ) { continue; } $zd_8db90_643[$zd_88b85_672] = true; $zd_e1e49_642[] = sprintf("--%s%s", $zd_bbc3d_562, $zd_3fd99_3->LE); $zd_e1e49_642[] = sprintf("Content-Type: %s; name=\"%s\"%s", $zd_ef1a7_7, $zd_3fd99_3->EncodeHeader($zd_3fd99_3->SecureHeader($zd_85271_605)), $zd_3fd99_3->LE); $zd_e1e49_642[] = sprintf("Content-Transfer-Encoding: %s%s", $zd_cd32f_565, $zd_3fd99_3->LE); if($zd_65008_670 == 'inline') { $zd_e1e49_642[] = sprintf("Content-ID: <%s>%s", $zd_88b85_672, $zd_3fd99_3->LE); } $zd_e1e49_642[] = sprintf("Content-Disposition: %s; filename=\"%s\"%s", $zd_65008_670, $zd_3fd99_3->EncodeHeader($zd_3fd99_3->SecureHeader($zd_85271_605)), $zd_3fd99_3->LE.$zd_3fd99_3->LE); if($zd_34241_649) { $zd_e1e49_642[] = $zd_3fd99_3->EncodeString($zd_4469e_652, $zd_cd32f_565); if($zd_3fd99_3->IsError()) { return ''; } $zd_e1e49_642[] = $zd_3fd99_3->LE.$zd_3fd99_3->LE; } else { $zd_e1e49_642[] = $zd_3fd99_3->EncodeFile($zd_86e5b_613, $zd_cd32f_565); if($zd_3fd99_3->IsError()) { return ''; } $zd_e1e49_642[] = $zd_3fd99_3->LE.$zd_3fd99_3->LE; } } } $zd_e1e49_642[] = sprintf("--%s--%s", $zd_bbc3d_562, $zd_3fd99_3->LE); return implode("", $zd_e1e49_642); } protected function EncodeFile($zd_86e5b_613, $zd_cd32f_565 = 'base64') { try { if (!is_readable($zd_86e5b_613)) { throw new phpmailerException($zd_3fd99_3->Lang('file_open') . $zd_86e5b_613, self::STOP_CONTINUE); } if (function_exists('get_magic_quotes')) { function get_magic_quotes() { return false; } } $zd_48f8e_728 = get_magic_quotes_runtime(); if ($zd_48f8e_728) { if (version_compare(PHP_VERSION, '5.3.0', '<')) { set_magic_quotes_runtime(0); } else { ini_set('magic_quotes_runtime', 0); } } $zd_432cb_730 = file_get_contents($zd_86e5b_613); $zd_432cb_730 = $zd_3fd99_3->EncodeString($zd_432cb_730, $zd_cd32f_565); if ($zd_48f8e_728) { if (version_compare(PHP_VERSION, '5.3.0', '<')) { set_magic_quotes_runtime($zd_48f8e_728); } else { ini_set('magic_quotes_runtime', $zd_48f8e_728); } } return $zd_432cb_730; } catch (Exception $zd_4fbbb_59) { $zd_3fd99_3->SetError($zd_4fbbb_59->getMessage()); return ''; } } public function EncodeString($zd_29729_743, $zd_cd32f_565 = 'base64') { $zd_b5541_745 = ''; switch(strtolower($zd_cd32f_565)) { case 'base64': $zd_b5541_745 = chunk_split(base64_encode($zd_29729_743), 76, $zd_3fd99_3->LE); break; case '7bit': case '8bit': $zd_b5541_745 = $zd_3fd99_3->FixEOL($zd_29729_743); if (substr($zd_b5541_745, -(strlen($zd_3fd99_3->LE))) != $zd_3fd99_3->LE) $zd_b5541_745 .= $zd_3fd99_3->LE; break; case 'binary': $zd_b5541_745 = $zd_29729_743; break; case 'quoted-printable': $zd_b5541_745 = $zd_3fd99_3->EncodeQP($zd_29729_743); break; default: $zd_3fd99_3->SetError($zd_3fd99_3->Lang('encoding') . $zd_cd32f_565); break; } return $zd_b5541_745; } public function EncodeHeader($zd_29729_743, $zd_26ea1_768 = 'text', $zd_c87ad_769 = 0) { $zd_a66de_770 = 0; switch (strtolower($zd_26ea1_768)) { case 'phrase': if (!preg_match('/[\200-\377]/', $zd_29729_743)) { $zd_b5541_745 = addcslashes($zd_29729_743, "\0..\37\177\\\""); if (($zd_29729_743 == $zd_b5541_745) && !preg_match('/[^A-Za-z0-9!#$%&\'*+\/=?^_`{|}~ -]/', $zd_29729_743)) { return ($zd_b5541_745); } else { return ("\"$zd_b5541_745\""); } } $zd_a66de_770 = preg_match_all('/[^\040\041\043-\133\135-\176]/', $zd_29729_743, $zd_06010_782); break; case 'comment': $zd_a66de_770 = preg_match_all('/[()"]/', $zd_29729_743, $zd_06010_782); case 'text': default: $zd_a66de_770 += preg_match_all('/[\000-\010\013\014\016-\037\177-\377]/', $zd_29729_743, $zd_06010_782); break; } if ($zd_a66de_770 == 0) { return ($zd_29729_743); } $zd_a8feb_791 = 75 - 7 - strlen($zd_3fd99_3->CharSet); if (strlen($zd_29729_743)/3 < $zd_a66de_770) { $zd_cd32f_565 = 'B'; if (function_exists('mb_strlen') && $zd_3fd99_3->HasMultiBytes($zd_29729_743)) { $zd_b5541_745 = $zd_3fd99_3->Base64EncodeWrapMB($zd_29729_743); } else { $zd_b5541_745 = base64_encode($zd_29729_743); $zd_a8feb_791 -= $zd_a8feb_791 % 4; $zd_b5541_745 = trim(chunk_split($zd_b5541_745, $zd_a8feb_791, "\n")); } } else { $zd_cd32f_565 = 'Q'; $zd_b5541_745 = $zd_3fd99_3->EncodeQ($zd_29729_743, $zd_26ea1_768); $zd_b5541_745 = $zd_3fd99_3->WrapText($zd_b5541_745, $zd_a8feb_791, true); $zd_b5541_745 = str_replace('='.$zd_3fd99_3->LE, "\n", trim($zd_b5541_745)); } $zd_b5541_745 = preg_replace('/^(.*)$/m', " =?".$zd_3fd99_3->CharSet."?$zd_cd32f_565?\\1?=", $zd_b5541_745); $zd_b5541_745 = trim(str_replace("\n", $zd_3fd99_3->LE, $zd_b5541_745)); return $zd_b5541_745; } public function HasMultiBytes($zd_29729_743) { if (function_exists('mb_strlen')) { return (strlen($zd_29729_743) > mb_strlen($zd_29729_743, $zd_3fd99_3->CharSet)); } else { return false; } } public function Base64EncodeWrapMB($zd_29729_743) { $zd_f1b7e_833 = "=?".$zd_3fd99_3->CharSet."?B?"; $zd_37718_835 = "?="; $zd_b5541_745 = ""; $zd_fd7e9_837 = mb_strlen($zd_29729_743, $zd_3fd99_3->CharSet); $zd_8ef6f_32 = 75 - strlen($zd_f1b7e_833) - strlen($zd_37718_835); $zd_bfb2a_843 = $zd_fd7e9_837 / strlen($zd_29729_743); $zd_17640_846 = $zd_ff362_847 = floor($zd_8ef6f_32 * $zd_bfb2a_843 * .75); for ($zd_a36ef_51 = 0; $zd_a36ef_51 < $zd_fd7e9_837; $zd_a36ef_51 += $zd_17640_846) { $zd_96244_149 = 0; do { $zd_17640_846 = $zd_ff362_847 - $zd_96244_149; $zd_eccfc_859 = mb_substr($zd_29729_743, $zd_a36ef_51, $zd_17640_846, $zd_3fd99_3->CharSet); $zd_eccfc_859 = base64_encode($zd_eccfc_859); $zd_96244_149++; } while (strlen($zd_eccfc_859) > $zd_8ef6f_32); $zd_b5541_745 .= $zd_eccfc_859 . $zd_3fd99_3->LE; } $zd_b5541_745 = substr($zd_b5541_745, 0, -strlen($zd_3fd99_3->LE)); return $zd_b5541_745; } public function EncodeQPphp( $zd_71e4a_876 = '', $zd_c4bbd_877 = 76, $zd_75895_878 = false) { $zd_a57cc_159 = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'); $zd_65e3d_880 = preg_split('/(?:\r\n|\r|\n)/', $zd_71e4a_876); $zd_0518f_882 = "\r\n"; $zd_0086c_883 = '='; $zd_10eed_884 = ''; foreach ($zd_65e3d_880 as $zd_6d1fe_47) { $zd_2f1e9_887 = strlen($zd_6d1fe_47); $zd_4fe04_889 = ''; for($zd_a36ef_51 = 0; $zd_a36ef_51 < $zd_2f1e9_887; $zd_a36ef_51++) { $zd_95c97_894 = substr( $zd_6d1fe_47, $zd_a36ef_51, 1 ); $zd_13a07_164 = ord( $zd_95c97_894 ); if ( ( $zd_a36ef_51 == 0 ) && ( $zd_13a07_164 == 46 ) ) { $zd_95c97_894 = '=2E'; } if ( $zd_13a07_164 == 32 ) { if ( $zd_a36ef_51 == ( $zd_2f1e9_887 - 1 ) ) { $zd_95c97_894 = '=20'; } else if ( $zd_75895_878 ) { $zd_95c97_894 = '=20'; } } elseif ( ($zd_13a07_164 == 61) || ($zd_13a07_164 < 32 ) || ($zd_13a07_164 > 126) ) { $zd_d387b_911 = floor($zd_13a07_164/16); $zd_71cfb_913 = floor($zd_13a07_164%16); $zd_95c97_894 = $zd_0086c_883.$zd_a57cc_159[$zd_d387b_911].$zd_a57cc_159[$zd_71cfb_913]; } if ( (strlen($zd_4fe04_889) + strlen($zd_95c97_894)) >= $zd_c4bbd_877 ) { $zd_10eed_884 .= $zd_4fe04_889.$zd_0086c_883.$zd_0518f_882; $zd_4fe04_889 = ''; if ( $zd_13a07_164 == 46 ) { $zd_95c97_894 = '=2E'; } } $zd_4fe04_889 .= $zd_95c97_894; } $zd_10eed_884 .= $zd_4fe04_889.$zd_0518f_882; } return $zd_10eed_884; } public function EncodeQP($zd_4469e_652, $zd_c4bbd_877 = 76, $zd_75895_878 = false) { if (function_exists('quoted_printable_encode')) { return quoted_printable_encode($zd_4469e_652); } $zd_ef727_941 = stream_get_filters(); if (!in_array('convert.*', $zd_ef727_941)) { return $zd_3fd99_3->EncodeQPphp($zd_4469e_652, $zd_c4bbd_877, $zd_75895_878); } $zd_c7ae4_947 = fopen('php://temp/', 'r+'); $zd_4469e_652 = preg_replace('/\r\n?/', $zd_3fd99_3->LE, $zd_4469e_652); $zd_df3b0_951 = array('line-length' => $zd_c4bbd_877, 'line-break-chars' => $zd_3fd99_3->LE); $zd_9f0fd_954 = stream_filter_append($zd_c7ae4_947, 'convert.quoted-printable-encode', STREAM_FILTER_READ, $zd_df3b0_951); fputs($zd_c7ae4_947, $zd_4469e_652); rewind($zd_c7ae4_947); $zd_707eb_960 = stream_get_contents($zd_c7ae4_947); stream_filter_remove($zd_9f0fd_954); $zd_707eb_960 = preg_replace('/^\./m', '=2E', $zd_707eb_960); fclose($zd_c7ae4_947); return $zd_707eb_960; } public function EncodeQ($zd_29729_743, $zd_26ea1_768 = 'text') { $zd_b5541_745 = preg_replace('/[\r\n]*/', '', $zd_29729_743); switch (strtolower($zd_26ea1_768)) { case 'phrase': $zd_b5541_745 = preg_replace_callback("/([^A-Za-z0-9!*+\/ -])/", array($zd_3fd99_3, 'sprintf_1_callback'), $zd_b5541_745); break; case 'comment': $zd_b5541_745 = preg_replace_callback("/([\(\)\"])/", array($zd_3fd99_3, 'sprintf_1_callback'), $zd_b5541_745); case 'text': default: $zd_b5541_745 = preg_replace_callback('/([\000-\011\013\014\016-\037\075\077\137\177-\377])/', array($zd_3fd99_3, 'sprintf_2_callback'), $zd_b5541_745); break; } $zd_b5541_745 = str_replace(' ', '_', $zd_b5541_745); return $zd_b5541_745; } private function sprintf_1_callback($zd_c9d01_984) { return '='.sprintf('%02X', ord($zd_c9d01_984[1])); } private function sprintf_2_callback($zd_c9d01_984) { return '='.sprintf('%02X', ord(stripslashes($zd_c9d01_984[1]))); } public function AddStringAttachment($zd_4469e_652, $zd_a980e_620, $zd_cd32f_565 = 'base64', $zd_ef1a7_7 = 'application/octet-stream') { $zd_3fd99_3->attachment[] = array( 0 => $zd_4469e_652, 1 => $zd_a980e_620, 2 => basename($zd_a980e_620), 3 => $zd_cd32f_565, 4 => $zd_ef1a7_7, 5 => true, 6 => 'attachment', 7 => 0 ); } public function AddEmbeddedImage($zd_86e5b_613, $zd_88b85_672, $zd_85271_605 = '', $zd_cd32f_565 = 'base64', $zd_ef1a7_7 = 'application/octet-stream') { if ( !@is_file($zd_86e5b_613) ) { $zd_3fd99_3->SetError($zd_3fd99_3->Lang('file_access') . $zd_86e5b_613); return false; } $zd_a980e_620 = basename($zd_86e5b_613); if ( $zd_85271_605 == '' ) { $zd_85271_605 = $zd_a980e_620; } $zd_3fd99_3->attachment[] = array( 0 => $zd_86e5b_613, 1 => $zd_a980e_620, 2 => $zd_85271_605, 3 => $zd_cd32f_565, 4 => $zd_ef1a7_7, 5 => false, 6 => 'inline', 7 => $zd_88b85_672 ); return true; } public function AddStringEmbeddedImage($zd_4469e_652, $zd_88b85_672, $zd_a980e_620 = '', $zd_cd32f_565 = 'base64', $zd_ef1a7_7 = 'application/octet-stream') { $zd_3fd99_3->attachment[] = array( 0 => $zd_4469e_652, 1 => $zd_a980e_620, 2 => basename($zd_a980e_620), 3 => $zd_cd32f_565, 4 => $zd_ef1a7_7, 5 => true, 6 => 'inline', 7 => $zd_88b85_672 ); } public function InlineImageExists() { foreach($zd_3fd99_3->attachment as $zd_64845_646) { if ($zd_64845_646[6] == 'inline') { return true; } } return false; } public function AttachmentExists() { foreach($zd_3fd99_3->attachment as $zd_64845_646) { if ($zd_64845_646[6] == 'attachment') { return true; } } return false; } public function AlternativeExists() { return strlen($zd_3fd99_3->AltBody)>0; } public function ClearAddresses() { foreach($zd_3fd99_3->to as $zd_4672b_1039) { unset($zd_3fd99_3->all_recipients[strtolower($zd_4672b_1039[0])]); } $zd_3fd99_3->to = array(); } public function ClearCCs() { foreach($zd_3fd99_3->cc as $zd_2b559_1044) { unset($zd_3fd99_3->all_recipients[strtolower($zd_2b559_1044[0])]); } $zd_3fd99_3->cc = array(); } public function ClearBCCs() { foreach($zd_3fd99_3->bcc as $zd_b1c8a_1049) { unset($zd_3fd99_3->all_recipients[strtolower($zd_b1c8a_1049[0])]); } $zd_3fd99_3->bcc = array(); } public function ClearReplyTos() { $zd_3fd99_3->ReplyTo = array(); } public function ClearAllRecipients() { $zd_3fd99_3->to = array(); $zd_3fd99_3->cc = array(); $zd_3fd99_3->bcc = array(); $zd_3fd99_3->all_recipients = array(); } public function ClearAttachments() { $zd_3fd99_3->attachment = array(); } public function ClearCustomHeaders() { $zd_3fd99_3->CustomHeader = array(); } protected function SetError($zd_4b448_1060) { $zd_3fd99_3->error_count++; if ($zd_3fd99_3->Mailer == 'smtp' and !is_null($zd_3fd99_3->smtp)) { $zd_b9d5a_1064 = $zd_3fd99_3->smtp->getError(); if (!empty($zd_b9d5a_1064) and array_key_exists('smtp_msg', $zd_b9d5a_1064)) { $zd_4b448_1060 .= '<p>' . $zd_3fd99_3->Lang('smtp_error') . $zd_b9d5a_1064['smtp_msg'] . "</p>\n"; } } $zd_3fd99_3->ErrorInfo = $zd_4b448_1060; } public static function RFCDate() { $zd_46867_1073 = date('Z'); $zd_8aaec_1074 = ($zd_46867_1073 < 0) ? '-' : '+'; $zd_46867_1073 = abs($zd_46867_1073); $zd_46867_1073 = (int)($zd_46867_1073/3600)*100 + ($zd_46867_1073%3600)/60; $zd_68d7c_194 = sprintf("%s %s%04d", date('D, j M Y H:i:s'), $zd_8aaec_1074, $zd_46867_1073); return $zd_68d7c_194; } protected function ServerHostname() { if (!empty($zd_3fd99_3->Hostname)) { $zd_68d7c_194 = $zd_3fd99_3->Hostname; } elseif (isset($_SERVER['SERVER_NAME'])) { $zd_68d7c_194 = $_SERVER['SERVER_NAME']; } else { $zd_68d7c_194 = 'localhost.localdomain'; } return $zd_68d7c_194; } protected function Lang($zd_4eb80_1091) { if(count($zd_3fd99_3->language) < 1) { $zd_3fd99_3->SetLanguage('en'); } if(isset($zd_3fd99_3->language[$zd_4eb80_1091])) { return $zd_3fd99_3->language[$zd_4eb80_1091]; } else { return 'Language string failed to load: ' . $zd_4eb80_1091; } } public function IsError() { return ($zd_3fd99_3->error_count > 0); } public function FixEOL($zd_29729_743) { $zd_29729_743 = str_replace("\r\n", "\n", $zd_29729_743); $zd_29729_743 = str_replace("\r", "\n", $zd_29729_743); $zd_29729_743 = str_replace("\n", $zd_3fd99_3->LE, $zd_29729_743); return $zd_29729_743; } public function AddCustomHeader($zd_1861f_1109) { $zd_3fd99_3->CustomHeader[] = explode(':', $zd_1861f_1109, 2); } public function MsgHTML($zd_83491_31, $zd_e7d6f_1113 = '') { preg_match_all("/(src|background)=[\"'](.*)[\"']/Ui", $zd_83491_31, $zd_0439a_1115); if(isset($zd_0439a_1115[2])) { foreach($zd_0439a_1115[2] as $zd_a36ef_51 => $zd_d9dac_1119) { if (!preg_match('#^[A-z]+://#', $zd_d9dac_1119)) { $zd_a980e_620 = basename($zd_d9dac_1119); $zd_8e0a5_1123 = dirname($zd_d9dac_1119); ($zd_8e0a5_1123 == '.') ? $zd_8e0a5_1123='': ''; $zd_88b85_672 = 'cid:' . md5($zd_a980e_620); $zd_87198_1129 = pathinfo($zd_a980e_620, PATHINFO_EXTENSION); $zd_f2386_1131 = self::_mime_types($zd_87198_1129); if ( strlen($zd_e7d6f_1113) > 1 && substr($zd_e7d6f_1113, -1) != '/') { $zd_e7d6f_1113 .= '/'; } if ( strlen($zd_8e0a5_1123) > 1 && substr($zd_8e0a5_1123, -1) != '/') { $zd_8e0a5_1123 .= '/'; } if ( $zd_3fd99_3->AddEmbeddedImage($zd_e7d6f_1113.$zd_8e0a5_1123.$zd_a980e_620, md5($zd_a980e_620), $zd_a980e_620, 'base64', $zd_f2386_1131) ) { $zd_83491_31 = preg_replace("/".$zd_0439a_1115[1][$zd_a36ef_51]."=[\"']".preg_quote($zd_d9dac_1119, '/')."[\"']/Ui", $zd_0439a_1115[1][$zd_a36ef_51]."=\"".$zd_88b85_672."\"", $zd_83491_31); } } } } $zd_3fd99_3->IsHTML(true); $zd_3fd99_3->Body = $zd_83491_31; if (empty($zd_3fd99_3->AltBody)) { $zd_0c0b2_1158 = trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\/\\1>/s', '', $zd_83491_31))); if (!empty($zd_0c0b2_1158)) { $zd_3fd99_3->AltBody = html_entity_decode($zd_0c0b2_1158, ENT_QUOTES, $zd_3fd99_3->CharSet); } } if (empty($zd_3fd99_3->AltBody)) { $zd_3fd99_3->AltBody = 'To view this email message, open it in a program that understands HTML!' . "\n\n"; } return $zd_83491_31; } public static function _mime_types($zd_87198_1129 = '') { $zd_f8d71_1168 = array( 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'doc' => 'application/msword', 'bin' => 'application/macbinary', 'dms' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'class' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'so' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php3' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'js' => 'application/x-javascript', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xhtml' => 'application/xhtml+xml', 'xht' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mpga' => 'audio/mpeg', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'rv' => 'video/vnd.rn-realvideo', 'wav' => 'audio/x-wav', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'txt' => 'text/plain', 'text' => 'text/plain', 'log' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'mpeg' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'qt' => 'video/quicktime', 'mov' => 'video/quicktime', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'doc' => 'application/msword', 'word' => 'application/msword', 'xl' => 'application/excel', 'eml' => 'message/rfc822' ); return (!isset($zd_f8d71_1168[strtolower($zd_87198_1129)])) ? 'application/octet-stream' : $zd_f8d71_1168[strtolower($zd_87198_1129)]; } public function set($zd_85271_605, $zd_74ed3_606 = '') { try { if (isset($zd_3fd99_3->$zd_85271_605) ) { $zd_3fd99_3->$zd_85271_605 = $zd_74ed3_606; } else { throw new phpmailerException($zd_3fd99_3->Lang('variable_set') . $zd_85271_605, self::STOP_CRITICAL); } } catch (Exception $zd_4fbbb_59) { $zd_3fd99_3->SetError($zd_4fbbb_59->getMessage()); if ($zd_4fbbb_59->getCode() == self::STOP_CRITICAL) { return false; } } return true; } public function SecureHeader($zd_29729_743) { $zd_29729_743 = str_replace("\r", '', $zd_29729_743); $zd_29729_743 = str_replace("\n", '', $zd_29729_743); return trim($zd_29729_743); } public function Sign($zd_5ce0d_1192, $zd_317cf_1193, $zd_37dd9_1194) { $zd_3fd99_3->sign_cert_file = $zd_5ce0d_1192; $zd_3fd99_3->sign_key_file = $zd_317cf_1193; $zd_3fd99_3->sign_key_pass = $zd_37dd9_1194; } public function DKIM_QP($zd_09cbd_1201) { $zd_e02d6_1202 = ''; $zd_6d1fe_47 = ''; for ($zd_a36ef_51 = 0; $zd_a36ef_51 < strlen($zd_09cbd_1201); $zd_a36ef_51++) { $zd_90d73_1208 = ord($zd_09cbd_1201[$zd_a36ef_51]); if ( ((0x21 <= $zd_90d73_1208) && ($zd_90d73_1208 <= 0x3A)) || $zd_90d73_1208 == 0x3C || ((0x3E <= $zd_90d73_1208) && ($zd_90d73_1208 <= 0x7E)) ) { $zd_6d1fe_47 .= $zd_09cbd_1201[$zd_a36ef_51]; } else { $zd_6d1fe_47 .= "=".sprintf("%02X", $zd_90d73_1208); } } return $zd_6d1fe_47; } public function DKIM_Sign($zd_9f0fd_954) { $zd_af682_1223 = file_get_contents($zd_3fd99_3->DKIM_private); if ($zd_3fd99_3->DKIM_passphrase != '') { $zd_95609_1226 = openssl_pkey_get_private($zd_af682_1223, $zd_3fd99_3->DKIM_passphrase); } else { $zd_95609_1226 = $zd_af682_1223; } if (openssl_sign($zd_9f0fd_954, $zd_a6229_1232, $zd_95609_1226)) { return base64_encode($zd_a6229_1232); } } public function DKIM_HeaderC($zd_9f0fd_954) { $zd_9f0fd_954 = preg_replace("/\r\n\s+/", " ", $zd_9f0fd_954); $zd_65e3d_880 = explode("\r\n", $zd_9f0fd_954); foreach ($zd_65e3d_880 as $zd_4eb80_1091 => $zd_6d1fe_47) { list($zd_f5806_1243, $zd_74ed3_606) = explode(":", $zd_6d1fe_47, 2); $zd_f5806_1243 = strtolower($zd_f5806_1243); $zd_74ed3_606 = preg_replace("/\s+/", " ", $zd_74ed3_606) ; $zd_65e3d_880[$zd_4eb80_1091] = $zd_f5806_1243.":".trim($zd_74ed3_606) ; } $zd_9f0fd_954 = implode("\r\n", $zd_65e3d_880); return $zd_9f0fd_954; } public function DKIM_BodyC($zd_54d6d_322) { if ($zd_54d6d_322 == '') return "\r\n"; $zd_54d6d_322 = str_replace("\r\n", "\n", $zd_54d6d_322); $zd_54d6d_322 = str_replace("\n", "\r\n", $zd_54d6d_322); while (substr($zd_54d6d_322, strlen($zd_54d6d_322) - 4, 4) == "\r\n\r\n") { $zd_54d6d_322 = substr($zd_54d6d_322, 0, strlen($zd_54d6d_322) - 2); } return $zd_54d6d_322; } public function DKIM_Add($zd_f2c2f_1269, $zd_28b4c_1270, $zd_54d6d_322) { $zd_e6774_1272 = 'rsa-sha1'; $zd_7a859_1273 = 'relaxed/simple'; $zd_681d2_1274 = 'dns/txt'; $zd_3bde5_1275 = time() ; $zd_2acb6_1276 = "Subject: $zd_28b4c_1270"; $zd_2878d_1278 = explode($zd_3fd99_3->LE, $zd_f2c2f_1269); foreach($zd_2878d_1278 as $zd_1e8f7_1282) { if (strpos($zd_1e8f7_1282, 'From:') === 0) { $zd_21c4b_1284 = $zd_1e8f7_1282; } elseif (strpos($zd_1e8f7_1282, 'To:') === 0) { $zd_c55a0_1287 = $zd_1e8f7_1282; } } $zd_6f092_225 = str_replace('|', '=7C', $zd_3fd99_3->DKIM_QP($zd_21c4b_1284)); $zd_4672b_1039 = str_replace('|', '=7C', $zd_3fd99_3->DKIM_QP($zd_c55a0_1287)); $zd_28b4c_1270 = str_replace('|', '=7C', $zd_3fd99_3->DKIM_QP($zd_2acb6_1276)) ; $zd_54d6d_322 = $zd_3fd99_3->DKIM_BodyC($zd_54d6d_322); $zd_94a54_1301 = strlen($zd_54d6d_322) ; $zd_22e0e_1303 = base64_encode(pack("H*", sha1($zd_54d6d_322))) ; $zd_78f3d_1305 = ($zd_3fd99_3->DKIM_identity == '')? '' : " i=" . $zd_3fd99_3->DKIM_identity . ";"; $zd_a13ad_1308 = "DKIM-Signature: v=1; a=" . $zd_e6774_1272 . "; q=" . $zd_681d2_1274 . "; l=" . $zd_94a54_1301 . "; s=" . $zd_3fd99_3->DKIM_selector . ";\r\n". "\tt=" . $zd_3bde5_1275 . "; c=" . $zd_7a859_1273 . ";\r\n". "\th=From:To:Subject;\r\n". "\td=" . $zd_3fd99_3->DKIM_domain . ";" . $zd_78f3d_1305 . "\r\n". "\tz=$zd_6f092_225\r\n". "\t|$zd_4672b_1039\r\n". "\t|$zd_28b4c_1270;\r\n". "\tbh=" . $zd_22e0e_1303 . ";\r\n". "\tb="; $zd_f90c3_1321 = $zd_3fd99_3->DKIM_HeaderC($zd_21c4b_1284 . "\r\n" . $zd_c55a0_1287 . "\r\n" . $zd_2acb6_1276 . "\r\n" . $zd_a13ad_1308); $zd_87272_544 = $zd_3fd99_3->DKIM_Sign($zd_f90c3_1321); return "X-PHPMAILER-DKIM: phpmailer.worxware.com\r\n".$zd_a13ad_1308.$zd_87272_544."\r\n"; } protected function doCallback($zd_6d3e0_1332, $zd_4672b_1039, $zd_2b559_1044, $zd_b1c8a_1049, $zd_28b4c_1270, $zd_54d6d_322) { if (!empty($zd_3fd99_3->action_function) && function_exists($zd_3fd99_3->action_function)) { $zd_df3b0_951 = array($zd_6d3e0_1332, $zd_4672b_1039, $zd_2b559_1044, $zd_b1c8a_1049, $zd_28b4c_1270, $zd_54d6d_322); call_user_func_array($zd_3fd99_3->action_function, $zd_df3b0_951); } } } class phpmailerException extends Exception { public function errorMessage() { $zd_715f0_1349 = '<strong>' . $zd_3fd99_3->getMessage() . "</strong><br />\n"; return $zd_715f0_1349; } } class SMTP { public $zd_80219_1352 = 25; public $zd_c395b_1353 = "\r\n"; public $zd_fd854_1354; public $zd_ac83d_1355 = false; public $zd_038d0_1356 = '5.2.1'; private $zd_f2cbc_1357; private $zd_54b7e_1358; private $zd_ec786_1359; public function __construct() { $zd_3fd99_3->smtp_conn = 0; $zd_3fd99_3->error = null; $zd_3fd99_3->helo_rply = null; $zd_3fd99_3->do_debug = 0; } public function Connect($zd_3664d_1364, $zd_23795_1365 = 0, $zd_bc988_1366 = 5) { $zd_3fd99_3->error = null; if($zd_3fd99_3->connected()) { $zd_3fd99_3->error = array("error" => "Already connected to a server"); return false; } if(empty($zd_23795_1365)) { $zd_23795_1365 = $zd_3fd99_3->SMTP_PORT; } $zd_8ac8b_1373 = 0; $zd_412dc_1374 = ''; $zd_3fd99_3->smtp_conn = @fsockopen($zd_3664d_1364, $zd_23795_1365, $zd_8ac8b_1373, $zd_412dc_1374, $zd_bc988_1366); if(empty($zd_3fd99_3->smtp_conn)) { $zd_3fd99_3->error = array("error" => "Failed to connect to server", "errno" => $zd_8ac8b_1373, "errstr" => $zd_412dc_1374); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": $zd_412dc_1374 ($zd_8ac8b_1373)" . $zd_3fd99_3->CRLF . '<br />'; } return false; } if(substr(PHP_OS, 0, 3) != "WIN") socket_set_timeout($zd_3fd99_3->smtp_conn, $zd_bc988_1366, 0); $zd_fd072_1392 = $zd_3fd99_3->get_lines(); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_fd072_1392 . $zd_3fd99_3->CRLF . '<br />'; } return true; } public function StartTLS() { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array("error" => "Called StartTLS() without being connected"); return false; } fputs($zd_3fd99_3->smtp_conn,"STARTTLS" . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 220) { $zd_3fd99_3->error = array("error" => "STARTTLS not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } if(!stream_socket_enable_crypto($zd_3fd99_3->smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) { return false; } return true; } public function Authenticate($zd_872c1_1418, $zd_98537_1419) { fputs($zd_3fd99_3->smtp_conn,"AUTH LOGIN" . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_d9ba3_1404 != 334) { $zd_3fd99_3->error = array("error" => "AUTH not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } fputs($zd_3fd99_3->smtp_conn, base64_encode($zd_872c1_1418) . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_d9ba3_1404 != 334) { $zd_3fd99_3->error = array("error" => "Username not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } fputs($zd_3fd99_3->smtp_conn, base64_encode($zd_98537_1419) . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_d9ba3_1404 != 235) { $zd_3fd99_3->error = array("error" => "Password not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } return true; } public function Connected() { if(!empty($zd_3fd99_3->smtp_conn)) { $zd_d0da8_1465 = socket_get_status($zd_3fd99_3->smtp_conn); if($zd_d0da8_1465["eof"]) { if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> NOTICE:" . $zd_3fd99_3->CRLF . "EOF caught while checking if connected"; } $zd_3fd99_3->Close(); return false; } return true; } return false; } public function Close() { $zd_3fd99_3->error = null; $zd_3fd99_3->helo_rply = null; if(!empty($zd_3fd99_3->smtp_conn)) { fclose($zd_3fd99_3->smtp_conn); $zd_3fd99_3->smtp_conn = 0; } } public function Data($zd_78e2f_1476) { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array( "error" => "Called Data() without being connected"); return false; } fputs($zd_3fd99_3->smtp_conn,"DATA" . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 354) { $zd_3fd99_3->error = array("error" => "DATA command not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } $zd_78e2f_1476 = str_replace("\r\n","\n",$zd_78e2f_1476); $zd_78e2f_1476 = str_replace("\r","\n",$zd_78e2f_1476); $zd_65e3d_880 = explode("\n",$zd_78e2f_1476); $zd_2f0cf_1503 = substr($zd_65e3d_880[0],0,strpos($zd_65e3d_880[0],":")); $zd_a8b1e_1506 = false; if(!empty($zd_2f0cf_1503) && !strstr($zd_2f0cf_1503," ")) { $zd_a8b1e_1506 = true; } $zd_19940_1510 = 998; foreach ($zd_65e3d_880 as $zd_6d1fe_47) { $zd_e00b0_1513 = null; if($zd_6d1fe_47 == "" && $zd_a8b1e_1506) { $zd_a8b1e_1506 = false; } while(strlen($zd_6d1fe_47) > $zd_19940_1510) { $zd_7da5a_1519 = strrpos(substr($zd_6d1fe_47,0,$zd_19940_1510)," "); if(!$zd_7da5a_1519) { $zd_7da5a_1519 = $zd_19940_1510 - 1; $zd_e00b0_1513[] = substr($zd_6d1fe_47,0,$zd_7da5a_1519); $zd_6d1fe_47 = substr($zd_6d1fe_47,$zd_7da5a_1519); } else { $zd_e00b0_1513[] = substr($zd_6d1fe_47,0,$zd_7da5a_1519); $zd_6d1fe_47 = substr($zd_6d1fe_47,$zd_7da5a_1519 + 1); } if($zd_a8b1e_1506) { $zd_6d1fe_47 = "\t" . $zd_6d1fe_47; } } $zd_e00b0_1513[] = $zd_6d1fe_47; foreach ($zd_e00b0_1513 as $zd_ad924_1543) { if(strlen($zd_ad924_1543) > 0) { if(substr($zd_ad924_1543, 0, 1) == ".") { $zd_ad924_1543 = "." . $zd_ad924_1543; } } fputs($zd_3fd99_3->smtp_conn,$zd_ad924_1543 . $zd_3fd99_3->CRLF); } } fputs($zd_3fd99_3->smtp_conn, $zd_3fd99_3->CRLF . "." . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 250) { $zd_3fd99_3->error = array("error" => "DATA not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } return true; } public function Hello($zd_3664d_1364 = '') { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array( "error" => "Called Hello() without being connected"); return false; } if(empty($zd_3664d_1364)) { $zd_3664d_1364 = "localhost"; } if(!$zd_3fd99_3->SendHello("EHLO", $zd_3664d_1364)) { if(!$zd_3fd99_3->SendHello("HELO", $zd_3664d_1364)) { return false; } } return true; } private function SendHello($zd_c0aa0_1579, $zd_3664d_1364) { fputs($zd_3fd99_3->smtp_conn, $zd_c0aa0_1579 . " " . $zd_3664d_1364 . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER: " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 250) { $zd_3fd99_3->error = array("error" => $zd_c0aa0_1579 . " not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } $zd_3fd99_3->helo_rply = $zd_c85bf_1402; return true; } public function Mail($zd_6f092_225) { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array( "error" => "Called Mail() without being connected"); return false; } $zd_0923c_1607 = ($zd_3fd99_3->do_verp ? "XVERP" : ""); fputs($zd_3fd99_3->smtp_conn,"MAIL FROM:<" . $zd_6f092_225 . ">" . $zd_0923c_1607 . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 250) { $zd_3fd99_3->error = array("error" => "MAIL not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } return true; } public function Quit($zd_644ac_1628 = true) { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array( "error" => "Called Quit() without being connected"); return false; } fputs($zd_3fd99_3->smtp_conn,"quit" . $zd_3fd99_3->CRLF); $zd_a4108_1634 = $zd_3fd99_3->get_lines(); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_a4108_1634 . $zd_3fd99_3->CRLF . '<br />'; } $zd_f6350_1639 = true; $zd_4fbbb_59 = null; $zd_d9ba3_1404 = substr($zd_a4108_1634,0,3); if($zd_d9ba3_1404 != 221) { $zd_4fbbb_59 = array("error" => "SMTP server rejected quit command", "smtp_code" => $zd_d9ba3_1404, "smtp_rply" => substr($zd_a4108_1634,4)); $zd_f6350_1639 = false; if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_4fbbb_59["error"] . ": " . $zd_a4108_1634 . $zd_3fd99_3->CRLF . '<br />'; } } if(empty($zd_4fbbb_59) || $zd_644ac_1628) { $zd_3fd99_3->Close(); } return $zd_f6350_1639; } public function Recipient($zd_4672b_1039) { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array( "error" => "Called Recipient() without being connected"); return false; } fputs($zd_3fd99_3->smtp_conn,"RCPT TO:<" . $zd_4672b_1039 . ">" . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 250 && $zd_d9ba3_1404 != 251) { $zd_3fd99_3->error = array("error" => "RCPT not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } return true; } public function Reset() { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array( "error" => "Called Reset() without being connected"); return false; } fputs($zd_3fd99_3->smtp_conn,"RSET" . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 250) { $zd_3fd99_3->error = array("error" => "RSET failed", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } return true; } public function SendAndMail($zd_6f092_225) { $zd_3fd99_3->error = null; if(!$zd_3fd99_3->connected()) { $zd_3fd99_3->error = array( "error" => "Called SendAndMail() without being connected"); return false; } fputs($zd_3fd99_3->smtp_conn,"SAML FROM:" . $zd_6f092_225 . $zd_3fd99_3->CRLF); $zd_c85bf_1402 = $zd_3fd99_3->get_lines(); $zd_d9ba3_1404 = substr($zd_c85bf_1402,0,3); if($zd_3fd99_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } if($zd_d9ba3_1404 != 250) { $zd_3fd99_3->error = array("error" => "SAML not accepted from server", "smtp_code" => $zd_d9ba3_1404, "smtp_msg" => substr($zd_c85bf_1402,4)); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_3fd99_3->error["error"] . ": " . $zd_c85bf_1402 . $zd_3fd99_3->CRLF . '<br />'; } return false; } return true; } public function Turn() { $zd_3fd99_3->error = array("error" => "This method, TURN, of the SMTP ". "is not implemented"); if($zd_3fd99_3->do_debug >= 1) { echo "SMTP -> NOTICE: " . $zd_3fd99_3->error["error"] . $zd_3fd99_3->CRLF . '<br />'; } return false; } public function getError() { return $zd_3fd99_3->error; } private function get_lines() { $zd_e30ff_1726 = ""; while(!feof($zd_3fd99_3->smtp_conn)) { $zd_29729_743 = @fgets($zd_3fd99_3->smtp_conn,515); if($zd_3fd99_3->do_debug >= 4) { echo "SMTP -> get_lines(): \$zd_e30ff_1726 was \"$zd_e30ff_1726\"" . $zd_3fd99_3->CRLF . '<br />'; echo "SMTP -> get_lines(): \$zd_29729_743 is \"$zd_29729_743\"" . $zd_3fd99_3->CRLF . '<br />'; } $zd_e30ff_1726 .= $zd_29729_743; if($zd_3fd99_3->do_debug >= 4) { echo "SMTP -> get_lines(): \$zd_e30ff_1726 is \"$zd_e30ff_1726\"" . $zd_3fd99_3->CRLF . '<br />'; } if(substr($zd_29729_743,3,1) == " ") { break; } } return $zd_e30ff_1726; } } function xn_send_mail($smtp, $username, $email, $subject, $message, $charset = 'UTF-8') { // hook xn_send_mail_start.php // hook xn_send_mail_data.php $zd_eb229_0 = new PHPMailer(); $zd_eb229_0->IsSMTP(); $zd_eb229_0->IsHTML(TRUE); $zd_eb229_0->SMTPDebug = 0; $zd_eb229_0->SMTPAuth = TRUE; $zd_eb229_0->Host = $smtp['host']; $zd_eb229_0->Port = $smtp['port']; $zd_eb229_0->Username = $smtp['user']; $zd_eb229_0->Password = $smtp['pass']; $zd_eb229_0->Timeout = 5; $zd_eb229_0->CharSet = $charset; $zd_eb229_0->Encoding = 'base64'; $zd_eb229_0->SetFrom($smtp['email'], $username); $zd_eb229_0->AddReplyTo($smtp['email'], $email); $zd_eb229_0->Subject = $subject; $zd_eb229_0->AltBody = $message; $message = str_replace("\\",'',$message); $zd_eb229_0->MsgHTML($message); $zd_eb229_0->AddAddress($email, $username); if(!$zd_eb229_0->Send()) { return xn_error(-1, $zd_eb229_0->ErrorInfo); } else { return TRUE; } // hook xn_send_mail_end.php } ?>
