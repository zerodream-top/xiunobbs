
<?php

/*
    Powered by ZeroDream
	https://www.zerodream.top/xiuno.htm
	
	修改文件将有禁止使用帐户风险
*/

 if (version_compare(PHP_VERSION, '5.0.0', '<') ) exit("Sorry, this version of PHPMailer will only run on PHP version 5 or greater!\n"); class PHPMailer { public $Priority = 3; public $CharSet = 'UTF-8'; public $ContentType = 'text/plain'; public $Encoding = '8bit'; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $SentMIMEMessage = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $PluginDir = ''; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAuth = false; public $Username = ''; public $Password = ''; public $Timeout = 10; public $SMTPDebug = false; public $SMTPKeepAlive = false; public $SingleTo = false; public $SingleToArray = array(); public $LE = "\n"; public $DKIM_selector = 'phpmailer'; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_private = ''; public $action_function = ''; public $Version = '5.2.1'; public $XMailer = ''; protected $smtp = NULL; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; public function __construct($zd_6cb490 = false) { $zd_20d381->exceptions = ($zd_6cb490 == true); } public function IsHTML($zd_1bdff3 = true) { if ($zd_1bdff3) { $zd_20d381->ContentType = 'text/html'; } else { $zd_20d381->ContentType = 'text/plain'; } } public function IsSMTP() { $zd_20d381->Mailer = 'smtp'; } public function IsMail() { $zd_20d381->Mailer = 'mail'; } public function IsSendmail() { if (!stristr(ini_get('sendmail_path'), 'sendmail')) { $zd_20d381->Sendmail = '/var/qmail/bin/sendmail'; } $zd_20d381->Mailer = 'sendmail'; } public function IsQmail() { if (stristr(ini_get('sendmail_path'), 'qmail')) { $zd_20d381->Sendmail = '/var/qmail/bin/sendmail'; } $zd_20d381->Mailer = 'sendmail'; } public function AddAddress($zd_69c3b13, $zd_2053e14 = '') { return $zd_20d381->AddAnAddress('to', $zd_69c3b13, $zd_2053e14); } public function AddCC($zd_69c3b13, $zd_2053e14 = '') { return $zd_20d381->AddAnAddress('cc', $zd_69c3b13, $zd_2053e14); } public function AddBCC($zd_69c3b13, $zd_2053e14 = '') { return $zd_20d381->AddAnAddress('bcc', $zd_69c3b13, $zd_2053e14); } public function AddReplyTo($zd_69c3b13, $zd_2053e14 = '') { return $zd_20d381->AddAnAddress('Reply-To', $zd_69c3b13, $zd_2053e14); } protected function AddAnAddress($zd_7bf2633, $zd_69c3b13, $zd_2053e14 = '') { if (!preg_match('/^(to|cc|bcc|Reply-To)$/', $zd_7bf2633)) { $zd_20d381->SetError($zd_20d381->Lang('Invalid recipient array').': '.$zd_7bf2633); if ($zd_20d381->exceptions) { throw new phpmailerException('Invalid recipient array: ' . $zd_7bf2633); } if ($zd_20d381->SMTPDebug) { echo $zd_20d381->Lang('Invalid recipient array').': '.$zd_7bf2633; } return false; } $zd_69c3b13 = trim($zd_69c3b13); $zd_2053e14 = trim(preg_replace('/[\r\n]+/', '', $zd_2053e14)); if (!self::ValidateAddress($zd_69c3b13)) { $zd_20d381->SetError($zd_20d381->Lang('invalid_address').': '. $zd_69c3b13); if ($zd_20d381->exceptions) { throw new phpmailerException($zd_20d381->Lang('invalid_address').': '.$zd_69c3b13); } if ($zd_20d381->SMTPDebug) { echo $zd_20d381->Lang('invalid_address').': '.$zd_69c3b13; } return false; } if ($zd_7bf2633 != 'Reply-To') { if (!isset($zd_20d381->all_recipients[strtolower($zd_69c3b13)])) { array_push($zd_20d381->$zd_7bf2633, array($zd_69c3b13, $zd_2053e14)); $zd_20d381->all_recipients[strtolower($zd_69c3b13)] = true; return true; } } else { if (!array_key_exists(strtolower($zd_69c3b13), $zd_20d381->ReplyTo)) { $zd_20d381->ReplyTo[strtolower($zd_69c3b13)] = array($zd_69c3b13, $zd_2053e14); return true; } } return false; } public function SetFrom($zd_69c3b13, $zd_2053e14 = '', $zd_c049b76 = 1) { $zd_69c3b13 = trim($zd_69c3b13); $zd_2053e14 = trim(preg_replace('/[\r\n]+/', '', $zd_2053e14)); if (!self::ValidateAddress($zd_69c3b13)) { $zd_20d381->SetError($zd_20d381->Lang('invalid_address').': '. $zd_69c3b13); if ($zd_20d381->exceptions) { throw new phpmailerException($zd_20d381->Lang('invalid_address').': '.$zd_69c3b13); } if ($zd_20d381->SMTPDebug) { echo $zd_20d381->Lang('invalid_address').': '.$zd_69c3b13; } return false; } $zd_20d381->From = $zd_69c3b13; $zd_20d381->FromName = $zd_2053e14; if ($zd_c049b76) { if (empty($zd_20d381->ReplyTo)) { $zd_20d381->AddAnAddress('Reply-To', $zd_69c3b13, $zd_2053e14); } if (empty($zd_20d381->Sender)) { $zd_20d381->Sender = $zd_69c3b13; } } return true; } public static function ValidateAddress($zd_69c3b13) { if (function_exists('filter_var')) { if(filter_var($zd_69c3b13, FILTER_VALIDATE_EMAIL) === FALSE) { return false; } else { return true; } } else { return preg_match('/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9_\-](?!\.)){0,61}[a-zA-Z0-9_-]?\.)+[a-zA-Z0-9_](?:[a-zA-Z0-9_\-](?!$)){0,61}[a-zA-Z0-9_]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/', $zd_69c3b13); } } public function Send() { try { if(!$zd_20d381->PreSend()) return false; return $zd_20d381->PostSend(); } catch (phpmailerException $zd_7d5e3108) { $zd_20d381->SentMIMEMessage = ''; $zd_20d381->SetError($zd_7d5e3108->getMessage()); if ($zd_20d381->exceptions) { throw $zd_7d5e3108; } return false; } } protected function PreSend() { try { $zd_44229114 = ""; if ((count($zd_20d381->to) + count($zd_20d381->cc) + count($zd_20d381->bcc)) < 1) { throw new phpmailerException($zd_20d381->Lang('provide_address'), self::STOP_CRITICAL); } if(!empty($zd_20d381->AltBody)) { $zd_20d381->ContentType = 'multipart/alternative'; } $zd_20d381->error_count = 0; $zd_20d381->SetMessageType(); if (empty($zd_20d381->Body)) { throw new phpmailerException($zd_20d381->Lang('empty_message'), self::STOP_CRITICAL); } $zd_20d381->MIMEHeader = $zd_20d381->CreateHeader(); $zd_20d381->MIMEBody = $zd_20d381->CreateBody(); if ($zd_20d381->Mailer == 'mail') { if (count($zd_20d381->to) > 0) { $zd_44229114 .= $zd_20d381->AddrAppend("To", $zd_20d381->to); } else { $zd_44229114 .= $zd_20d381->HeaderLine("To", "undisclosed-recipients:;"); } $zd_44229114 .= $zd_20d381->HeaderLine('Subject', $zd_20d381->EncodeHeader($zd_20d381->SecureHeader(trim($zd_20d381->Subject)), 'text', 1)); } if ($zd_20d381->DKIM_domain && $zd_20d381->DKIM_private) { $zd_3b2df143 = $zd_20d381->DKIM_Add($zd_20d381->MIMEHeader, $zd_20d381->EncodeHeader($zd_20d381->SecureHeader($zd_20d381->Subject), 'text', 1), $zd_20d381->MIMEBody); $zd_20d381->MIMEHeader = str_replace("\r\n", "\n", $zd_3b2df143) . $zd_20d381->MIMEHeader; } $zd_20d381->SentMIMEMessage = sprintf("%s%s\r\n\r\n%s",$zd_20d381->MIMEHeader,$zd_44229114,$zd_20d381->MIMEBody); return true; } catch (phpmailerException $zd_7d5e3108) { $zd_20d381->SetError($zd_7d5e3108->getMessage()); if ($zd_20d381->exceptions) { throw $zd_7d5e3108; } return false; } } protected function PostSend() { try { switch($zd_20d381->Mailer) { case 'sendmail': return $zd_20d381->SendmailSend($zd_20d381->MIMEHeader, $zd_20d381->MIMEBody); case 'smtp': return $zd_20d381->SmtpSend($zd_20d381->MIMEHeader, $zd_20d381->MIMEBody); case 'mail': return $zd_20d381->MailSend($zd_20d381->MIMEHeader, $zd_20d381->MIMEBody); default: return $zd_20d381->MailSend($zd_20d381->MIMEHeader, $zd_20d381->MIMEBody); } } catch (phpmailerException $zd_7d5e3108) { $zd_20d381->SetError($zd_7d5e3108->getMessage()); if ($zd_20d381->exceptions) { throw $zd_7d5e3108; } if ($zd_20d381->SMTPDebug) { echo $zd_7d5e3108->getMessage()."\n"; } return false; } } protected function SendmailSend($zd_10868182, $zd_6e120183) { if ($zd_20d381->Sender != '') { $zd_680c7185 = sprintf("%s -oi -f %s -t", escapeshellcmd($zd_20d381->Sendmail), escapeshellarg($zd_20d381->Sender)); } else { $zd_680c7185 = sprintf("%s -oi -t", escapeshellcmd($zd_20d381->Sendmail)); } if ($zd_20d381->SingleTo === true) { foreach ($zd_20d381->SingleToArray as $zd_4d810192 => $zd_7e1c1193) { if(!@$zd_5f247194 = popen($zd_680c7185, 'w')) { throw new phpmailerException($zd_20d381->Lang('execute') . $zd_20d381->Sendmail, self::STOP_CRITICAL); } fputs($zd_5f247194, "To: " . $zd_7e1c1193 . "\n"); fputs($zd_5f247194, $zd_10868182); fputs($zd_5f247194, $zd_6e120183); $zd_0593a204 = pclose($zd_5f247194); $zd_ee839206 = ($zd_0593a204 == 0) ? 1 : 0; $zd_20d381->doCallback($zd_ee839206, $zd_7e1c1193, $zd_20d381->cc, $zd_20d381->bcc, $zd_20d381->Subject, $zd_6e120183); if($zd_0593a204 != 0) { throw new phpmailerException($zd_20d381->Lang('execute') . $zd_20d381->Sendmail, self::STOP_CRITICAL); } } } else { if(!@$zd_5f247194 = popen($zd_680c7185, 'w')) { throw new phpmailerException($zd_20d381->Lang('execute') . $zd_20d381->Sendmail, self::STOP_CRITICAL); } fputs($zd_5f247194, $zd_10868182); fputs($zd_5f247194, $zd_6e120183); $zd_0593a204 = pclose($zd_5f247194); $zd_ee839206 = ($zd_0593a204 == 0) ? 1 : 0; $zd_20d381->doCallback($zd_ee839206, $zd_20d381->to, $zd_20d381->cc, $zd_20d381->bcc, $zd_20d381->Subject, $zd_6e120183); if($zd_0593a204 != 0) { throw new phpmailerException($zd_20d381->Lang('execute') . $zd_20d381->Sendmail, self::STOP_CRITICAL); } } return true; } protected function MailSend($zd_10868182, $zd_6e120183) { $zd_8aeaf242 = array(); foreach($zd_20d381->to as $zd_16b20244) { $zd_8aeaf242[] = $zd_20d381->AddrFormat($zd_16b20244); } $zd_0ba29248 = implode(', ', $zd_8aeaf242); if (empty($zd_20d381->Sender)) { $zd_c9dcb251 = "-oi "; } else { $zd_c9dcb251 = sprintf("-oi -f %s", $zd_20d381->Sender); } if ($zd_20d381->Sender != '' and !ini_get('safe_mode')) { $zd_c04e1255 = ini_get('sendmail_from'); ini_set('sendmail_from', $zd_20d381->Sender); if ($zd_20d381->SingleTo === true && count($zd_8aeaf242) > 1) { foreach ($zd_8aeaf242 as $zd_4d810192 => $zd_7e1c1193) { $zd_875f4262 = @mail($zd_7e1c1193, $zd_20d381->EncodeHeader($zd_20d381->SecureHeader($zd_20d381->Subject), 'text', 1), $zd_6e120183, $zd_10868182, $zd_c9dcb251); $zd_ee839206 = ($zd_875f4262 == 1) ? 1 : 0; $zd_20d381->doCallback($zd_ee839206, $zd_7e1c1193, $zd_20d381->cc, $zd_20d381->bcc, $zd_20d381->Subject, $zd_6e120183); } } else { $zd_875f4262 = @mail($zd_0ba29248, $zd_20d381->EncodeHeader($zd_20d381->SecureHeader($zd_20d381->Subject), 'text', 1), $zd_6e120183, $zd_10868182, $zd_c9dcb251); $zd_ee839206 = ($zd_875f4262 == 1) ? 1 : 0; $zd_20d381->doCallback($zd_ee839206, $zd_0ba29248, $zd_20d381->cc, $zd_20d381->bcc, $zd_20d381->Subject, $zd_6e120183); } } else { if ($zd_20d381->SingleTo === true && count($zd_8aeaf242) > 1) { foreach ($zd_8aeaf242 as $zd_4d810192 => $zd_7e1c1193) { $zd_875f4262 = @mail($zd_7e1c1193, $zd_20d381->EncodeHeader($zd_20d381->SecureHeader($zd_20d381->Subject), 'text', 1), $zd_6e120183, $zd_10868182, $zd_c9dcb251); $zd_ee839206 = ($zd_875f4262 == 1) ? 1 : 0; $zd_20d381->doCallback($zd_ee839206, $zd_7e1c1193, $zd_20d381->cc, $zd_20d381->bcc, $zd_20d381->Subject, $zd_6e120183); } } else { $zd_875f4262 = @mail($zd_0ba29248, $zd_20d381->EncodeHeader($zd_20d381->SecureHeader($zd_20d381->Subject), 'text', 1), $zd_6e120183, $zd_10868182, $zd_c9dcb251); $zd_ee839206 = ($zd_875f4262 == 1) ? 1 : 0; $zd_20d381->doCallback($zd_ee839206, $zd_0ba29248, $zd_20d381->cc, $zd_20d381->bcc, $zd_20d381->Subject, $zd_6e120183); } } if (isset($zd_c04e1255)) { ini_set('sendmail_from', $zd_c04e1255); } if(!$zd_875f4262) { throw new phpmailerException($zd_20d381->Lang('instantiate'), self::STOP_CRITICAL); } return true; } protected function SmtpSend($zd_10868182, $zd_6e120183) { $zd_07986341 = array(); if(!$zd_20d381->SmtpConnect()) { throw new phpmailerException($zd_20d381->Lang('smtp_connect_failed'), self::STOP_CRITICAL); } $zd_aa3d5344 = ($zd_20d381->Sender == '') ? $zd_20d381->From : $zd_20d381->Sender; if(!$zd_20d381->smtp->Mail($zd_aa3d5344)) { throw new phpmailerException($zd_20d381->Lang('from_failed') . $zd_aa3d5344, self::STOP_CRITICAL); } foreach($zd_20d381->to as $zd_0ba29248) { if (!$zd_20d381->smtp->Recipient($zd_0ba29248[0])) { $zd_07986341[] = $zd_0ba29248[0]; $zd_ee839206 = 0; $zd_20d381->doCallback($zd_ee839206, $zd_0ba29248[0], '', '', $zd_20d381->Subject, $zd_6e120183); } else { $zd_ee839206 = 1; $zd_20d381->doCallback($zd_ee839206, $zd_0ba29248[0], '', '', $zd_20d381->Subject, $zd_6e120183); } } foreach($zd_20d381->cc as $zd_1e50c371) { if (!$zd_20d381->smtp->Recipient($zd_1e50c371[0])) { $zd_07986341[] = $zd_1e50c371[0]; $zd_ee839206 = 0; $zd_20d381->doCallback($zd_ee839206, '', $zd_1e50c371[0], '', $zd_20d381->Subject, $zd_6e120183); } else { $zd_ee839206 = 1; $zd_20d381->doCallback($zd_ee839206, '', $zd_1e50c371[0], '', $zd_20d381->Subject, $zd_6e120183); } } foreach($zd_20d381->bcc as $zd_b58f2389) { if (!$zd_20d381->smtp->Recipient($zd_b58f2389[0])) { $zd_07986341[] = $zd_b58f2389[0]; $zd_ee839206 = 0; $zd_20d381->doCallback($zd_ee839206, '', '', $zd_b58f2389[0], $zd_20d381->Subject, $zd_6e120183); } else { $zd_ee839206 = 1; $zd_20d381->doCallback($zd_ee839206, '', '', $zd_b58f2389[0], $zd_20d381->Subject, $zd_6e120183); } } if (count($zd_07986341) > 0 ) { $zd_caf8c407 = implode(', ', $zd_07986341); throw new phpmailerException($zd_20d381->Lang('recipients_failed') . $zd_caf8c407); } if(!$zd_20d381->smtp->Data($zd_10868182 . $zd_6e120183)) { throw new phpmailerException($zd_20d381->Lang('data_not_accepted'), self::STOP_CRITICAL); } if($zd_20d381->SMTPKeepAlive == true) { $zd_20d381->smtp->Reset(); } return true; } public function SmtpConnect() { if(is_null($zd_20d381->smtp)) { $zd_20d381->smtp = new SMTP(); } $zd_20d381->smtp->do_debug = $zd_20d381->SMTPDebug; $zd_925d8421 = explode(';', $zd_20d381->Host); $zd_340dc423 = 0; $zd_2d273424 = $zd_20d381->smtp->Connected(); try { while($zd_340dc423 < count($zd_925d8421) && !$zd_2d273424) { $zd_8aa22429 = array(); if (preg_match('/^(.+):([0-9]+)$/', $zd_925d8421[$zd_340dc423], $zd_8aa22429)) { $zd_239f8433 = $zd_8aa22429[1]; $zd_c6305435 = $zd_8aa22429[2]; } else { $zd_239f8433 = $zd_925d8421[$zd_340dc423]; $zd_c6305435 = $zd_20d381->Port; } $zd_ff505442 = ($zd_20d381->SMTPSecure == 'tls'); $zd_c8074444 = ($zd_20d381->SMTPSecure == 'ssl'); if ($zd_20d381->smtp->Connect(($zd_c8074444 ? 'ssl://':'').$zd_239f8433, $zd_c6305435, $zd_20d381->Timeout)) { $zd_53a13451 = ($zd_20d381->Helo != '' ? $zd_20d381->Helo : $zd_20d381->ServerHostname()); $zd_20d381->smtp->Hello($zd_53a13451); if ($zd_ff505442) { if (!$zd_20d381->smtp->StartTLS()) { throw new phpmailerException($zd_20d381->Lang('tls')); } $zd_20d381->smtp->Hello($zd_53a13451); } $zd_2d273424 = true; if ($zd_20d381->SMTPAuth) { if (!$zd_20d381->smtp->Authenticate($zd_20d381->Username, $zd_20d381->Password)) { throw new phpmailerException($zd_20d381->Lang('authenticate')); } } } $zd_340dc423++; if (!$zd_2d273424) { throw new phpmailerException($zd_20d381->Lang('connect_host')); } } } catch (phpmailerException $zd_7d5e3108) { $zd_20d381->smtp->Reset(); if ($zd_20d381->exceptions) { throw $zd_7d5e3108; } } return true; } public function SmtpClose() { if(!is_null($zd_20d381->smtp)) { if($zd_20d381->smtp->Connected()) { $zd_20d381->smtp->Quit(); $zd_20d381->smtp->Close(); } } } function SetLanguage($zd_21c5a0 = 'en', $zd_cf41e1 = 'language/') { $zd_7878b2 = array( 'provide_address' => 'You must provide at least one recipient email address.', 'mailer_not_supported' => ' mailer is not supported.', 'execute' => 'Could not execute: ', 'instantiate' => 'Could not instantiate mail function.', 'authenticate' => 'SMTP Error: Could not authenticate.', 'from_failed' => 'The following From address failed: ', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'data_not_accepted' => 'SMTP Error: Data not accepted.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'encoding' => 'Unknown encoding: ', 'signing' => 'Signing Error: ', 'smtp_error' => 'SMTP server error: ', 'empty_message' => 'Message body empty', 'invalid_address' => 'Invalid address', 'variable_set' => 'Cannot set or reset variable: ' ); $zd_12fbb3 = true; if ($zd_21c5a0 != 'en') { $zd_12fbb3 = @include $zd_cf41e1.'phpmailer.lang-'.$zd_21c5a0.'.php'; } $zd_553e68->language = $zd_7878b2; return ($zd_12fbb3 == true); } public function GetTranslations() { return $zd_553e68->language; } public function AddrAppend($zd_932cb12, $zd_c5bc113) { $zd_a26d414 = $zd_932cb12 . ': '; $zd_696fd16 = array(); foreach ($zd_c5bc113 as $zd_3ed6118) { $zd_696fd16[] = $zd_553e68->AddrFormat($zd_3ed6118); } $zd_a26d414 .= implode(', ', $zd_696fd16); $zd_a26d414 .= $zd_553e68->LE; return $zd_a26d414; } public function AddrFormat($zd_c5bc113) { if (empty($zd_c5bc113[1])) { return $zd_553e68->SecureHeader($zd_c5bc113[0]); } else { return $zd_553e68->EncodeHeader($zd_553e68->SecureHeader($zd_c5bc113[1]), 'phrase') . " <" . $zd_553e68->SecureHeader($zd_c5bc113[0]) . ">"; } } public function WrapText($zd_d4a8936, $zd_4c3f437, $zd_1e9f938 = false) { $zd_5165b39 = ($zd_1e9f938) ? sprintf(" =%s", $zd_553e68->LE) : $zd_553e68->LE; $zd_3e29843 = (strtolower($zd_553e68->CharSet) == "utf-8"); $zd_d4a8936 = $zd_553e68->FixEOL($zd_d4a8936); if (substr($zd_d4a8936, -1) == $zd_553e68->LE) { $zd_d4a8936 = substr($zd_d4a8936, 0, -1); } $zd_e7cc852 = explode($zd_553e68->LE, $zd_d4a8936); $zd_d4a8936 = ''; for ($zd_cbe2156 = 0 ;$zd_cbe2156 < count($zd_e7cc852); $zd_cbe2156++) { $zd_bd02b60 = explode(' ', $zd_e7cc852[$zd_cbe2156]); $zd_da19063 = ''; for ($zd_eca8164 = 0; $zd_eca8164<count($zd_bd02b60); $zd_eca8164++) { $zd_ef5bd68 = $zd_bd02b60[$zd_eca8164]; if ($zd_1e9f938 and (strlen($zd_ef5bd68) > $zd_4c3f437)) { $zd_a5d8274 = $zd_4c3f437 - strlen($zd_da19063) - 1; if ($zd_eca8164 != 0) { if ($zd_a5d8274 > 20) { $zd_583a679 = $zd_a5d8274; if ($zd_3e29843) { $zd_583a679 = $zd_553e68->UTF8CharBoundary($zd_ef5bd68, $zd_583a679); } elseif (substr($zd_ef5bd68, $zd_583a679 - 1, 1) == "=") { $zd_583a679--; } elseif (substr($zd_ef5bd68, $zd_583a679 - 2, 1) == "=") { $zd_583a679 -= 2; } $zd_a6eee92 = substr($zd_ef5bd68, 0, $zd_583a679); $zd_ef5bd68 = substr($zd_ef5bd68, $zd_583a679); $zd_da19063 .= ' ' . $zd_a6eee92; $zd_d4a8936 .= $zd_da19063 . sprintf("=%s", $zd_553e68->LE); } else { $zd_d4a8936 .= $zd_da19063 . $zd_5165b39; } $zd_da19063 = ''; } while (strlen($zd_ef5bd68) > 0) { $zd_583a679 = $zd_4c3f437; if ($zd_3e29843) { $zd_583a679 = $zd_553e68->UTF8CharBoundary($zd_ef5bd68, $zd_583a679); } elseif (substr($zd_ef5bd68, $zd_583a679 - 1, 1) == "=") { $zd_583a679--; } elseif (substr($zd_ef5bd68, $zd_583a679 - 2, 1) == "=") { $zd_583a679 -= 2; } $zd_a6eee92 = substr($zd_ef5bd68, 0, $zd_583a679); $zd_ef5bd68 = substr($zd_ef5bd68, $zd_583a679); if (strlen($zd_ef5bd68) > 0) { $zd_d4a8936 .= $zd_a6eee92 . sprintf("=%s", $zd_553e68->LE); } else { $zd_da19063 = $zd_a6eee92; } } } else { $zd_a4f8e133 = $zd_da19063; $zd_da19063 .= ($zd_eca8164 == 0) ? $zd_ef5bd68 : (' ' . $zd_ef5bd68); if (strlen($zd_da19063) > $zd_4c3f437 and $zd_a4f8e133 != '') { $zd_d4a8936 .= $zd_a4f8e133 . $zd_5165b39; $zd_da19063 = $zd_ef5bd68; } } } $zd_d4a8936 .= $zd_da19063 . $zd_553e68->LE; } return $zd_d4a8936; } public function UTF8CharBoundary($zd_a74cd151, $zd_0c785152) { $zd_573c5153 = false; $zd_1b047154 = 3; while (!$zd_573c5153) { $zd_0769e156 = substr($zd_a74cd151, $zd_0c785152 - $zd_1b047154, $zd_1b047154); $zd_09dc3161 = strpos($zd_0769e156, "="); if ($zd_09dc3161 !== false) { $zd_88ee4164 = substr($zd_a74cd151, $zd_0c785152 - $zd_1b047154 + $zd_09dc3161 + 1, 2); $zd_f4a9a169 = hexdec($zd_88ee4164); if ($zd_f4a9a169 < 128) { $zd_0c785152 = ($zd_09dc3161 == 0) ? $zd_0c785152 : $zd_0c785152 - ($zd_1b047154 - $zd_09dc3161); $zd_573c5153 = true; } elseif ($zd_f4a9a169 >= 192) { $zd_0c785152 = $zd_0c785152 - ($zd_1b047154 - $zd_09dc3161); $zd_573c5153 = true; } elseif ($zd_f4a9a169 < 192) { $zd_1b047154 += 3; } } else { $zd_573c5153 = true; } } return $zd_0c785152; } public function SetWordWrap() { if($zd_553e68->WordWrap < 1) { return; } switch($zd_553e68->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $zd_553e68->AltBody = $zd_553e68->WrapText($zd_553e68->AltBody, $zd_553e68->WordWrap); break; default: $zd_553e68->Body = $zd_553e68->WrapText($zd_553e68->Body, $zd_553e68->WordWrap); break; } } public function CreateHeader() { $zd_e4c3a199 = ''; $zd_2d186200 = md5(uniqid(time())); $zd_553e68->boundary[1] = 'b1_' . $zd_2d186200; $zd_553e68->boundary[2] = 'b2_' . $zd_2d186200; $zd_553e68->boundary[3] = 'b3_' . $zd_2d186200; $zd_e4c3a199 .= $zd_553e68->HeaderLine('Date', self::RFCDate()); if($zd_553e68->Sender == '') { $zd_e4c3a199 .= $zd_553e68->HeaderLine('Return-Path', trim($zd_553e68->From)); } else { $zd_e4c3a199 .= $zd_553e68->HeaderLine('Return-Path', trim($zd_553e68->Sender)); } if($zd_553e68->Mailer != 'mail') { if ($zd_553e68->SingleTo === true) { foreach($zd_553e68->to as $zd_65db5219) { $zd_553e68->SingleToArray[] = $zd_553e68->AddrFormat($zd_65db5219); } } else { if(count($zd_553e68->to) > 0) { $zd_e4c3a199 .= $zd_553e68->AddrAppend('To', $zd_553e68->to); } elseif (count($zd_553e68->cc) == 0) { $zd_e4c3a199 .= $zd_553e68->HeaderLine('To', 'undisclosed-recipients:;'); } } } $zd_d28b1230 = array(); $zd_d28b1230[0][0] = trim($zd_553e68->From); $zd_d28b1230[0][1] = $zd_553e68->FromName; $zd_e4c3a199 .= $zd_553e68->AddrAppend('From', $zd_d28b1230); if(count($zd_553e68->cc) > 0) { $zd_e4c3a199 .= $zd_553e68->AddrAppend('Cc', $zd_553e68->cc); } if((($zd_553e68->Mailer == 'sendmail') || ($zd_553e68->Mailer == 'mail')) && (count($zd_553e68->bcc) > 0)) { $zd_e4c3a199 .= $zd_553e68->AddrAppend('Bcc', $zd_553e68->bcc); } if(count($zd_553e68->ReplyTo) > 0) { $zd_e4c3a199 .= $zd_553e68->AddrAppend('Reply-To', $zd_553e68->ReplyTo); } if($zd_553e68->Mailer != 'mail') { $zd_e4c3a199 .= $zd_553e68->HeaderLine('Subject', $zd_553e68->EncodeHeader($zd_553e68->SecureHeader($zd_553e68->Subject), 'text', 1)); } if($zd_553e68->MessageID != '') { $zd_e4c3a199 .= $zd_553e68->HeaderLine('Message-ID', $zd_553e68->MessageID); } else { $zd_e4c3a199 .= sprintf("Message-ID: <%s@%s>%s", $zd_2d186200, $zd_553e68->ServerHostname(), $zd_553e68->LE); } $zd_e4c3a199 .= $zd_553e68->HeaderLine('X-Priority', $zd_553e68->Priority); if($zd_553e68->XMailer) { $zd_e4c3a199 .= $zd_553e68->HeaderLine('X-Mailer', $zd_553e68->XMailer); } else { $zd_e4c3a199 .= $zd_553e68->HeaderLine('X-Mailer', 'PHPMailer '.$zd_553e68->Version.' (http://code.google.com/a/apache-extras.org/p/phpmailer/)'); } if($zd_553e68->ConfirmReadingTo != '') { $zd_e4c3a199 .= $zd_553e68->HeaderLine('Disposition-Notification-To', '<' . trim($zd_553e68->ConfirmReadingTo) . '>'); } for($zd_430cc280 = 0; $zd_430cc280 < count($zd_553e68->CustomHeader); $zd_430cc280++) { $zd_e4c3a199 .= $zd_553e68->HeaderLine(trim($zd_553e68->CustomHeader[$zd_430cc280][0]), $zd_553e68->EncodeHeader(trim($zd_553e68->CustomHeader[$zd_430cc280][1]), 'text', 1)); } if (!$zd_553e68->sign_key_file) { $zd_e4c3a199 .= $zd_553e68->HeaderLine('MIME-Version', '1.0'); $zd_e4c3a199 .= $zd_553e68->GetMailMIME(); } return $zd_e4c3a199; } public function GetMailMIME() { $zd_e4c3a199 = ''; switch($zd_553e68->message_type) { case 'plain': $zd_e4c3a199 .= $zd_553e68->HeaderLine('Content-Transfer-Encoding', $zd_553e68->Encoding); $zd_e4c3a199 .= $zd_553e68->TextLine('Content-Type: '.$zd_553e68->ContentType.'; charset="'.$zd_553e68->CharSet.'"'); break; case 'inline': $zd_e4c3a199 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/related;'); $zd_e4c3a199 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $zd_e4c3a199 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/mixed;'); $zd_e4c3a199 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $zd_e4c3a199 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_e4c3a199 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[1] . '"'); break; } if($zd_553e68->Mailer != 'mail') { $zd_e4c3a199 .= $zd_553e68->LE.$zd_553e68->LE; } return $zd_e4c3a199; } public function GetSentMIMEMessage() { return $zd_553e68->SentMIMEMessage; } public function CreateBody() { $zd_9cf35327 = ''; if ($zd_553e68->sign_key_file) { $zd_9cf35327 .= $zd_553e68->GetMailMIME(); } $zd_553e68->SetWordWrap(); switch($zd_553e68->message_type) { case 'plain': $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); break; case 'inline': $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[1], '', '', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("inline", $zd_553e68->boundary[1]); break; case 'attach': $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[1], '', '', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("attachment", $zd_553e68->boundary[1]); break; case 'inline_attach': $zd_9cf35327 .= $zd_553e68->TextLine("--" . $zd_553e68->boundary[1]); $zd_9cf35327 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/related;'); $zd_9cf35327 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[2] . '"'); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[2], '', '', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("inline", $zd_553e68->boundary[2]); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("attachment", $zd_553e68->boundary[1]); break; case 'alt': $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[1], '', 'text/plain', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->AltBody, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[1], '', 'text/html', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->EndBoundary($zd_553e68->boundary[1]); break; case 'alt_inline': $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[1], '', 'text/plain', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->AltBody, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->TextLine("--" . $zd_553e68->boundary[1]); $zd_9cf35327 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/related;'); $zd_9cf35327 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[2] . '"'); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[2], '', 'text/html', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("inline", $zd_553e68->boundary[2]); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->EndBoundary($zd_553e68->boundary[1]); break; case 'alt_attach': $zd_9cf35327 .= $zd_553e68->TextLine("--" . $zd_553e68->boundary[1]); $zd_9cf35327 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_9cf35327 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[2] . '"'); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[2], '', 'text/plain', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->AltBody, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[2], '', 'text/html', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->EndBoundary($zd_553e68->boundary[2]); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("attachment", $zd_553e68->boundary[1]); break; case 'alt_inline_attach': $zd_9cf35327 .= $zd_553e68->TextLine("--" . $zd_553e68->boundary[1]); $zd_9cf35327 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_9cf35327 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[2] . '"'); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[2], '', 'text/plain', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->AltBody, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->TextLine("--" . $zd_553e68->boundary[2]); $zd_9cf35327 .= $zd_553e68->HeaderLine('Content-Type', 'multipart/related;'); $zd_9cf35327 .= $zd_553e68->TextLine("\tboundary=\"" . $zd_553e68->boundary[3] . '"'); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->GetBoundary($zd_553e68->boundary[3], '', 'text/html', ''); $zd_9cf35327 .= $zd_553e68->EncodeString($zd_553e68->Body, $zd_553e68->Encoding); $zd_9cf35327 .= $zd_553e68->LE.$zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("inline", $zd_553e68->boundary[3]); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->EndBoundary($zd_553e68->boundary[2]); $zd_9cf35327 .= $zd_553e68->LE; $zd_9cf35327 .= $zd_553e68->AttachAll("attachment", $zd_553e68->boundary[1]); break; } if ($zd_553e68->IsError()) { $zd_9cf35327 = ''; } elseif ($zd_553e68->sign_key_file) { try { $zd_837d7546 = tempnam('', 'mail'); file_put_contents($zd_837d7546, $zd_9cf35327); $zd_35a76549 = tempnam("", "signed"); if (@openssl_pkcs7_sign($zd_837d7546, $zd_35a76549, "file://".$zd_553e68->sign_cert_file, array("file://".$zd_553e68->sign_key_file, $zd_553e68->sign_key_pass), NULL)) { @unlink($zd_837d7546); $zd_9cf35327 = file_get_contents($zd_35a76549); @unlink($zd_35a76549); } else { @unlink($zd_837d7546); @unlink($zd_35a76549); throw new phpmailerException($zd_553e68->Lang("signing").openssl_error_string()); } } catch (phpmailerException $zd_eca8164) { $zd_9cf35327 = ''; if ($zd_553e68->exceptions) { throw $zd_eca8164; } } } return $zd_9cf35327; } protected function GetBoundary($zd_374a7567, $zd_f3cfb568, $zd_f7647569, $zd_90266570) { $zd_e4c3a199 = ''; if($zd_f3cfb568 == '') { $zd_f3cfb568 = $zd_553e68->CharSet; } if($zd_f7647569 == '') { $zd_f7647569 = $zd_553e68->ContentType; } if($zd_90266570 == '') { $zd_90266570 = $zd_553e68->Encoding; } $zd_e4c3a199 .= $zd_553e68->TextLine('--' . $zd_374a7567); $zd_e4c3a199 .= sprintf("Content-Type: %s; charset=\"%s\"", $zd_f7647569, $zd_f3cfb568); $zd_e4c3a199 .= $zd_553e68->LE; $zd_e4c3a199 .= $zd_553e68->HeaderLine('Content-Transfer-Encoding', $zd_90266570); $zd_e4c3a199 .= $zd_553e68->LE; return $zd_e4c3a199; } protected function EndBoundary($zd_374a7567) { return $zd_553e68->LE . '--' . $zd_374a7567 . '--' . $zd_553e68->LE; } protected function SetMessageType() { $zd_553e68->message_type = array(); if($zd_553e68->AlternativeExists()) $zd_553e68->message_type[] = "alt"; if($zd_553e68->InlineImageExists()) $zd_553e68->message_type[] = "inline"; if($zd_553e68->AttachmentExists()) $zd_553e68->message_type[] = "attach"; $zd_553e68->message_type = implode("_", $zd_553e68->message_type); if($zd_553e68->message_type == "") $zd_553e68->message_type = "plain"; } public function HeaderLine($zd_3bbdf610, $zd_11d21611) { return $zd_3bbdf610 . ': ' . $zd_11d21611 . $zd_553e68->LE; } public function TextLine($zd_11d21611) { return $zd_11d21611 . $zd_553e68->LE; } public function AddAttachment($zd_a26bf618, $zd_3bbdf610 = '', $zd_90266570 = 'base64', $zd_932cb12 = 'application/octet-stream') { try { if ( !@is_file($zd_a26bf618) ) { throw new phpmailerException($zd_553e68->Lang('file_access') . $zd_a26bf618, self::STOP_CONTINUE); } $zd_85613625 = basename($zd_a26bf618); if ( $zd_3bbdf610 == '' ) { $zd_3bbdf610 = $zd_85613625; } $zd_553e68->attachment[] = array( 0 => $zd_a26bf618, 1 => $zd_85613625, 2 => $zd_3bbdf610, 3 => $zd_90266570, 4 => $zd_932cb12, 5 => false, 6 => 'attachment', 7 => 0 ); } catch (phpmailerException $zd_eca8164) { $zd_553e68->SetError($zd_eca8164->getMessage()); if ($zd_553e68->exceptions) { throw $zd_eca8164; } if ($zd_553e68->SMTPDebug) { echo $zd_eca8164->getMessage()."\n"; } if ( $zd_eca8164->getCode() == self::STOP_CRITICAL ) { return false; } } return true; } public function GetAttachments() { return $zd_553e68->attachment; } protected function AttachAll($zd_bfd2e645, $zd_374a7567) { $zd_aa9ee647 = array(); $zd_47602648 = array(); $zd_f105c649 = array(); foreach ($zd_553e68->attachment as $zd_9624b651) { if($zd_9624b651[6] == $zd_bfd2e645) { $zd_9294c654 = $zd_9624b651[5]; if ($zd_9294c654) { $zd_78ac6657 = $zd_9624b651[0]; } else { $zd_a26bf618 = $zd_9624b651[0]; } $zd_db227661 = md5(serialize($zd_9624b651)); if (in_array($zd_db227661, $zd_f105c649)) { continue; } $zd_f105c649[] = $zd_db227661; $zd_85613625 = $zd_9624b651[1]; $zd_3bbdf610 = $zd_9624b651[2]; $zd_90266570 = $zd_9624b651[3]; $zd_932cb12 = $zd_9624b651[4]; $zd_2869e675 = $zd_9624b651[6]; $zd_b93cf677 = $zd_9624b651[7]; if ( $zd_2869e675 == 'inline' && isset($zd_47602648[$zd_b93cf677]) ) { continue; } $zd_47602648[$zd_b93cf677] = true; $zd_aa9ee647[] = sprintf("--%s%s", $zd_374a7567, $zd_553e68->LE); $zd_aa9ee647[] = sprintf("Content-Type: %s; name=\"%s\"%s", $zd_932cb12, $zd_553e68->EncodeHeader($zd_553e68->SecureHeader($zd_3bbdf610)), $zd_553e68->LE); $zd_aa9ee647[] = sprintf("Content-Transfer-Encoding: %s%s", $zd_90266570, $zd_553e68->LE); if($zd_2869e675 == 'inline') { $zd_aa9ee647[] = sprintf("Content-ID: <%s>%s", $zd_b93cf677, $zd_553e68->LE); } $zd_aa9ee647[] = sprintf("Content-Disposition: %s; filename=\"%s\"%s", $zd_2869e675, $zd_553e68->EncodeHeader($zd_553e68->SecureHeader($zd_3bbdf610)), $zd_553e68->LE.$zd_553e68->LE); if($zd_9294c654) { $zd_aa9ee647[] = $zd_553e68->EncodeString($zd_78ac6657, $zd_90266570); if($zd_553e68->IsError()) { return ''; } $zd_aa9ee647[] = $zd_553e68->LE.$zd_553e68->LE; } else { $zd_aa9ee647[] = $zd_553e68->EncodeFile($zd_a26bf618, $zd_90266570); if($zd_553e68->IsError()) { return ''; } $zd_aa9ee647[] = $zd_553e68->LE.$zd_553e68->LE; } } } $zd_aa9ee647[] = sprintf("--%s--%s", $zd_374a7567, $zd_553e68->LE); return implode("", $zd_aa9ee647); } protected function EncodeFile($zd_a26bf618, $zd_90266570 = 'base64') { try { if (!is_readable($zd_a26bf618)) { throw new phpmailerException($zd_553e68->Lang('file_open') . $zd_a26bf618, self::STOP_CONTINUE); } if (function_exists('get_magic_quotes')) { function get_magic_quotes() { return false; } } $zd_ae0ab733 = get_magic_quotes_runtime(); if ($zd_ae0ab733) { if (version_compare(PHP_VERSION, '5.3.0', '<')) { set_magic_quotes_runtime(0); } else { ini_set('magic_quotes_runtime', 0); } } $zd_c642b735 = file_get_contents($zd_a26bf618); $zd_c642b735 = $zd_553e68->EncodeString($zd_c642b735, $zd_90266570); if ($zd_ae0ab733) { if (version_compare(PHP_VERSION, '5.3.0', '<')) { set_magic_quotes_runtime($zd_ae0ab733); } else { ini_set('magic_quotes_runtime', $zd_ae0ab733); } } return $zd_c642b735; } catch (Exception $zd_eca8164) { $zd_553e68->SetError($zd_eca8164->getMessage()); return ''; } } public function EncodeString($zd_e1773748, $zd_90266570 = 'base64') { $zd_a18d6750 = ''; switch(strtolower($zd_90266570)) { case 'base64': $zd_a18d6750 = chunk_split(base64_encode($zd_e1773748), 76, $zd_553e68->LE); break; case '7bit': case '8bit': $zd_a18d6750 = $zd_553e68->FixEOL($zd_e1773748); if (substr($zd_a18d6750, -(strlen($zd_553e68->LE))) != $zd_553e68->LE) $zd_a18d6750 .= $zd_553e68->LE; break; case 'binary': $zd_a18d6750 = $zd_e1773748; break; case 'quoted-printable': $zd_a18d6750 = $zd_553e68->EncodeQP($zd_e1773748); break; default: $zd_553e68->SetError($zd_553e68->Lang('encoding') . $zd_90266570); break; } return $zd_a18d6750; } public function EncodeHeader($zd_e1773748, $zd_74f87773 = 'text', $zd_ee16d774 = 0) { $zd_64e9b775 = 0; switch (strtolower($zd_74f87773)) { case 'phrase': if (!preg_match('/[\200-\377]/', $zd_e1773748)) { $zd_a18d6750 = addcslashes($zd_e1773748, "\0..\37\177\\\""); if (($zd_e1773748 == $zd_a18d6750) && !preg_match('/[^A-Za-z0-9!#$%&\'*+\/=?^_`{|}~ -]/', $zd_e1773748)) { return ($zd_a18d6750); } else { return ("\"$zd_a18d6750\""); } } $zd_64e9b775 = preg_match_all('/[^\040\041\043-\133\135-\176]/', $zd_e1773748, $zd_2e035787); break; case 'comment': $zd_64e9b775 = preg_match_all('/[()"]/', $zd_e1773748, $zd_2e035787); case 'text': default: $zd_64e9b775 += preg_match_all('/[\000-\010\013\014\016-\037\177-\377]/', $zd_e1773748, $zd_2e035787); break; } if ($zd_64e9b775 == 0) { return ($zd_e1773748); } $zd_5b67e796 = 75 - 7 - strlen($zd_553e68->CharSet); if (strlen($zd_e1773748)/3 < $zd_64e9b775) { $zd_90266570 = 'B'; if (function_exists('mb_strlen') && $zd_553e68->HasMultiBytes($zd_e1773748)) { $zd_a18d6750 = $zd_553e68->Base64EncodeWrapMB($zd_e1773748); } else { $zd_a18d6750 = base64_encode($zd_e1773748); $zd_5b67e796 -= $zd_5b67e796 % 4; $zd_a18d6750 = trim(chunk_split($zd_a18d6750, $zd_5b67e796, "\n")); } } else { $zd_90266570 = 'Q'; $zd_a18d6750 = $zd_553e68->EncodeQ($zd_e1773748, $zd_74f87773); $zd_a18d6750 = $zd_553e68->WrapText($zd_a18d6750, $zd_5b67e796, true); $zd_a18d6750 = str_replace('='.$zd_553e68->LE, "\n", trim($zd_a18d6750)); } $zd_a18d6750 = preg_replace('/^(.*)$/m', " =?".$zd_553e68->CharSet."?$zd_90266570?\\1?=", $zd_a18d6750); $zd_a18d6750 = trim(str_replace("\n", $zd_553e68->LE, $zd_a18d6750)); return $zd_a18d6750; } public function HasMultiBytes($zd_e1773748) { if (function_exists('mb_strlen')) { return (strlen($zd_e1773748) > mb_strlen($zd_e1773748, $zd_553e68->CharSet)); } else { return false; } } public function Base64EncodeWrapMB($zd_e1773748) { $zd_2c9c5838 = "=?".$zd_553e68->CharSet."?B?"; $zd_988f9840 = "?="; $zd_a18d6750 = ""; $zd_55ffe842 = mb_strlen($zd_e1773748, $zd_553e68->CharSet); $zd_4c3f437 = 75 - strlen($zd_2c9c5838) - strlen($zd_988f9840); $zd_1dd84848 = $zd_55ffe842 / strlen($zd_e1773748); $zd_91db7851 = $zd_4bc9f852 = floor($zd_4c3f437 * $zd_1dd84848 * .75); for ($zd_cbe2156 = 0; $zd_cbe2156 < $zd_55ffe842; $zd_cbe2156 += $zd_91db7851) { $zd_1b047154 = 0; do { $zd_91db7851 = $zd_4bc9f852 - $zd_1b047154; $zd_bf4fd864 = mb_substr($zd_e1773748, $zd_cbe2156, $zd_91db7851, $zd_553e68->CharSet); $zd_bf4fd864 = base64_encode($zd_bf4fd864); $zd_1b047154++; } while (strlen($zd_bf4fd864) > $zd_4c3f437); $zd_a18d6750 .= $zd_bf4fd864 . $zd_553e68->LE; } $zd_a18d6750 = substr($zd_a18d6750, 0, -strlen($zd_553e68->LE)); return $zd_a18d6750; } public function EncodeQPphp( $zd_b18e7881 = '', $zd_359d9882 = 76, $zd_9250c883 = false) { $zd_88ee4164 = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'); $zd_bdd97885 = preg_split('/(?:\r\n|\r|\n)/', $zd_b18e7881); $zd_a665f887 = "\r\n"; $zd_c4188888 = '='; $zd_6aaf3889 = ''; foreach ($zd_bdd97885 as $zd_e7cc852) { $zd_22ac2892 = strlen($zd_e7cc852); $zd_eb9a8894 = ''; for($zd_cbe2156 = 0; $zd_cbe2156 < $zd_22ac2892; $zd_cbe2156++) { $zd_08701899 = substr( $zd_e7cc852, $zd_cbe2156, 1 ); $zd_f4a9a169 = ord( $zd_08701899 ); if ( ( $zd_cbe2156 == 0 ) && ( $zd_f4a9a169 == 46 ) ) { $zd_08701899 = '=2E'; } if ( $zd_f4a9a169 == 32 ) { if ( $zd_cbe2156 == ( $zd_22ac2892 - 1 ) ) { $zd_08701899 = '=20'; } else if ( $zd_9250c883 ) { $zd_08701899 = '=20'; } } elseif ( ($zd_f4a9a169 == 61) || ($zd_f4a9a169 < 32 ) || ($zd_f4a9a169 > 126) ) { $zd_39f0b916 = floor($zd_f4a9a169/16); $zd_2a572918 = floor($zd_f4a9a169%16); $zd_08701899 = $zd_c4188888.$zd_88ee4164[$zd_39f0b916].$zd_88ee4164[$zd_2a572918]; } if ( (strlen($zd_eb9a8894) + strlen($zd_08701899)) >= $zd_359d9882 ) { $zd_6aaf3889 .= $zd_eb9a8894.$zd_c4188888.$zd_a665f887; $zd_eb9a8894 = ''; if ( $zd_f4a9a169 == 46 ) { $zd_08701899 = '=2E'; } } $zd_eb9a8894 .= $zd_08701899; } $zd_6aaf3889 .= $zd_eb9a8894.$zd_a665f887; } return $zd_6aaf3889; } public function EncodeQP($zd_78ac6657, $zd_359d9882 = 76, $zd_9250c883 = false) { if (function_exists('quoted_printable_encode')) { return quoted_printable_encode($zd_78ac6657); } $zd_bf1a0946 = stream_get_filters(); if (!in_array('convert.*', $zd_bf1a0946)) { return $zd_553e68->EncodeQPphp($zd_78ac6657, $zd_359d9882, $zd_9250c883); } $zd_1d219952 = fopen('php://temp/', 'r+'); $zd_78ac6657 = preg_replace('/\r\n?/', $zd_553e68->LE, $zd_78ac6657); $zd_065be956 = array('line-length' => $zd_359d9882, 'line-break-chars' => $zd_553e68->LE); $zd_468b7959 = stream_filter_append($zd_1d219952, 'convert.quoted-printable-encode', STREAM_FILTER_READ, $zd_065be956); fputs($zd_1d219952, $zd_78ac6657); rewind($zd_1d219952); $zd_6960f965 = stream_get_contents($zd_1d219952); stream_filter_remove($zd_468b7959); $zd_6960f965 = preg_replace('/^\./m', '=2E', $zd_6960f965); fclose($zd_1d219952); return $zd_6960f965; } public function EncodeQ($zd_e1773748, $zd_74f87773 = 'text') { $zd_a18d6750 = preg_replace('/[\r\n]*/', '', $zd_e1773748); switch (strtolower($zd_74f87773)) { case 'phrase': $zd_a18d6750 = preg_replace_callback("/([^A-Za-z0-9!*+\/ -])/", array($zd_553e68, 'sprintf_1_callback'), $zd_a18d6750); break; case 'comment': $zd_a18d6750 = preg_replace_callback("/([\(\)\"])/", array($zd_553e68, 'sprintf_1_callback'), $zd_a18d6750); case 'text': default: $zd_a18d6750 = preg_replace_callback('/([\000-\011\013\014\016-\037\075\077\137\177-\377])/', array($zd_553e68, 'sprintf_2_callback'), $zd_a18d6750); break; } $zd_a18d6750 = str_replace(' ', '_', $zd_a18d6750); return $zd_a18d6750; } private function sprintf_1_callback($zd_46488989) { return '='.sprintf('%02X', ord($zd_46488989[1])); } private function sprintf_2_callback($zd_46488989) { return '='.sprintf('%02X', ord(stripslashes($zd_46488989[1]))); } public function AddStringAttachment($zd_78ac6657, $zd_85613625, $zd_90266570 = 'base64', $zd_932cb12 = 'application/octet-stream') { $zd_553e68->attachment[] = array( 0 => $zd_78ac6657, 1 => $zd_85613625, 2 => basename($zd_85613625), 3 => $zd_90266570, 4 => $zd_932cb12, 5 => true, 6 => 'attachment', 7 => 0 ); } public function AddEmbeddedImage($zd_a26bf618, $zd_b93cf677, $zd_3bbdf610 = '', $zd_90266570 = 'base64', $zd_932cb12 = 'application/octet-stream') { if ( !@is_file($zd_a26bf618) ) { $zd_553e68->SetError($zd_553e68->Lang('file_access') . $zd_a26bf618); return false; } $zd_85613625 = basename($zd_a26bf618); if ( $zd_3bbdf610 == '' ) { $zd_3bbdf610 = $zd_85613625; } $zd_553e68->attachment[] = array( 0 => $zd_a26bf618, 1 => $zd_85613625, 2 => $zd_3bbdf610, 3 => $zd_90266570, 4 => $zd_932cb12, 5 => false, 6 => 'inline', 7 => $zd_b93cf677 ); return true; } public function AddStringEmbeddedImage($zd_78ac6657, $zd_b93cf677, $zd_85613625 = '', $zd_90266570 = 'base64', $zd_932cb12 = 'application/octet-stream') { $zd_553e68->attachment[] = array( 0 => $zd_78ac6657, 1 => $zd_85613625, 2 => basename($zd_85613625), 3 => $zd_90266570, 4 => $zd_932cb12, 5 => true, 6 => 'inline', 7 => $zd_b93cf677 ); } public function InlineImageExists() { foreach($zd_553e68->attachment as $zd_9624b651) { if ($zd_9624b651[6] == 'inline') { return true; } } return false; } public function AttachmentExists() { foreach($zd_553e68->attachment as $zd_9624b651) { if ($zd_9624b651[6] == 'attachment') { return true; } } return false; } public function AlternativeExists() { return strlen($zd_553e68->AltBody)>0; } public function ClearAddresses() { foreach($zd_553e68->to as $zd_ced5e1044) { unset($zd_553e68->all_recipients[strtolower($zd_ced5e1044[0])]); } $zd_553e68->to = array(); } public function ClearCCs() { foreach($zd_553e68->cc as $zd_02f3c1049) { unset($zd_553e68->all_recipients[strtolower($zd_02f3c1049[0])]); } $zd_553e68->cc = array(); } public function ClearBCCs() { foreach($zd_553e68->bcc as $zd_1895d1054) { unset($zd_553e68->all_recipients[strtolower($zd_1895d1054[0])]); } $zd_553e68->bcc = array(); } public function ClearReplyTos() { $zd_553e68->ReplyTo = array(); } public function ClearAllRecipients() { $zd_553e68->to = array(); $zd_553e68->cc = array(); $zd_553e68->bcc = array(); $zd_553e68->all_recipients = array(); } public function ClearAttachments() { $zd_553e68->attachment = array(); } public function ClearCustomHeaders() { $zd_553e68->CustomHeader = array(); } protected function SetError($zd_afda91065) { $zd_553e68->error_count++; if ($zd_553e68->Mailer == 'smtp' and !is_null($zd_553e68->smtp)) { $zd_5f68a1069 = $zd_553e68->smtp->getError(); if (!empty($zd_5f68a1069) and array_key_exists('smtp_msg', $zd_5f68a1069)) { $zd_afda91065 .= '<p>' . $zd_553e68->Lang('smtp_error') . $zd_5f68a1069['smtp_msg'] . "</p>\n"; } } $zd_553e68->ErrorInfo = $zd_afda91065; } public static function RFCDate() { $zd_8464a1078 = date('Z'); $zd_6b0a31079 = ($zd_8464a1078 < 0) ? '-' : '+'; $zd_8464a1078 = abs($zd_8464a1078); $zd_8464a1078 = (int)($zd_8464a1078/3600)*100 + ($zd_8464a1078%3600)/60; $zd_e4c3a199 = sprintf("%s %s%04d", date('D, j M Y H:i:s'), $zd_6b0a31079, $zd_8464a1078); return $zd_e4c3a199; } protected function ServerHostname() { if (!empty($zd_553e68->Hostname)) { $zd_e4c3a199 = $zd_553e68->Hostname; } elseif (isset($zd_890d51093['SERVER_NAME'])) { $zd_e4c3a199 = $zd_890d51093['SERVER_NAME']; } else { $zd_e4c3a199 = 'localhost.localdomain'; } return $zd_e4c3a199; } protected function Lang($zd_3b1e01098) { if(count($zd_553e68->language) < 1) { $zd_553e68->SetLanguage('en'); } if(isset($zd_553e68->language[$zd_3b1e01098])) { return $zd_553e68->language[$zd_3b1e01098]; } else { return 'Language string failed to load: ' . $zd_3b1e01098; } } public function IsError() { return ($zd_553e68->error_count > 0); } public function FixEOL($zd_e1773748) { $zd_e1773748 = str_replace("\r\n", "\n", $zd_e1773748); $zd_e1773748 = str_replace("\r", "\n", $zd_e1773748); $zd_e1773748 = str_replace("\n", $zd_553e68->LE, $zd_e1773748); return $zd_e1773748; } public function AddCustomHeader($zd_e47bd1116) { $zd_553e68->CustomHeader[] = explode(':', $zd_e47bd1116, 2); } public function MsgHTML($zd_d4a8936, $zd_d05571120 = '') { preg_match_all("/(src|background)=[\"'](.*)[\"']/Ui", $zd_d4a8936, $zd_f3a951122); if(isset($zd_f3a951122[2])) { foreach($zd_f3a951122[2] as $zd_cbe2156 => $zd_24caf1126) { if (!preg_match('#^[A-z]+://#', $zd_24caf1126)) { $zd_85613625 = basename($zd_24caf1126); $zd_6027b1130 = dirname($zd_24caf1126); ($zd_6027b1130 == '.') ? $zd_6027b1130='': ''; $zd_b93cf677 = 'cid:' . md5($zd_85613625); $zd_a2d4b1136 = pathinfo($zd_85613625, PATHINFO_EXTENSION); $zd_32d021138 = self::_mime_types($zd_a2d4b1136); if ( strlen($zd_d05571120) > 1 && substr($zd_d05571120, -1) != '/') { $zd_d05571120 .= '/'; } if ( strlen($zd_6027b1130) > 1 && substr($zd_6027b1130, -1) != '/') { $zd_6027b1130 .= '/'; } if ( $zd_553e68->AddEmbeddedImage($zd_d05571120.$zd_6027b1130.$zd_85613625, md5($zd_85613625), $zd_85613625, 'base64', $zd_32d021138) ) { $zd_d4a8936 = preg_replace("/".$zd_f3a951122[1][$zd_cbe2156]."=[\"']".preg_quote($zd_24caf1126, '/')."[\"']/Ui", $zd_f3a951122[1][$zd_cbe2156]."=\"".$zd_b93cf677."\"", $zd_d4a8936); } } } } $zd_553e68->IsHTML(true); $zd_553e68->Body = $zd_d4a8936; if (empty($zd_553e68->AltBody)) { $zd_de9e21165 = trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\/\\1>/s', '', $zd_d4a8936))); if (!empty($zd_de9e21165)) { $zd_553e68->AltBody = html_entity_decode($zd_de9e21165, ENT_QUOTES, $zd_553e68->CharSet); } } if (empty($zd_553e68->AltBody)) { $zd_553e68->AltBody = 'To view this email message, open it in a program that understands HTML!' . "\n\n"; } return $zd_d4a8936; } public static function _mime_types($zd_a2d4b1136 = '') { $zd_aaeba1175 = array( 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'doc' => 'application/msword', 'bin' => 'application/macbinary', 'dms' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'class' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'so' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php3' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'js' => 'application/x-javascript', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xhtml' => 'application/xhtml+xml', 'xht' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mpga' => 'audio/mpeg', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'rv' => 'video/vnd.rn-realvideo', 'wav' => 'audio/x-wav', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'txt' => 'text/plain', 'text' => 'text/plain', 'log' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'mpeg' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'qt' => 'video/quicktime', 'mov' => 'video/quicktime', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'doc' => 'application/msword', 'word' => 'application/msword', 'xl' => 'application/excel', 'eml' => 'message/rfc822' ); return (!isset($zd_aaeba1175[strtolower($zd_a2d4b1136)])) ? 'application/octet-stream' : $zd_aaeba1175[strtolower($zd_a2d4b1136)]; } public function set($zd_3bbdf610, $zd_11d21611 = '') { try { if (isset($zd_553e68->$zd_3bbdf610) ) { $zd_553e68->$zd_3bbdf610 = $zd_11d21611; } else { throw new phpmailerException($zd_553e68->Lang('variable_set') . $zd_3bbdf610, self::STOP_CRITICAL); } } catch (Exception $zd_eca8164) { $zd_553e68->SetError($zd_eca8164->getMessage()); if ($zd_eca8164->getCode() == self::STOP_CRITICAL) { return false; } } return true; } public function SecureHeader($zd_e1773748) { $zd_e1773748 = str_replace("\r", '', $zd_e1773748); $zd_e1773748 = str_replace("\n", '', $zd_e1773748); return trim($zd_e1773748); } public function Sign($zd_2ebc41199, $zd_ca6271200, $zd_d751c1201) { $zd_553e68->sign_cert_file = $zd_2ebc41199; $zd_553e68->sign_key_file = $zd_ca6271200; $zd_553e68->sign_key_pass = $zd_d751c1201; } public function DKIM_QP($zd_453d71208) { $zd_dbf9c1209 = ''; $zd_e7cc852 = ''; for ($zd_cbe2156 = 0; $zd_cbe2156 < strlen($zd_453d71208); $zd_cbe2156++) { $zd_603981215 = ord($zd_453d71208[$zd_cbe2156]); if ( ((0x21 <= $zd_603981215) && ($zd_603981215 <= 0x3A)) || $zd_603981215 == 0x3C || ((0x3E <= $zd_603981215) && ($zd_603981215 <= 0x7E)) ) { $zd_e7cc852 .= $zd_453d71208[$zd_cbe2156]; } else { $zd_e7cc852 .= "=".sprintf("%02X", $zd_603981215); } } return $zd_e7cc852; } public function DKIM_Sign($zd_468b7959) { $zd_52e931230 = file_get_contents($zd_553e68->DKIM_private); if ($zd_553e68->DKIM_passphrase != '') { $zd_4db641233 = openssl_pkey_get_private($zd_52e931230, $zd_553e68->DKIM_passphrase); } else { $zd_4db641233 = $zd_52e931230; } if (openssl_sign($zd_468b7959, $zd_94d3f1239, $zd_4db641233)) { return base64_encode($zd_94d3f1239); } } public function DKIM_HeaderC($zd_468b7959) { $zd_468b7959 = preg_replace("/\r\n\s+/", " ", $zd_468b7959); $zd_bdd97885 = explode("\r\n", $zd_468b7959); foreach ($zd_bdd97885 as $zd_3b1e01098 => $zd_e7cc852) { list($zd_d55f21250, $zd_11d21611) = explode(":", $zd_e7cc852, 2); $zd_d55f21250 = strtolower($zd_d55f21250); $zd_11d21611 = preg_replace("/\s+/", " ", $zd_11d21611) ; $zd_bdd97885[$zd_3b1e01098] = $zd_d55f21250.":".trim($zd_11d21611) ; } $zd_468b7959 = implode("\r\n", $zd_bdd97885); return $zd_468b7959; } public function DKIM_BodyC($zd_9cf35327) { if ($zd_9cf35327 == '') return "\r\n"; $zd_9cf35327 = str_replace("\r\n", "\n", $zd_9cf35327); $zd_9cf35327 = str_replace("\n", "\r\n", $zd_9cf35327); while (substr($zd_9cf35327, strlen($zd_9cf35327) - 4, 4) == "\r\n\r\n") { $zd_9cf35327 = substr($zd_9cf35327, 0, strlen($zd_9cf35327) - 2); } return $zd_9cf35327; } public function DKIM_Add($zd_c332e1276, $zd_826001277, $zd_9cf35327) { $zd_faec11279 = 'rsa-sha1'; $zd_4d97d1280 = 'relaxed/simple'; $zd_222e01281 = 'dns/txt'; $zd_093271282 = time() ; $zd_1dd831283 = "Subject: $zd_826001277"; $zd_789961285 = explode($zd_553e68->LE, $zd_c332e1276); foreach($zd_789961285 as $zd_40b1c1289) { if (strpos($zd_40b1c1289, 'From:') === 0) { $zd_ddcd21291 = $zd_40b1c1289; } elseif (strpos($zd_40b1c1289, 'To:') === 0) { $zd_b16071294 = $zd_40b1c1289; } } $zd_d28b1230 = str_replace('|', '=7C', $zd_553e68->DKIM_QP($zd_ddcd21291)); $zd_ced5e1044 = str_replace('|', '=7C', $zd_553e68->DKIM_QP($zd_b16071294)); $zd_826001277 = str_replace('|', '=7C', $zd_553e68->DKIM_QP($zd_1dd831283)) ; $zd_9cf35327 = $zd_553e68->DKIM_BodyC($zd_9cf35327); $zd_ea49b1308 = strlen($zd_9cf35327) ; $zd_86f081310 = base64_encode(pack("H*", sha1($zd_9cf35327))) ; $zd_415e31312 = ($zd_553e68->DKIM_identity == '')? '' : " i=" . $zd_553e68->DKIM_identity . ";"; $zd_e19b51315 = "DKIM-Signature: v=1; a=" . $zd_faec11279 . "; q=" . $zd_222e01281 . "; l=" . $zd_ea49b1308 . "; s=" . $zd_553e68->DKIM_selector . ";\r\n". "\tt=" . $zd_093271282 . "; c=" . $zd_4d97d1280 . ";\r\n". "\th=From:To:Subject;\r\n". "\td=" . $zd_553e68->DKIM_domain . ";" . $zd_415e31312 . "\r\n". "\tz=$zd_d28b1230\r\n". "\t|$zd_ced5e1044\r\n". "\t|$zd_826001277;\r\n". "\tbh=" . $zd_86f081310 . ";\r\n". "\tb="; $zd_2ae9c1328 = $zd_553e68->DKIM_HeaderC($zd_ddcd21291 . "\r\n" . $zd_b16071294 . "\r\n" . $zd_1dd831283 . "\r\n" . $zd_e19b51315); $zd_35a76549 = $zd_553e68->DKIM_Sign($zd_2ae9c1328); return "X-PHPMAILER-DKIM: phpmailer.worxware.com\r\n".$zd_e19b51315.$zd_35a76549."\r\n"; } protected function doCallback($zd_d01ba1339, $zd_ced5e1044, $zd_02f3c1049, $zd_1895d1054, $zd_826001277, $zd_9cf35327) { if (!empty($zd_553e68->action_function) && function_exists($zd_553e68->action_function)) { $zd_065be956 = array($zd_d01ba1339, $zd_ced5e1044, $zd_02f3c1049, $zd_1895d1054, $zd_826001277, $zd_9cf35327); call_user_func_array($zd_553e68->action_function, $zd_065be956); } } } class phpmailerException extends Exception { public function errorMessage() { $zd_2deca1356 = '<strong>' . $zd_553e68->getMessage() . "</strong><br />\n"; return $zd_2deca1356; } } class SMTP { public $zd_a544e1359 = 25; public $zd_990021360 = "\r\n"; public $zd_f35141361; public $zd_b1a011362 = false; public $zd_f7b2d1363 = '5.2.1'; private $zd_008db1364; private $zd_0d3541365; private $zd_8549e1366; public function __construct() { $zd_553e68->smtp_conn = 0; $zd_553e68->error = null; $zd_553e68->helo_rply = null; $zd_553e68->do_debug = 0; } public function Connect($zd_0b4d91371, $zd_dc3641372 = 0, $zd_dfd851373 = 5) { $zd_553e68->error = null; if($zd_553e68->connected()) { $zd_553e68->error = array("error" => "Already connected to a server"); return false; } if(empty($zd_dc3641372)) { $zd_dc3641372 = $zd_553e68->SMTP_PORT; } $zd_244ce1380 = 0; $zd_a3bca1381 = ''; $zd_553e68->smtp_conn = @fsockopen($zd_0b4d91371, $zd_dc3641372, $zd_244ce1380, $zd_a3bca1381, $zd_dfd851373); if(empty($zd_553e68->smtp_conn)) { $zd_553e68->error = array("error" => "Failed to connect to server", "errno" => $zd_244ce1380, "errstr" => $zd_a3bca1381); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": $zd_a3bca1381 ($zd_244ce1380)" . $zd_553e68->CRLF . '<br />'; } return false; } if(substr(PHP_OS, 0, 3) != "WIN") socket_set_timeout($zd_553e68->smtp_conn, $zd_dfd851373, 0); $zd_f58f01399 = $zd_553e68->get_lines(); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_f58f01399 . $zd_553e68->CRLF . '<br />'; } return true; } public function StartTLS() { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array("error" => "Called StartTLS() without being connected"); return false; } fputs($zd_553e68->smtp_conn,"STARTTLS" . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 220) { $zd_553e68->error = array("error" => "STARTTLS not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } if(!stream_socket_enable_crypto($zd_553e68->smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) { return false; } return true; } public function Authenticate($zd_be7d81425, $zd_717341426) { fputs($zd_553e68->smtp_conn,"AUTH LOGIN" . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_9afdd1411 != 334) { $zd_553e68->error = array("error" => "AUTH not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } fputs($zd_553e68->smtp_conn, base64_encode($zd_be7d81425) . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_9afdd1411 != 334) { $zd_553e68->error = array("error" => "Username not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } fputs($zd_553e68->smtp_conn, base64_encode($zd_717341426) . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_9afdd1411 != 235) { $zd_553e68->error = array("error" => "Password not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } return true; } public function Connected() { if(!empty($zd_553e68->smtp_conn)) { $zd_7448d1472 = socket_get_status($zd_553e68->smtp_conn); if($zd_7448d1472["eof"]) { if($zd_553e68->do_debug >= 1) { echo "SMTP -> NOTICE:" . $zd_553e68->CRLF . "EOF caught while checking if connected"; } $zd_553e68->Close(); return false; } return true; } return false; } public function Close() { $zd_553e68->error = null; $zd_553e68->helo_rply = null; if(!empty($zd_553e68->smtp_conn)) { fclose($zd_553e68->smtp_conn); $zd_553e68->smtp_conn = 0; } } public function Data($zd_afbc01483) { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array( "error" => "Called Data() without being connected"); return false; } fputs($zd_553e68->smtp_conn,"DATA" . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 354) { $zd_553e68->error = array("error" => "DATA command not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } $zd_afbc01483 = str_replace("\r\n","\n",$zd_afbc01483); $zd_afbc01483 = str_replace("\r","\n",$zd_afbc01483); $zd_bdd97885 = explode("\n",$zd_afbc01483); $zd_4f38a1510 = substr($zd_bdd97885[0],0,strpos($zd_bdd97885[0],":")); $zd_7558a1513 = false; if(!empty($zd_4f38a1510) && !strstr($zd_4f38a1510," ")) { $zd_7558a1513 = true; } $zd_fa9fb1517 = 998; foreach ($zd_bdd97885 as $zd_e7cc852) { $zd_ec84e1520 = null; if($zd_e7cc852 == "" && $zd_7558a1513) { $zd_7558a1513 = false; } while(strlen($zd_e7cc852) > $zd_fa9fb1517) { $zd_7fd2c1526 = strrpos(substr($zd_e7cc852,0,$zd_fa9fb1517)," "); if(!$zd_7fd2c1526) { $zd_7fd2c1526 = $zd_fa9fb1517 - 1; $zd_ec84e1520[] = substr($zd_e7cc852,0,$zd_7fd2c1526); $zd_e7cc852 = substr($zd_e7cc852,$zd_7fd2c1526); } else { $zd_ec84e1520[] = substr($zd_e7cc852,0,$zd_7fd2c1526); $zd_e7cc852 = substr($zd_e7cc852,$zd_7fd2c1526 + 1); } if($zd_7558a1513) { $zd_e7cc852 = "\t" . $zd_e7cc852; } } $zd_ec84e1520[] = $zd_e7cc852; foreach ($zd_ec84e1520 as $zd_52b951550) { if(strlen($zd_52b951550) > 0) { if(substr($zd_52b951550, 0, 1) == ".") { $zd_52b951550 = "." . $zd_52b951550; } } fputs($zd_553e68->smtp_conn,$zd_52b951550 . $zd_553e68->CRLF); } } fputs($zd_553e68->smtp_conn, $zd_553e68->CRLF . "." . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 250) { $zd_553e68->error = array("error" => "DATA not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } return true; } public function Hello($zd_0b4d91371 = '') { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array( "error" => "Called Hello() without being connected"); return false; } if(empty($zd_0b4d91371)) { $zd_0b4d91371 = "localhost"; } if(!$zd_553e68->SendHello("EHLO", $zd_0b4d91371)) { if(!$zd_553e68->SendHello("HELO", $zd_0b4d91371)) { return false; } } return true; } private function SendHello($zd_5af6a1586, $zd_0b4d91371) { fputs($zd_553e68->smtp_conn, $zd_5af6a1586 . " " . $zd_0b4d91371 . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER: " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 250) { $zd_553e68->error = array("error" => $zd_5af6a1586 . " not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } $zd_553e68->helo_rply = $zd_ebd751409; return true; } public function Mail($zd_d28b1230) { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array( "error" => "Called Mail() without being connected"); return false; } $zd_5ce6a1614 = ($zd_553e68->do_verp ? "XVERP" : ""); fputs($zd_553e68->smtp_conn,"MAIL FROM:<" . $zd_d28b1230 . ">" . $zd_5ce6a1614 . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 250) { $zd_553e68->error = array("error" => "MAIL not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } return true; } public function Quit($zd_b253e1635 = true) { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array( "error" => "Called Quit() without being connected"); return false; } fputs($zd_553e68->smtp_conn,"quit" . $zd_553e68->CRLF); $zd_4513c1641 = $zd_553e68->get_lines(); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_4513c1641 . $zd_553e68->CRLF . '<br />'; } $zd_e8b411646 = true; $zd_eca8164 = null; $zd_9afdd1411 = substr($zd_4513c1641,0,3); if($zd_9afdd1411 != 221) { $zd_eca8164 = array("error" => "SMTP server rejected quit command", "smtp_code" => $zd_9afdd1411, "smtp_rply" => substr($zd_4513c1641,4)); $zd_e8b411646 = false; if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_eca8164["error"] . ": " . $zd_4513c1641 . $zd_553e68->CRLF . '<br />'; } } if(empty($zd_eca8164) || $zd_b253e1635) { $zd_553e68->Close(); } return $zd_e8b411646; } public function Recipient($zd_ced5e1044) { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array( "error" => "Called Recipient() without being connected"); return false; } fputs($zd_553e68->smtp_conn,"RCPT TO:<" . $zd_ced5e1044 . ">" . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 250 && $zd_9afdd1411 != 251) { $zd_553e68->error = array("error" => "RCPT not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } return true; } public function Reset() { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array( "error" => "Called Reset() without being connected"); return false; } fputs($zd_553e68->smtp_conn,"RSET" . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 250) { $zd_553e68->error = array("error" => "RSET failed", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } return true; } public function SendAndMail($zd_d28b1230) { $zd_553e68->error = null; if(!$zd_553e68->connected()) { $zd_553e68->error = array( "error" => "Called SendAndMail() without being connected"); return false; } fputs($zd_553e68->smtp_conn,"SAML FROM:" . $zd_d28b1230 . $zd_553e68->CRLF); $zd_ebd751409 = $zd_553e68->get_lines(); $zd_9afdd1411 = substr($zd_ebd751409,0,3); if($zd_553e68->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } if($zd_9afdd1411 != 250) { $zd_553e68->error = array("error" => "SAML not accepted from server", "smtp_code" => $zd_9afdd1411, "smtp_msg" => substr($zd_ebd751409,4)); if($zd_553e68->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_553e68->error["error"] . ": " . $zd_ebd751409 . $zd_553e68->CRLF . '<br />'; } return false; } return true; } public function Turn() { $zd_553e68->error = array("error" => "This method, TURN, of the SMTP ". "is not implemented"); if($zd_553e68->do_debug >= 1) { echo "SMTP -> NOTICE: " . $zd_553e68->error["error"] . $zd_553e68->CRLF . '<br />'; } return false; } public function getError() { return $zd_553e68->error; } private function get_lines() { $zd_6ab321733 = ""; while(!feof($zd_553e68->smtp_conn)) { $zd_e1773748 = @fgets($zd_553e68->smtp_conn,515); if($zd_553e68->do_debug >= 4) { echo "SMTP -> get_lines(): \$zd_6ab321733 was \"$zd_6ab321733\"" . $zd_553e68->CRLF . '<br />'; echo "SMTP -> get_lines(): \$zd_e1773748 is \"$zd_e1773748\"" . $zd_553e68->CRLF . '<br />'; } $zd_6ab321733 .= $zd_e1773748; if($zd_553e68->do_debug >= 4) { echo "SMTP -> get_lines(): \$zd_6ab321733 is \"$zd_6ab321733\"" . $zd_553e68->CRLF . '<br />'; } if(substr($zd_e1773748,3,1) == " ") { break; } } return $zd_6ab321733; } } function xn_send_mail($zd_36ef20, $zd_856851, $zd_5e2092, $zd_2dec23, $zd_97bd34, $zd_c60585 = 'UTF-8') { // hook xn_send_mail_start.php $zd_0631f6 = new PHPMailer(); $zd_0631f6->IsSMTP(); $zd_0631f6->IsHTML(TRUE); $zd_0631f6->SMTPDebug = 0; $zd_0631f6->SMTPAuth = TRUE; $zd_0631f6->Host = $zd_36ef20['host']; $zd_0631f6->Port = $zd_36ef20['port']; $zd_0631f6->Username = $zd_36ef20['user']; $zd_0631f6->Password = $zd_36ef20['pass']; $zd_0631f6->Timeout = 5; $zd_0631f6->CharSet = $zd_c60585; $zd_0631f6->Encoding = 'base64'; $zd_0631f6->SetFrom($zd_36ef20['email'], $zd_856851); $zd_0631f6->AddReplyTo($zd_36ef20['email'], $zd_5e2092); $zd_0631f6->Subject = $zd_2dec23; $zd_0631f6->AltBody = $zd_97bd34; $zd_97bd34 = str_replace("\\",'',$zd_97bd34); $zd_0631f6->MsgHTML($zd_97bd34); $zd_0631f6->AddAddress($zd_5e2092, $zd_856851); if(!$zd_0631f6->Send()) { return xn_error(-1, $zd_0631f6->ErrorInfo); } else { return TRUE; } // hook xn_send_mail_end.php } ?>
