
<?php

/*
    Powered by ZeroDream
	https://www.zerodream.top/xiuno.htm
	
	修改文件将有禁止使用帐户风险
*/

 if (version_compare(PHP_VERSION, '5.0.0', '<') ) exit("Sorry, this version of PHPMailer will only run on PHP version 5 or greater!\n"); class PHPMailer { public $Priority = 3; public $CharSet = 'UTF-8'; public $ContentType = 'text/plain'; public $Encoding = '8bit'; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $SentMIMEMessage = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $PluginDir = ''; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAuth = false; public $Username = ''; public $Password = ''; public $Timeout = 10; public $SMTPDebug = false; public $SMTPKeepAlive = false; public $SingleTo = false; public $SingleToArray = array(); public $LE = "\n"; public $DKIM_selector = 'phpmailer'; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_private = ''; public $action_function = ''; public $Version = '5.2.1'; public $XMailer = ''; protected $smtp = NULL; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; public function __construct($exceptions = false) { $zd_5e6c3_0->exceptions = ($exceptions == true); } public function IsHTML($zd_8a72e_1 = true) { if ($zd_8a72e_1) { $zd_5e6c3_0->ContentType = 'text/html'; } else { $zd_5e6c3_0->ContentType = 'text/plain'; } } public function IsSMTP() { $zd_5e6c3_0->Mailer = 'smtp'; } public function IsMail() { $zd_5e6c3_0->Mailer = 'mail'; } public function IsSendmail() { if (!stristr(ini_get('sendmail_path'), 'sendmail')) { $zd_5e6c3_0->Sendmail = '/var/qmail/bin/sendmail'; } $zd_5e6c3_0->Mailer = 'sendmail'; } public function IsQmail() { if (stristr(ini_get('sendmail_path'), 'qmail')) { $zd_5e6c3_0->Sendmail = '/var/qmail/bin/sendmail'; } $zd_5e6c3_0->Mailer = 'sendmail'; } public function AddAddress($zd_72456_11, $zd_b5182_12 = '') { return $zd_5e6c3_0->AddAnAddress('to', $zd_72456_11, $zd_b5182_12); } public function AddCC($zd_72456_11, $zd_b5182_12 = '') { return $zd_5e6c3_0->AddAnAddress('cc', $zd_72456_11, $zd_b5182_12); } public function AddBCC($zd_72456_11, $zd_b5182_12 = '') { return $zd_5e6c3_0->AddAnAddress('bcc', $zd_72456_11, $zd_b5182_12); } public function AddReplyTo($zd_72456_11, $zd_b5182_12 = '') { return $zd_5e6c3_0->AddAnAddress('Reply-To', $zd_72456_11, $zd_b5182_12); } protected function AddAnAddress($zd_c8044_31, $zd_72456_11, $zd_b5182_12 = '') { if (!preg_match('/^(to|cc|bcc|Reply-To)$/', $zd_c8044_31)) { $zd_5e6c3_0->SetError($zd_5e6c3_0->Lang('Invalid recipient array').': '.$zd_c8044_31); if ($zd_5e6c3_0->exceptions) { throw new phpmailerException('Invalid recipient array: ' . $zd_c8044_31); } if ($zd_5e6c3_0->SMTPDebug) { echo $zd_5e6c3_0->Lang('Invalid recipient array').': '.$zd_c8044_31; } return false; } $zd_72456_11 = trim($zd_72456_11); $zd_b5182_12 = trim(preg_replace('/[\r\n]+/', '', $zd_b5182_12)); if (!self::ValidateAddress($zd_72456_11)) { $zd_5e6c3_0->SetError($zd_5e6c3_0->Lang('invalid_address').': '. $zd_72456_11); if ($zd_5e6c3_0->exceptions) { throw new phpmailerException($zd_5e6c3_0->Lang('invalid_address').': '.$zd_72456_11); } if ($zd_5e6c3_0->SMTPDebug) { echo $zd_5e6c3_0->Lang('invalid_address').': '.$zd_72456_11; } return false; } if ($zd_c8044_31 != 'Reply-To') { if (!isset($zd_5e6c3_0->all_recipients[strtolower($zd_72456_11)])) { array_push($zd_5e6c3_0->$zd_c8044_31, array($zd_72456_11, $zd_b5182_12)); $zd_5e6c3_0->all_recipients[strtolower($zd_72456_11)] = true; return true; } } else { if (!array_key_exists(strtolower($zd_72456_11), $zd_5e6c3_0->ReplyTo)) { $zd_5e6c3_0->ReplyTo[strtolower($zd_72456_11)] = array($zd_72456_11, $zd_b5182_12); return true; } } return false; } public function SetFrom($zd_72456_11, $zd_b5182_12 = '', $zd_bb9a9_74 = 1) { $zd_72456_11 = trim($zd_72456_11); $zd_b5182_12 = trim(preg_replace('/[\r\n]+/', '', $zd_b5182_12)); if (!self::ValidateAddress($zd_72456_11)) { $zd_5e6c3_0->SetError($zd_5e6c3_0->Lang('invalid_address').': '. $zd_72456_11); if ($zd_5e6c3_0->exceptions) { throw new phpmailerException($zd_5e6c3_0->Lang('invalid_address').': '.$zd_72456_11); } if ($zd_5e6c3_0->SMTPDebug) { echo $zd_5e6c3_0->Lang('invalid_address').': '.$zd_72456_11; } return false; } $zd_5e6c3_0->From = $zd_72456_11; $zd_5e6c3_0->FromName = $zd_b5182_12; if ($zd_bb9a9_74) { if (empty($zd_5e6c3_0->ReplyTo)) { $zd_5e6c3_0->AddAnAddress('Reply-To', $zd_72456_11, $zd_b5182_12); } if (empty($zd_5e6c3_0->Sender)) { $zd_5e6c3_0->Sender = $zd_72456_11; } } return true; } public static function ValidateAddress($zd_72456_11) { if (function_exists('filter_var')) { if(filter_var($zd_72456_11, FILTER_VALIDATE_EMAIL) === FALSE) { return false; } else { return true; } } else { return preg_match('/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9_\-](?!\.)){0,61}[a-zA-Z0-9_-]?\.)+[a-zA-Z0-9_](?:[a-zA-Z0-9_\-](?!$)){0,61}[a-zA-Z0-9_]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/', $zd_72456_11); } } public function Send() { try { if(!$zd_5e6c3_0->PreSend()) return false; return $zd_5e6c3_0->PostSend(); } catch (phpmailerException $zd_0f8a8_106) { $zd_5e6c3_0->SentMIMEMessage = ''; $zd_5e6c3_0->SetError($zd_0f8a8_106->getMessage()); if ($zd_5e6c3_0->exceptions) { throw $zd_0f8a8_106; } return false; } } protected function PreSend() { try { $zd_0147f_112 = ""; if ((count($zd_5e6c3_0->to) + count($zd_5e6c3_0->cc) + count($zd_5e6c3_0->bcc)) < 1) { throw new phpmailerException($zd_5e6c3_0->Lang('provide_address'), self::STOP_CRITICAL); } if(!empty($zd_5e6c3_0->AltBody)) { $zd_5e6c3_0->ContentType = 'multipart/alternative'; } $zd_5e6c3_0->error_count = 0; $zd_5e6c3_0->SetMessageType(); if (empty($zd_5e6c3_0->Body)) { throw new phpmailerException($zd_5e6c3_0->Lang('empty_message'), self::STOP_CRITICAL); } $zd_5e6c3_0->MIMEHeader = $zd_5e6c3_0->CreateHeader(); $zd_5e6c3_0->MIMEBody = $zd_5e6c3_0->CreateBody(); if ($zd_5e6c3_0->Mailer == 'mail') { if (count($zd_5e6c3_0->to) > 0) { $zd_0147f_112 .= $zd_5e6c3_0->AddrAppend("To", $zd_5e6c3_0->to); } else { $zd_0147f_112 .= $zd_5e6c3_0->HeaderLine("To", "undisclosed-recipients:;"); } $zd_0147f_112 .= $zd_5e6c3_0->HeaderLine('Subject', $zd_5e6c3_0->EncodeHeader($zd_5e6c3_0->SecureHeader(trim($zd_5e6c3_0->Subject)), 'text', 1)); } if ($zd_5e6c3_0->DKIM_domain && $zd_5e6c3_0->DKIM_private) { $zd_7386f_141 = $zd_5e6c3_0->DKIM_Add($zd_5e6c3_0->MIMEHeader, $zd_5e6c3_0->EncodeHeader($zd_5e6c3_0->SecureHeader($zd_5e6c3_0->Subject), 'text', 1), $zd_5e6c3_0->MIMEBody); $zd_5e6c3_0->MIMEHeader = str_replace("\r\n", "\n", $zd_7386f_141) . $zd_5e6c3_0->MIMEHeader; } $zd_5e6c3_0->SentMIMEMessage = sprintf("%s%s\r\n\r\n%s",$zd_5e6c3_0->MIMEHeader,$zd_0147f_112,$zd_5e6c3_0->MIMEBody); return true; } catch (phpmailerException $zd_0f8a8_106) { $zd_5e6c3_0->SetError($zd_0f8a8_106->getMessage()); if ($zd_5e6c3_0->exceptions) { throw $zd_0f8a8_106; } return false; } } protected function PostSend() { try { switch($zd_5e6c3_0->Mailer) { case 'sendmail': return $zd_5e6c3_0->SendmailSend($zd_5e6c3_0->MIMEHeader, $zd_5e6c3_0->MIMEBody); case 'smtp': return $zd_5e6c3_0->SmtpSend($zd_5e6c3_0->MIMEHeader, $zd_5e6c3_0->MIMEBody); case 'mail': return $zd_5e6c3_0->MailSend($zd_5e6c3_0->MIMEHeader, $zd_5e6c3_0->MIMEBody); default: return $zd_5e6c3_0->MailSend($zd_5e6c3_0->MIMEHeader, $zd_5e6c3_0->MIMEBody); } } catch (phpmailerException $zd_0f8a8_106) { $zd_5e6c3_0->SetError($zd_0f8a8_106->getMessage()); if ($zd_5e6c3_0->exceptions) { throw $zd_0f8a8_106; } if ($zd_5e6c3_0->SMTPDebug) { echo $zd_0f8a8_106->getMessage()."\n"; } return false; } } protected function SendmailSend($zd_5a678_180, $zd_8f77c_181) { if ($zd_5e6c3_0->Sender != '') { $zd_26728_183 = sprintf("%s -oi -f %s -t", escapeshellcmd($zd_5e6c3_0->Sendmail), escapeshellarg($zd_5e6c3_0->Sender)); } else { $zd_26728_183 = sprintf("%s -oi -t", escapeshellcmd($zd_5e6c3_0->Sendmail)); } if ($zd_5e6c3_0->SingleTo === true) { foreach ($zd_5e6c3_0->SingleToArray as $zd_12f6e_190 => $zd_47bdb_191) { if(!@$zd_3ebee_192 = popen($zd_26728_183, 'w')) { throw new phpmailerException($zd_5e6c3_0->Lang('execute') . $zd_5e6c3_0->Sendmail, self::STOP_CRITICAL); } fputs($zd_3ebee_192, "To: " . $zd_47bdb_191 . "\n"); fputs($zd_3ebee_192, $zd_5a678_180); fputs($zd_3ebee_192, $zd_8f77c_181); $zd_69dc8_202 = pclose($zd_3ebee_192); $zd_e032e_204 = ($zd_69dc8_202 == 0) ? 1 : 0; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_47bdb_191, $zd_5e6c3_0->cc, $zd_5e6c3_0->bcc, $zd_5e6c3_0->Subject, $zd_8f77c_181); if($zd_69dc8_202 != 0) { throw new phpmailerException($zd_5e6c3_0->Lang('execute') . $zd_5e6c3_0->Sendmail, self::STOP_CRITICAL); } } } else { if(!@$zd_3ebee_192 = popen($zd_26728_183, 'w')) { throw new phpmailerException($zd_5e6c3_0->Lang('execute') . $zd_5e6c3_0->Sendmail, self::STOP_CRITICAL); } fputs($zd_3ebee_192, $zd_5a678_180); fputs($zd_3ebee_192, $zd_8f77c_181); $zd_69dc8_202 = pclose($zd_3ebee_192); $zd_e032e_204 = ($zd_69dc8_202 == 0) ? 1 : 0; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_5e6c3_0->to, $zd_5e6c3_0->cc, $zd_5e6c3_0->bcc, $zd_5e6c3_0->Subject, $zd_8f77c_181); if($zd_69dc8_202 != 0) { throw new phpmailerException($zd_5e6c3_0->Lang('execute') . $zd_5e6c3_0->Sendmail, self::STOP_CRITICAL); } } return true; } protected function MailSend($zd_5a678_180, $zd_8f77c_181) { $zd_3c6cb_240 = array(); foreach($zd_5e6c3_0->to as $zd_89ffb_242) { $zd_3c6cb_240[] = $zd_5e6c3_0->AddrFormat($zd_89ffb_242); } $zd_2c93e_246 = implode(', ', $zd_3c6cb_240); if (empty($zd_5e6c3_0->Sender)) { $zd_5cefd_249 = "-oi "; } else { $zd_5cefd_249 = sprintf("-oi -f %s", $zd_5e6c3_0->Sender); } if ($zd_5e6c3_0->Sender != '' and !ini_get('safe_mode')) { $zd_10a9b_253 = ini_get('sendmail_from'); ini_set('sendmail_from', $zd_5e6c3_0->Sender); if ($zd_5e6c3_0->SingleTo === true && count($zd_3c6cb_240) > 1) { foreach ($zd_3c6cb_240 as $zd_12f6e_190 => $zd_47bdb_191) { $zd_6c8c9_260 = @mail($zd_47bdb_191, $zd_5e6c3_0->EncodeHeader($zd_5e6c3_0->SecureHeader($zd_5e6c3_0->Subject), 'text', 1), $zd_8f77c_181, $zd_5a678_180, $zd_5cefd_249); $zd_e032e_204 = ($zd_6c8c9_260 == 1) ? 1 : 0; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_47bdb_191, $zd_5e6c3_0->cc, $zd_5e6c3_0->bcc, $zd_5e6c3_0->Subject, $zd_8f77c_181); } } else { $zd_6c8c9_260 = @mail($zd_2c93e_246, $zd_5e6c3_0->EncodeHeader($zd_5e6c3_0->SecureHeader($zd_5e6c3_0->Subject), 'text', 1), $zd_8f77c_181, $zd_5a678_180, $zd_5cefd_249); $zd_e032e_204 = ($zd_6c8c9_260 == 1) ? 1 : 0; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_2c93e_246, $zd_5e6c3_0->cc, $zd_5e6c3_0->bcc, $zd_5e6c3_0->Subject, $zd_8f77c_181); } } else { if ($zd_5e6c3_0->SingleTo === true && count($zd_3c6cb_240) > 1) { foreach ($zd_3c6cb_240 as $zd_12f6e_190 => $zd_47bdb_191) { $zd_6c8c9_260 = @mail($zd_47bdb_191, $zd_5e6c3_0->EncodeHeader($zd_5e6c3_0->SecureHeader($zd_5e6c3_0->Subject), 'text', 1), $zd_8f77c_181, $zd_5a678_180, $zd_5cefd_249); $zd_e032e_204 = ($zd_6c8c9_260 == 1) ? 1 : 0; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_47bdb_191, $zd_5e6c3_0->cc, $zd_5e6c3_0->bcc, $zd_5e6c3_0->Subject, $zd_8f77c_181); } } else { $zd_6c8c9_260 = @mail($zd_2c93e_246, $zd_5e6c3_0->EncodeHeader($zd_5e6c3_0->SecureHeader($zd_5e6c3_0->Subject), 'text', 1), $zd_8f77c_181, $zd_5a678_180, $zd_5cefd_249); $zd_e032e_204 = ($zd_6c8c9_260 == 1) ? 1 : 0; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_2c93e_246, $zd_5e6c3_0->cc, $zd_5e6c3_0->bcc, $zd_5e6c3_0->Subject, $zd_8f77c_181); } } if (isset($zd_10a9b_253)) { ini_set('sendmail_from', $zd_10a9b_253); } if(!$zd_6c8c9_260) { throw new phpmailerException($zd_5e6c3_0->Lang('instantiate'), self::STOP_CRITICAL); } return true; } protected function SmtpSend($zd_5a678_180, $zd_8f77c_181) { $zd_96f48_339 = array(); if(!$zd_5e6c3_0->SmtpConnect()) { throw new phpmailerException($zd_5e6c3_0->Lang('smtp_connect_failed'), self::STOP_CRITICAL); } $zd_f4a7e_342 = ($zd_5e6c3_0->Sender == '') ? $zd_5e6c3_0->From : $zd_5e6c3_0->Sender; if(!$zd_5e6c3_0->smtp->Mail($zd_f4a7e_342)) { throw new phpmailerException($zd_5e6c3_0->Lang('from_failed') . $zd_f4a7e_342, self::STOP_CRITICAL); } foreach($zd_5e6c3_0->to as $zd_2c93e_246) { if (!$zd_5e6c3_0->smtp->Recipient($zd_2c93e_246[0])) { $zd_96f48_339[] = $zd_2c93e_246[0]; $zd_e032e_204 = 0; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_2c93e_246[0], '', '', $zd_5e6c3_0->Subject, $zd_8f77c_181); } else { $zd_e032e_204 = 1; $zd_5e6c3_0->doCallback($zd_e032e_204, $zd_2c93e_246[0], '', '', $zd_5e6c3_0->Subject, $zd_8f77c_181); } } foreach($zd_5e6c3_0->cc as $zd_b5658_369) { if (!$zd_5e6c3_0->smtp->Recipient($zd_b5658_369[0])) { $zd_96f48_339[] = $zd_b5658_369[0]; $zd_e032e_204 = 0; $zd_5e6c3_0->doCallback($zd_e032e_204, '', $zd_b5658_369[0], '', $zd_5e6c3_0->Subject, $zd_8f77c_181); } else { $zd_e032e_204 = 1; $zd_5e6c3_0->doCallback($zd_e032e_204, '', $zd_b5658_369[0], '', $zd_5e6c3_0->Subject, $zd_8f77c_181); } } foreach($zd_5e6c3_0->bcc as $zd_580a1_387) { if (!$zd_5e6c3_0->smtp->Recipient($zd_580a1_387[0])) { $zd_96f48_339[] = $zd_580a1_387[0]; $zd_e032e_204 = 0; $zd_5e6c3_0->doCallback($zd_e032e_204, '', '', $zd_580a1_387[0], $zd_5e6c3_0->Subject, $zd_8f77c_181); } else { $zd_e032e_204 = 1; $zd_5e6c3_0->doCallback($zd_e032e_204, '', '', $zd_580a1_387[0], $zd_5e6c3_0->Subject, $zd_8f77c_181); } } if (count($zd_96f48_339) > 0 ) { $zd_b028d_405 = implode(', ', $zd_96f48_339); throw new phpmailerException($zd_5e6c3_0->Lang('recipients_failed') . $zd_b028d_405); } if(!$zd_5e6c3_0->smtp->Data($zd_5a678_180 . $zd_8f77c_181)) { throw new phpmailerException($zd_5e6c3_0->Lang('data_not_accepted'), self::STOP_CRITICAL); } if($zd_5e6c3_0->SMTPKeepAlive == true) { $zd_5e6c3_0->smtp->Reset(); } return true; } public function SmtpConnect() { if(is_null($zd_5e6c3_0->smtp)) { $zd_5e6c3_0->smtp = new SMTP(); } $zd_5e6c3_0->smtp->do_debug = $zd_5e6c3_0->SMTPDebug; $zd_6fd71_419 = explode(';', $zd_5e6c3_0->Host); $zd_95ad1_421 = 0; $zd_a7336_422 = $zd_5e6c3_0->smtp->Connected(); try { while($zd_95ad1_421 < count($zd_6fd71_419) && !$zd_a7336_422) { $zd_9b8ce_427 = array(); if (preg_match('/^(.+):([0-9]+)$/', $zd_6fd71_419[$zd_95ad1_421], $zd_9b8ce_427)) { $zd_eecfd_431 = $zd_9b8ce_427[1]; $zd_1fe09_433 = $zd_9b8ce_427[2]; } else { $zd_eecfd_431 = $zd_6fd71_419[$zd_95ad1_421]; $zd_1fe09_433 = $zd_5e6c3_0->Port; } $zd_bbfca_440 = ($zd_5e6c3_0->SMTPSecure == 'tls'); $zd_769f9_442 = ($zd_5e6c3_0->SMTPSecure == 'ssl'); if ($zd_5e6c3_0->smtp->Connect(($zd_769f9_442 ? 'ssl://':'').$zd_eecfd_431, $zd_1fe09_433, $zd_5e6c3_0->Timeout)) { $zd_05c63_449 = ($zd_5e6c3_0->Helo != '' ? $zd_5e6c3_0->Helo : $zd_5e6c3_0->ServerHostname()); $zd_5e6c3_0->smtp->Hello($zd_05c63_449); if ($zd_bbfca_440) { if (!$zd_5e6c3_0->smtp->StartTLS()) { throw new phpmailerException($zd_5e6c3_0->Lang('tls')); } $zd_5e6c3_0->smtp->Hello($zd_05c63_449); } $zd_a7336_422 = true; if ($zd_5e6c3_0->SMTPAuth) { if (!$zd_5e6c3_0->smtp->Authenticate($zd_5e6c3_0->Username, $zd_5e6c3_0->Password)) { throw new phpmailerException($zd_5e6c3_0->Lang('authenticate')); } } } $zd_95ad1_421++; if (!$zd_a7336_422) { throw new phpmailerException($zd_5e6c3_0->Lang('connect_host')); } } } catch (phpmailerException $zd_0f8a8_106) { $zd_5e6c3_0->smtp->Reset(); if ($zd_5e6c3_0->exceptions) { throw $zd_0f8a8_106; } } return true; } public function SmtpClose() { if(!is_null($zd_5e6c3_0->smtp)) { if($zd_5e6c3_0->smtp->Connected()) { $zd_5e6c3_0->smtp->Quit(); $zd_5e6c3_0->smtp->Close(); } } } function SetLanguage($langcode = 'en', $lang_path = 'language/') { $zd_b834d_0 = array( 'provide_address' => 'You must provide at least one recipient email address.', 'mailer_not_supported' => ' mailer is not supported.', 'execute' => 'Could not execute: ', 'instantiate' => 'Could not instantiate mail function.', 'authenticate' => 'SMTP Error: Could not authenticate.', 'from_failed' => 'The following From address failed: ', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'data_not_accepted' => 'SMTP Error: Data not accepted.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'encoding' => 'Unknown encoding: ', 'signing' => 'Signing Error: ', 'smtp_error' => 'SMTP server error: ', 'empty_message' => 'Message body empty', 'invalid_address' => 'Invalid address', 'variable_set' => 'Cannot set or reset variable: ' ); $zd_071ad_1 = true; if ($langcode != 'en') { $zd_071ad_1 = @include $lang_path.'phpmailer.lang-'.$langcode.'.php'; } $zd_1057b_3->language = $zd_b834d_0; return ($zd_071ad_1 == true); } public function GetTranslations() { return $zd_1057b_3->language; } public function AddrAppend($zd_f5805_7, $zd_665a0_8) { $zd_ea91f_9 = $zd_f5805_7 . ': '; $zd_70a81_11 = array(); foreach ($zd_665a0_8 as $zd_f60d8_13) { $zd_70a81_11[] = $zd_1057b_3->AddrFormat($zd_f60d8_13); } $zd_ea91f_9 .= implode(', ', $zd_70a81_11); $zd_ea91f_9 .= $zd_1057b_3->LE; return $zd_ea91f_9; } public function AddrFormat($zd_665a0_8) { if (empty($zd_665a0_8[1])) { return $zd_1057b_3->SecureHeader($zd_665a0_8[0]); } else { return $zd_1057b_3->EncodeHeader($zd_1057b_3->SecureHeader($zd_665a0_8[1]), 'phrase') . " <" . $zd_1057b_3->SecureHeader($zd_665a0_8[0]) . ">"; } } public function WrapText($zd_9c7bd_31, $zd_4ae7f_32, $zd_6dc5b_33 = false) { $zd_ec1c6_34 = ($zd_6dc5b_33) ? sprintf(" =%s", $zd_1057b_3->LE) : $zd_1057b_3->LE; $zd_b0496_38 = (strtolower($zd_1057b_3->CharSet) == "utf-8"); $zd_9c7bd_31 = $zd_1057b_3->FixEOL($zd_9c7bd_31); if (substr($zd_9c7bd_31, -1) == $zd_1057b_3->LE) { $zd_9c7bd_31 = substr($zd_9c7bd_31, 0, -1); } $zd_34caa_47 = explode($zd_1057b_3->LE, $zd_9c7bd_31); $zd_9c7bd_31 = ''; for ($zd_83694_51 = 0 ;$zd_83694_51 < count($zd_34caa_47); $zd_83694_51++) { $zd_4eff2_55 = explode(' ', $zd_34caa_47[$zd_83694_51]); $zd_3da22_58 = ''; for ($zd_f1868_59 = 0; $zd_f1868_59<count($zd_4eff2_55); $zd_f1868_59++) { $zd_53545_63 = $zd_4eff2_55[$zd_f1868_59]; if ($zd_6dc5b_33 and (strlen($zd_53545_63) > $zd_4ae7f_32)) { $zd_680dc_69 = $zd_4ae7f_32 - strlen($zd_3da22_58) - 1; if ($zd_f1868_59 != 0) { if ($zd_680dc_69 > 20) { $zd_a30ea_74 = $zd_680dc_69; if ($zd_b0496_38) { $zd_a30ea_74 = $zd_1057b_3->UTF8CharBoundary($zd_53545_63, $zd_a30ea_74); } elseif (substr($zd_53545_63, $zd_a30ea_74 - 1, 1) == "=") { $zd_a30ea_74--; } elseif (substr($zd_53545_63, $zd_a30ea_74 - 2, 1) == "=") { $zd_a30ea_74 -= 2; } $zd_30263_87 = substr($zd_53545_63, 0, $zd_a30ea_74); $zd_53545_63 = substr($zd_53545_63, $zd_a30ea_74); $zd_3da22_58 .= ' ' . $zd_30263_87; $zd_9c7bd_31 .= $zd_3da22_58 . sprintf("=%s", $zd_1057b_3->LE); } else { $zd_9c7bd_31 .= $zd_3da22_58 . $zd_ec1c6_34; } $zd_3da22_58 = ''; } while (strlen($zd_53545_63) > 0) { $zd_a30ea_74 = $zd_4ae7f_32; if ($zd_b0496_38) { $zd_a30ea_74 = $zd_1057b_3->UTF8CharBoundary($zd_53545_63, $zd_a30ea_74); } elseif (substr($zd_53545_63, $zd_a30ea_74 - 1, 1) == "=") { $zd_a30ea_74--; } elseif (substr($zd_53545_63, $zd_a30ea_74 - 2, 1) == "=") { $zd_a30ea_74 -= 2; } $zd_30263_87 = substr($zd_53545_63, 0, $zd_a30ea_74); $zd_53545_63 = substr($zd_53545_63, $zd_a30ea_74); if (strlen($zd_53545_63) > 0) { $zd_9c7bd_31 .= $zd_30263_87 . sprintf("=%s", $zd_1057b_3->LE); } else { $zd_3da22_58 = $zd_30263_87; } } } else { $zd_6a7ec_128 = $zd_3da22_58; $zd_3da22_58 .= ($zd_f1868_59 == 0) ? $zd_53545_63 : (' ' . $zd_53545_63); if (strlen($zd_3da22_58) > $zd_4ae7f_32 and $zd_6a7ec_128 != '') { $zd_9c7bd_31 .= $zd_6a7ec_128 . $zd_ec1c6_34; $zd_3da22_58 = $zd_53545_63; } } } $zd_9c7bd_31 .= $zd_3da22_58 . $zd_1057b_3->LE; } return $zd_9c7bd_31; } public function UTF8CharBoundary($zd_5e6a8_146, $zd_f03c5_147) { $zd_2ec2a_148 = false; $zd_e6ec1_149 = 3; while (!$zd_2ec2a_148) { $zd_7391b_151 = substr($zd_5e6a8_146, $zd_f03c5_147 - $zd_e6ec1_149, $zd_e6ec1_149); $zd_bafc2_156 = strpos($zd_7391b_151, "="); if ($zd_bafc2_156 !== false) { $zd_021fb_159 = substr($zd_5e6a8_146, $zd_f03c5_147 - $zd_e6ec1_149 + $zd_bafc2_156 + 1, 2); $zd_f258d_164 = hexdec($zd_021fb_159); if ($zd_f258d_164 < 128) { $zd_f03c5_147 = ($zd_bafc2_156 == 0) ? $zd_f03c5_147 : $zd_f03c5_147 - ($zd_e6ec1_149 - $zd_bafc2_156); $zd_2ec2a_148 = true; } elseif ($zd_f258d_164 >= 192) { $zd_f03c5_147 = $zd_f03c5_147 - ($zd_e6ec1_149 - $zd_bafc2_156); $zd_2ec2a_148 = true; } elseif ($zd_f258d_164 < 192) { $zd_e6ec1_149 += 3; } } else { $zd_2ec2a_148 = true; } } return $zd_f03c5_147; } public function SetWordWrap() { if($zd_1057b_3->WordWrap < 1) { return; } switch($zd_1057b_3->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $zd_1057b_3->AltBody = $zd_1057b_3->WrapText($zd_1057b_3->AltBody, $zd_1057b_3->WordWrap); break; default: $zd_1057b_3->Body = $zd_1057b_3->WrapText($zd_1057b_3->Body, $zd_1057b_3->WordWrap); break; } } public function CreateHeader() { $zd_b1ff5_194 = ''; $zd_0748f_195 = md5(uniqid(time())); $zd_1057b_3->boundary[1] = 'b1_' . $zd_0748f_195; $zd_1057b_3->boundary[2] = 'b2_' . $zd_0748f_195; $zd_1057b_3->boundary[3] = 'b3_' . $zd_0748f_195; $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Date', self::RFCDate()); if($zd_1057b_3->Sender == '') { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Return-Path', trim($zd_1057b_3->From)); } else { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Return-Path', trim($zd_1057b_3->Sender)); } if($zd_1057b_3->Mailer != 'mail') { if ($zd_1057b_3->SingleTo === true) { foreach($zd_1057b_3->to as $zd_b3710_214) { $zd_1057b_3->SingleToArray[] = $zd_1057b_3->AddrFormat($zd_b3710_214); } } else { if(count($zd_1057b_3->to) > 0) { $zd_b1ff5_194 .= $zd_1057b_3->AddrAppend('To', $zd_1057b_3->to); } elseif (count($zd_1057b_3->cc) == 0) { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('To', 'undisclosed-recipients:;'); } } } $zd_4a444_225 = array(); $zd_4a444_225[0][0] = trim($zd_1057b_3->From); $zd_4a444_225[0][1] = $zd_1057b_3->FromName; $zd_b1ff5_194 .= $zd_1057b_3->AddrAppend('From', $zd_4a444_225); if(count($zd_1057b_3->cc) > 0) { $zd_b1ff5_194 .= $zd_1057b_3->AddrAppend('Cc', $zd_1057b_3->cc); } if((($zd_1057b_3->Mailer == 'sendmail') || ($zd_1057b_3->Mailer == 'mail')) && (count($zd_1057b_3->bcc) > 0)) { $zd_b1ff5_194 .= $zd_1057b_3->AddrAppend('Bcc', $zd_1057b_3->bcc); } if(count($zd_1057b_3->ReplyTo) > 0) { $zd_b1ff5_194 .= $zd_1057b_3->AddrAppend('Reply-To', $zd_1057b_3->ReplyTo); } if($zd_1057b_3->Mailer != 'mail') { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Subject', $zd_1057b_3->EncodeHeader($zd_1057b_3->SecureHeader($zd_1057b_3->Subject), 'text', 1)); } if($zd_1057b_3->MessageID != '') { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Message-ID', $zd_1057b_3->MessageID); } else { $zd_b1ff5_194 .= sprintf("Message-ID: <%s@%s>%s", $zd_0748f_195, $zd_1057b_3->ServerHostname(), $zd_1057b_3->LE); } $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('X-Priority', $zd_1057b_3->Priority); if($zd_1057b_3->XMailer) { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('X-Mailer', $zd_1057b_3->XMailer); } else { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('X-Mailer', 'PHPMailer '.$zd_1057b_3->Version.' (http://code.google.com/a/apache-extras.org/p/phpmailer/)'); } if($zd_1057b_3->ConfirmReadingTo != '') { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Disposition-Notification-To', '<' . trim($zd_1057b_3->ConfirmReadingTo) . '>'); } for($zd_1ccf9_275 = 0; $zd_1ccf9_275 < count($zd_1057b_3->CustomHeader); $zd_1ccf9_275++) { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine(trim($zd_1057b_3->CustomHeader[$zd_1ccf9_275][0]), $zd_1057b_3->EncodeHeader(trim($zd_1057b_3->CustomHeader[$zd_1ccf9_275][1]), 'text', 1)); } if (!$zd_1057b_3->sign_key_file) { $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('MIME-Version', '1.0'); $zd_b1ff5_194 .= $zd_1057b_3->GetMailMIME(); } return $zd_b1ff5_194; } public function GetMailMIME() { $zd_b1ff5_194 = ''; switch($zd_1057b_3->message_type) { case 'plain': $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Content-Transfer-Encoding', $zd_1057b_3->Encoding); $zd_b1ff5_194 .= $zd_1057b_3->TextLine('Content-Type: '.$zd_1057b_3->ContentType.'; charset="'.$zd_1057b_3->CharSet.'"'); break; case 'inline': $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_b1ff5_194 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/mixed;'); $zd_b1ff5_194 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_b1ff5_194 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[1] . '"'); break; } if($zd_1057b_3->Mailer != 'mail') { $zd_b1ff5_194 .= $zd_1057b_3->LE.$zd_1057b_3->LE; } return $zd_b1ff5_194; } public function GetSentMIMEMessage() { return $zd_1057b_3->SentMIMEMessage; } public function CreateBody() { $zd_f444e_322 = ''; if ($zd_1057b_3->sign_key_file) { $zd_f444e_322 .= $zd_1057b_3->GetMailMIME(); } $zd_1057b_3->SetWordWrap(); switch($zd_1057b_3->message_type) { case 'plain': $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); break; case 'inline': $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[1], '', '', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("inline", $zd_1057b_3->boundary[1]); break; case 'attach': $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[1], '', '', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("attachment", $zd_1057b_3->boundary[1]); break; case 'inline_attach': $zd_f444e_322 .= $zd_1057b_3->TextLine("--" . $zd_1057b_3->boundary[1]); $zd_f444e_322 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_f444e_322 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[2] . '"'); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[2], '', '', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("inline", $zd_1057b_3->boundary[2]); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("attachment", $zd_1057b_3->boundary[1]); break; case 'alt': $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[1], '', 'text/plain', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->AltBody, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[1], '', 'text/html', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->EndBoundary($zd_1057b_3->boundary[1]); break; case 'alt_inline': $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[1], '', 'text/plain', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->AltBody, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->TextLine("--" . $zd_1057b_3->boundary[1]); $zd_f444e_322 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_f444e_322 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[2] . '"'); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[2], '', 'text/html', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("inline", $zd_1057b_3->boundary[2]); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->EndBoundary($zd_1057b_3->boundary[1]); break; case 'alt_attach': $zd_f444e_322 .= $zd_1057b_3->TextLine("--" . $zd_1057b_3->boundary[1]); $zd_f444e_322 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_f444e_322 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[2] . '"'); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[2], '', 'text/plain', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->AltBody, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[2], '', 'text/html', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->EndBoundary($zd_1057b_3->boundary[2]); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("attachment", $zd_1057b_3->boundary[1]); break; case 'alt_inline_attach': $zd_f444e_322 .= $zd_1057b_3->TextLine("--" . $zd_1057b_3->boundary[1]); $zd_f444e_322 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/alternative;'); $zd_f444e_322 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[2] . '"'); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[2], '', 'text/plain', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->AltBody, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->TextLine("--" . $zd_1057b_3->boundary[2]); $zd_f444e_322 .= $zd_1057b_3->HeaderLine('Content-Type', 'multipart/related;'); $zd_f444e_322 .= $zd_1057b_3->TextLine("\tboundary=\"" . $zd_1057b_3->boundary[3] . '"'); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->GetBoundary($zd_1057b_3->boundary[3], '', 'text/html', ''); $zd_f444e_322 .= $zd_1057b_3->EncodeString($zd_1057b_3->Body, $zd_1057b_3->Encoding); $zd_f444e_322 .= $zd_1057b_3->LE.$zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("inline", $zd_1057b_3->boundary[3]); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->EndBoundary($zd_1057b_3->boundary[2]); $zd_f444e_322 .= $zd_1057b_3->LE; $zd_f444e_322 .= $zd_1057b_3->AttachAll("attachment", $zd_1057b_3->boundary[1]); break; } if ($zd_1057b_3->IsError()) { $zd_f444e_322 = ''; } elseif ($zd_1057b_3->sign_key_file) { try { $zd_687fb_541 = tempnam('', 'mail'); file_put_contents($zd_687fb_541, $zd_f444e_322); $zd_9a0e5_544 = tempnam("", "signed"); if (@openssl_pkcs7_sign($zd_687fb_541, $zd_9a0e5_544, "file://".$zd_1057b_3->sign_cert_file, array("file://".$zd_1057b_3->sign_key_file, $zd_1057b_3->sign_key_pass), NULL)) { @unlink($zd_687fb_541); $zd_f444e_322 = file_get_contents($zd_9a0e5_544); @unlink($zd_9a0e5_544); } else { @unlink($zd_687fb_541); @unlink($zd_9a0e5_544); throw new phpmailerException($zd_1057b_3->Lang("signing").openssl_error_string()); } } catch (phpmailerException $zd_f1868_59) { $zd_f444e_322 = ''; if ($zd_1057b_3->exceptions) { throw $zd_f1868_59; } } } return $zd_f444e_322; } protected function GetBoundary($zd_5a75c_562, $zd_8a89d_563, $zd_1b652_564, $zd_266a6_565) { $zd_b1ff5_194 = ''; if($zd_8a89d_563 == '') { $zd_8a89d_563 = $zd_1057b_3->CharSet; } if($zd_1b652_564 == '') { $zd_1b652_564 = $zd_1057b_3->ContentType; } if($zd_266a6_565 == '') { $zd_266a6_565 = $zd_1057b_3->Encoding; } $zd_b1ff5_194 .= $zd_1057b_3->TextLine('--' . $zd_5a75c_562); $zd_b1ff5_194 .= sprintf("Content-Type: %s; charset=\"%s\"", $zd_1b652_564, $zd_8a89d_563); $zd_b1ff5_194 .= $zd_1057b_3->LE; $zd_b1ff5_194 .= $zd_1057b_3->HeaderLine('Content-Transfer-Encoding', $zd_266a6_565); $zd_b1ff5_194 .= $zd_1057b_3->LE; return $zd_b1ff5_194; } protected function EndBoundary($zd_5a75c_562) { return $zd_1057b_3->LE . '--' . $zd_5a75c_562 . '--' . $zd_1057b_3->LE; } protected function SetMessageType() { $zd_1057b_3->message_type = array(); if($zd_1057b_3->AlternativeExists()) $zd_1057b_3->message_type[] = "alt"; if($zd_1057b_3->InlineImageExists()) $zd_1057b_3->message_type[] = "inline"; if($zd_1057b_3->AttachmentExists()) $zd_1057b_3->message_type[] = "attach"; $zd_1057b_3->message_type = implode("_", $zd_1057b_3->message_type); if($zd_1057b_3->message_type == "") $zd_1057b_3->message_type = "plain"; } public function HeaderLine($zd_ca43a_605, $zd_8e1c1_606) { return $zd_ca43a_605 . ': ' . $zd_8e1c1_606 . $zd_1057b_3->LE; } public function TextLine($zd_8e1c1_606) { return $zd_8e1c1_606 . $zd_1057b_3->LE; } public function AddAttachment($zd_22b58_613, $zd_ca43a_605 = '', $zd_266a6_565 = 'base64', $zd_f5805_7 = 'application/octet-stream') { try { if ( !@is_file($zd_22b58_613) ) { throw new phpmailerException($zd_1057b_3->Lang('file_access') . $zd_22b58_613, self::STOP_CONTINUE); } $zd_976a8_620 = basename($zd_22b58_613); if ( $zd_ca43a_605 == '' ) { $zd_ca43a_605 = $zd_976a8_620; } $zd_1057b_3->attachment[] = array( 0 => $zd_22b58_613, 1 => $zd_976a8_620, 2 => $zd_ca43a_605, 3 => $zd_266a6_565, 4 => $zd_f5805_7, 5 => false, 6 => 'attachment', 7 => 0 ); } catch (phpmailerException $zd_f1868_59) { $zd_1057b_3->SetError($zd_f1868_59->getMessage()); if ($zd_1057b_3->exceptions) { throw $zd_f1868_59; } if ($zd_1057b_3->SMTPDebug) { echo $zd_f1868_59->getMessage()."\n"; } if ( $zd_f1868_59->getCode() == self::STOP_CRITICAL ) { return false; } } return true; } public function GetAttachments() { return $zd_1057b_3->attachment; } protected function AttachAll($zd_a52a8_640, $zd_5a75c_562) { $zd_47bcd_642 = array(); $zd_9849c_643 = array(); $zd_6174e_644 = array(); foreach ($zd_1057b_3->attachment as $zd_7146a_646) { if($zd_7146a_646[6] == $zd_a52a8_640) { $zd_1dddb_649 = $zd_7146a_646[5]; if ($zd_1dddb_649) { $zd_b0a25_652 = $zd_7146a_646[0]; } else { $zd_22b58_613 = $zd_7146a_646[0]; } $zd_f1d33_656 = md5(serialize($zd_7146a_646)); if (in_array($zd_f1d33_656, $zd_6174e_644)) { continue; } $zd_6174e_644[] = $zd_f1d33_656; $zd_976a8_620 = $zd_7146a_646[1]; $zd_ca43a_605 = $zd_7146a_646[2]; $zd_266a6_565 = $zd_7146a_646[3]; $zd_f5805_7 = $zd_7146a_646[4]; $zd_59197_670 = $zd_7146a_646[6]; $zd_05366_672 = $zd_7146a_646[7]; if ( $zd_59197_670 == 'inline' && isset($zd_9849c_643[$zd_05366_672]) ) { continue; } $zd_9849c_643[$zd_05366_672] = true; $zd_47bcd_642[] = sprintf("--%s%s", $zd_5a75c_562, $zd_1057b_3->LE); $zd_47bcd_642[] = sprintf("Content-Type: %s; name=\"%s\"%s", $zd_f5805_7, $zd_1057b_3->EncodeHeader($zd_1057b_3->SecureHeader($zd_ca43a_605)), $zd_1057b_3->LE); $zd_47bcd_642[] = sprintf("Content-Transfer-Encoding: %s%s", $zd_266a6_565, $zd_1057b_3->LE); if($zd_59197_670 == 'inline') { $zd_47bcd_642[] = sprintf("Content-ID: <%s>%s", $zd_05366_672, $zd_1057b_3->LE); } $zd_47bcd_642[] = sprintf("Content-Disposition: %s; filename=\"%s\"%s", $zd_59197_670, $zd_1057b_3->EncodeHeader($zd_1057b_3->SecureHeader($zd_ca43a_605)), $zd_1057b_3->LE.$zd_1057b_3->LE); if($zd_1dddb_649) { $zd_47bcd_642[] = $zd_1057b_3->EncodeString($zd_b0a25_652, $zd_266a6_565); if($zd_1057b_3->IsError()) { return ''; } $zd_47bcd_642[] = $zd_1057b_3->LE.$zd_1057b_3->LE; } else { $zd_47bcd_642[] = $zd_1057b_3->EncodeFile($zd_22b58_613, $zd_266a6_565); if($zd_1057b_3->IsError()) { return ''; } $zd_47bcd_642[] = $zd_1057b_3->LE.$zd_1057b_3->LE; } } } $zd_47bcd_642[] = sprintf("--%s--%s", $zd_5a75c_562, $zd_1057b_3->LE); return implode("", $zd_47bcd_642); } protected function EncodeFile($zd_22b58_613, $zd_266a6_565 = 'base64') { try { if (!is_readable($zd_22b58_613)) { throw new phpmailerException($zd_1057b_3->Lang('file_open') . $zd_22b58_613, self::STOP_CONTINUE); } if (function_exists('get_magic_quotes')) { function get_magic_quotes() { return false; } } $zd_1064f_728 = get_magic_quotes_runtime(); if ($zd_1064f_728) { if (version_compare(PHP_VERSION, '5.3.0', '<')) { set_magic_quotes_runtime(0); } else { ini_set('magic_quotes_runtime', 0); } } $zd_cc91b_730 = file_get_contents($zd_22b58_613); $zd_cc91b_730 = $zd_1057b_3->EncodeString($zd_cc91b_730, $zd_266a6_565); if ($zd_1064f_728) { if (version_compare(PHP_VERSION, '5.3.0', '<')) { set_magic_quotes_runtime($zd_1064f_728); } else { ini_set('magic_quotes_runtime', $zd_1064f_728); } } return $zd_cc91b_730; } catch (Exception $zd_f1868_59) { $zd_1057b_3->SetError($zd_f1868_59->getMessage()); return ''; } } public function EncodeString($zd_65b67_743, $zd_266a6_565 = 'base64') { $zd_83306_745 = ''; switch(strtolower($zd_266a6_565)) { case 'base64': $zd_83306_745 = chunk_split(base64_encode($zd_65b67_743), 76, $zd_1057b_3->LE); break; case '7bit': case '8bit': $zd_83306_745 = $zd_1057b_3->FixEOL($zd_65b67_743); if (substr($zd_83306_745, -(strlen($zd_1057b_3->LE))) != $zd_1057b_3->LE) $zd_83306_745 .= $zd_1057b_3->LE; break; case 'binary': $zd_83306_745 = $zd_65b67_743; break; case 'quoted-printable': $zd_83306_745 = $zd_1057b_3->EncodeQP($zd_65b67_743); break; default: $zd_1057b_3->SetError($zd_1057b_3->Lang('encoding') . $zd_266a6_565); break; } return $zd_83306_745; } public function EncodeHeader($zd_65b67_743, $zd_34cfc_768 = 'text', $zd_1fe30_769 = 0) { $zd_84b00_770 = 0; switch (strtolower($zd_34cfc_768)) { case 'phrase': if (!preg_match('/[\200-\377]/', $zd_65b67_743)) { $zd_83306_745 = addcslashes($zd_65b67_743, "\0..\37\177\\\""); if (($zd_65b67_743 == $zd_83306_745) && !preg_match('/[^A-Za-z0-9!#$%&\'*+\/=?^_`{|}~ -]/', $zd_65b67_743)) { return ($zd_83306_745); } else { return ("\"$zd_83306_745\""); } } $zd_84b00_770 = preg_match_all('/[^\040\041\043-\133\135-\176]/', $zd_65b67_743, $zd_d2128_782); break; case 'comment': $zd_84b00_770 = preg_match_all('/[()"]/', $zd_65b67_743, $zd_d2128_782); case 'text': default: $zd_84b00_770 += preg_match_all('/[\000-\010\013\014\016-\037\177-\377]/', $zd_65b67_743, $zd_d2128_782); break; } if ($zd_84b00_770 == 0) { return ($zd_65b67_743); } $zd_8a210_791 = 75 - 7 - strlen($zd_1057b_3->CharSet); if (strlen($zd_65b67_743)/3 < $zd_84b00_770) { $zd_266a6_565 = 'B'; if (function_exists('mb_strlen') && $zd_1057b_3->HasMultiBytes($zd_65b67_743)) { $zd_83306_745 = $zd_1057b_3->Base64EncodeWrapMB($zd_65b67_743); } else { $zd_83306_745 = base64_encode($zd_65b67_743); $zd_8a210_791 -= $zd_8a210_791 % 4; $zd_83306_745 = trim(chunk_split($zd_83306_745, $zd_8a210_791, "\n")); } } else { $zd_266a6_565 = 'Q'; $zd_83306_745 = $zd_1057b_3->EncodeQ($zd_65b67_743, $zd_34cfc_768); $zd_83306_745 = $zd_1057b_3->WrapText($zd_83306_745, $zd_8a210_791, true); $zd_83306_745 = str_replace('='.$zd_1057b_3->LE, "\n", trim($zd_83306_745)); } $zd_83306_745 = preg_replace('/^(.*)$/m', " =?".$zd_1057b_3->CharSet."?$zd_266a6_565?\\1?=", $zd_83306_745); $zd_83306_745 = trim(str_replace("\n", $zd_1057b_3->LE, $zd_83306_745)); return $zd_83306_745; } public function HasMultiBytes($zd_65b67_743) { if (function_exists('mb_strlen')) { return (strlen($zd_65b67_743) > mb_strlen($zd_65b67_743, $zd_1057b_3->CharSet)); } else { return false; } } public function Base64EncodeWrapMB($zd_65b67_743) { $zd_f781c_833 = "=?".$zd_1057b_3->CharSet."?B?"; $zd_8a86f_835 = "?="; $zd_83306_745 = ""; $zd_069ae_837 = mb_strlen($zd_65b67_743, $zd_1057b_3->CharSet); $zd_4ae7f_32 = 75 - strlen($zd_f781c_833) - strlen($zd_8a86f_835); $zd_1113d_843 = $zd_069ae_837 / strlen($zd_65b67_743); $zd_2ced0_846 = $zd_b4c48_847 = floor($zd_4ae7f_32 * $zd_1113d_843 * .75); for ($zd_83694_51 = 0; $zd_83694_51 < $zd_069ae_837; $zd_83694_51 += $zd_2ced0_846) { $zd_e6ec1_149 = 0; do { $zd_2ced0_846 = $zd_b4c48_847 - $zd_e6ec1_149; $zd_46dd1_859 = mb_substr($zd_65b67_743, $zd_83694_51, $zd_2ced0_846, $zd_1057b_3->CharSet); $zd_46dd1_859 = base64_encode($zd_46dd1_859); $zd_e6ec1_149++; } while (strlen($zd_46dd1_859) > $zd_4ae7f_32); $zd_83306_745 .= $zd_46dd1_859 . $zd_1057b_3->LE; } $zd_83306_745 = substr($zd_83306_745, 0, -strlen($zd_1057b_3->LE)); return $zd_83306_745; } public function EncodeQPphp( $zd_a39af_876 = '', $zd_6f5b3_877 = 76, $zd_2a451_878 = false) { $zd_021fb_159 = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'); $zd_c66ac_880 = preg_split('/(?:\r\n|\r|\n)/', $zd_a39af_876); $zd_40b15_882 = "\r\n"; $zd_73f26_883 = '='; $zd_803b4_884 = ''; foreach ($zd_c66ac_880 as $zd_34caa_47) { $zd_23333_887 = strlen($zd_34caa_47); $zd_91543_889 = ''; for($zd_83694_51 = 0; $zd_83694_51 < $zd_23333_887; $zd_83694_51++) { $zd_7d394_894 = substr( $zd_34caa_47, $zd_83694_51, 1 ); $zd_f258d_164 = ord( $zd_7d394_894 ); if ( ( $zd_83694_51 == 0 ) && ( $zd_f258d_164 == 46 ) ) { $zd_7d394_894 = '=2E'; } if ( $zd_f258d_164 == 32 ) { if ( $zd_83694_51 == ( $zd_23333_887 - 1 ) ) { $zd_7d394_894 = '=20'; } else if ( $zd_2a451_878 ) { $zd_7d394_894 = '=20'; } } elseif ( ($zd_f258d_164 == 61) || ($zd_f258d_164 < 32 ) || ($zd_f258d_164 > 126) ) { $zd_f10c3_911 = floor($zd_f258d_164/16); $zd_ea309_913 = floor($zd_f258d_164%16); $zd_7d394_894 = $zd_73f26_883.$zd_021fb_159[$zd_f10c3_911].$zd_021fb_159[$zd_ea309_913]; } if ( (strlen($zd_91543_889) + strlen($zd_7d394_894)) >= $zd_6f5b3_877 ) { $zd_803b4_884 .= $zd_91543_889.$zd_73f26_883.$zd_40b15_882; $zd_91543_889 = ''; if ( $zd_f258d_164 == 46 ) { $zd_7d394_894 = '=2E'; } } $zd_91543_889 .= $zd_7d394_894; } $zd_803b4_884 .= $zd_91543_889.$zd_40b15_882; } return $zd_803b4_884; } public function EncodeQP($zd_b0a25_652, $zd_6f5b3_877 = 76, $zd_2a451_878 = false) { if (function_exists('quoted_printable_encode')) { return quoted_printable_encode($zd_b0a25_652); } $zd_4a58e_941 = stream_get_filters(); if (!in_array('convert.*', $zd_4a58e_941)) { return $zd_1057b_3->EncodeQPphp($zd_b0a25_652, $zd_6f5b3_877, $zd_2a451_878); } $zd_2f13f_947 = fopen('php://temp/', 'r+'); $zd_b0a25_652 = preg_replace('/\r\n?/', $zd_1057b_3->LE, $zd_b0a25_652); $zd_30010_951 = array('line-length' => $zd_6f5b3_877, 'line-break-chars' => $zd_1057b_3->LE); $zd_df541_954 = stream_filter_append($zd_2f13f_947, 'convert.quoted-printable-encode', STREAM_FILTER_READ, $zd_30010_951); fputs($zd_2f13f_947, $zd_b0a25_652); rewind($zd_2f13f_947); $zd_2fc43_960 = stream_get_contents($zd_2f13f_947); stream_filter_remove($zd_df541_954); $zd_2fc43_960 = preg_replace('/^\./m', '=2E', $zd_2fc43_960); fclose($zd_2f13f_947); return $zd_2fc43_960; } public function EncodeQ($zd_65b67_743, $zd_34cfc_768 = 'text') { $zd_83306_745 = preg_replace('/[\r\n]*/', '', $zd_65b67_743); switch (strtolower($zd_34cfc_768)) { case 'phrase': $zd_83306_745 = preg_replace_callback("/([^A-Za-z0-9!*+\/ -])/", array($zd_1057b_3, 'sprintf_1_callback'), $zd_83306_745); break; case 'comment': $zd_83306_745 = preg_replace_callback("/([\(\)\"])/", array($zd_1057b_3, 'sprintf_1_callback'), $zd_83306_745); case 'text': default: $zd_83306_745 = preg_replace_callback('/([\000-\011\013\014\016-\037\075\077\137\177-\377])/', array($zd_1057b_3, 'sprintf_2_callback'), $zd_83306_745); break; } $zd_83306_745 = str_replace(' ', '_', $zd_83306_745); return $zd_83306_745; } private function sprintf_1_callback($zd_1f78b_984) { return '='.sprintf('%02X', ord($zd_1f78b_984[1])); } private function sprintf_2_callback($zd_1f78b_984) { return '='.sprintf('%02X', ord(stripslashes($zd_1f78b_984[1]))); } public function AddStringAttachment($zd_b0a25_652, $zd_976a8_620, $zd_266a6_565 = 'base64', $zd_f5805_7 = 'application/octet-stream') { $zd_1057b_3->attachment[] = array( 0 => $zd_b0a25_652, 1 => $zd_976a8_620, 2 => basename($zd_976a8_620), 3 => $zd_266a6_565, 4 => $zd_f5805_7, 5 => true, 6 => 'attachment', 7 => 0 ); } public function AddEmbeddedImage($zd_22b58_613, $zd_05366_672, $zd_ca43a_605 = '', $zd_266a6_565 = 'base64', $zd_f5805_7 = 'application/octet-stream') { if ( !@is_file($zd_22b58_613) ) { $zd_1057b_3->SetError($zd_1057b_3->Lang('file_access') . $zd_22b58_613); return false; } $zd_976a8_620 = basename($zd_22b58_613); if ( $zd_ca43a_605 == '' ) { $zd_ca43a_605 = $zd_976a8_620; } $zd_1057b_3->attachment[] = array( 0 => $zd_22b58_613, 1 => $zd_976a8_620, 2 => $zd_ca43a_605, 3 => $zd_266a6_565, 4 => $zd_f5805_7, 5 => false, 6 => 'inline', 7 => $zd_05366_672 ); return true; } public function AddStringEmbeddedImage($zd_b0a25_652, $zd_05366_672, $zd_976a8_620 = '', $zd_266a6_565 = 'base64', $zd_f5805_7 = 'application/octet-stream') { $zd_1057b_3->attachment[] = array( 0 => $zd_b0a25_652, 1 => $zd_976a8_620, 2 => basename($zd_976a8_620), 3 => $zd_266a6_565, 4 => $zd_f5805_7, 5 => true, 6 => 'inline', 7 => $zd_05366_672 ); } public function InlineImageExists() { foreach($zd_1057b_3->attachment as $zd_7146a_646) { if ($zd_7146a_646[6] == 'inline') { return true; } } return false; } public function AttachmentExists() { foreach($zd_1057b_3->attachment as $zd_7146a_646) { if ($zd_7146a_646[6] == 'attachment') { return true; } } return false; } public function AlternativeExists() { return strlen($zd_1057b_3->AltBody)>0; } public function ClearAddresses() { foreach($zd_1057b_3->to as $zd_138fd_1039) { unset($zd_1057b_3->all_recipients[strtolower($zd_138fd_1039[0])]); } $zd_1057b_3->to = array(); } public function ClearCCs() { foreach($zd_1057b_3->cc as $zd_33a87_1044) { unset($zd_1057b_3->all_recipients[strtolower($zd_33a87_1044[0])]); } $zd_1057b_3->cc = array(); } public function ClearBCCs() { foreach($zd_1057b_3->bcc as $zd_64c41_1049) { unset($zd_1057b_3->all_recipients[strtolower($zd_64c41_1049[0])]); } $zd_1057b_3->bcc = array(); } public function ClearReplyTos() { $zd_1057b_3->ReplyTo = array(); } public function ClearAllRecipients() { $zd_1057b_3->to = array(); $zd_1057b_3->cc = array(); $zd_1057b_3->bcc = array(); $zd_1057b_3->all_recipients = array(); } public function ClearAttachments() { $zd_1057b_3->attachment = array(); } public function ClearCustomHeaders() { $zd_1057b_3->CustomHeader = array(); } protected function SetError($zd_bf752_1060) { $zd_1057b_3->error_count++; if ($zd_1057b_3->Mailer == 'smtp' and !is_null($zd_1057b_3->smtp)) { $zd_9585e_1064 = $zd_1057b_3->smtp->getError(); if (!empty($zd_9585e_1064) and array_key_exists('smtp_msg', $zd_9585e_1064)) { $zd_bf752_1060 .= '<p>' . $zd_1057b_3->Lang('smtp_error') . $zd_9585e_1064['smtp_msg'] . "</p>\n"; } } $zd_1057b_3->ErrorInfo = $zd_bf752_1060; } public static function RFCDate() { $zd_21edb_1073 = date('Z'); $zd_323ad_1074 = ($zd_21edb_1073 < 0) ? '-' : '+'; $zd_21edb_1073 = abs($zd_21edb_1073); $zd_21edb_1073 = (int)($zd_21edb_1073/3600)*100 + ($zd_21edb_1073%3600)/60; $zd_b1ff5_194 = sprintf("%s %s%04d", date('D, j M Y H:i:s'), $zd_323ad_1074, $zd_21edb_1073); return $zd_b1ff5_194; } protected function ServerHostname() { if (!empty($zd_1057b_3->Hostname)) { $zd_b1ff5_194 = $zd_1057b_3->Hostname; } elseif (isset($_SERVER['SERVER_NAME'])) { $zd_b1ff5_194 = $_SERVER['SERVER_NAME']; } else { $zd_b1ff5_194 = 'localhost.localdomain'; } return $zd_b1ff5_194; } protected function Lang($zd_69d47_1091) { if(count($zd_1057b_3->language) < 1) { $zd_1057b_3->SetLanguage('en'); } if(isset($zd_1057b_3->language[$zd_69d47_1091])) { return $zd_1057b_3->language[$zd_69d47_1091]; } else { return 'Language string failed to load: ' . $zd_69d47_1091; } } public function IsError() { return ($zd_1057b_3->error_count > 0); } public function FixEOL($zd_65b67_743) { $zd_65b67_743 = str_replace("\r\n", "\n", $zd_65b67_743); $zd_65b67_743 = str_replace("\r", "\n", $zd_65b67_743); $zd_65b67_743 = str_replace("\n", $zd_1057b_3->LE, $zd_65b67_743); return $zd_65b67_743; } public function AddCustomHeader($zd_f7af7_1109) { $zd_1057b_3->CustomHeader[] = explode(':', $zd_f7af7_1109, 2); } public function MsgHTML($zd_9c7bd_31, $zd_b9e1e_1113 = '') { preg_match_all("/(src|background)=[\"'](.*)[\"']/Ui", $zd_9c7bd_31, $zd_b6658_1115); if(isset($zd_b6658_1115[2])) { foreach($zd_b6658_1115[2] as $zd_83694_51 => $zd_cac01_1119) { if (!preg_match('#^[A-z]+://#', $zd_cac01_1119)) { $zd_976a8_620 = basename($zd_cac01_1119); $zd_7d83f_1123 = dirname($zd_cac01_1119); ($zd_7d83f_1123 == '.') ? $zd_7d83f_1123='': ''; $zd_05366_672 = 'cid:' . md5($zd_976a8_620); $zd_2a453_1129 = pathinfo($zd_976a8_620, PATHINFO_EXTENSION); $zd_75268_1131 = self::_mime_types($zd_2a453_1129); if ( strlen($zd_b9e1e_1113) > 1 && substr($zd_b9e1e_1113, -1) != '/') { $zd_b9e1e_1113 .= '/'; } if ( strlen($zd_7d83f_1123) > 1 && substr($zd_7d83f_1123, -1) != '/') { $zd_7d83f_1123 .= '/'; } if ( $zd_1057b_3->AddEmbeddedImage($zd_b9e1e_1113.$zd_7d83f_1123.$zd_976a8_620, md5($zd_976a8_620), $zd_976a8_620, 'base64', $zd_75268_1131) ) { $zd_9c7bd_31 = preg_replace("/".$zd_b6658_1115[1][$zd_83694_51]."=[\"']".preg_quote($zd_cac01_1119, '/')."[\"']/Ui", $zd_b6658_1115[1][$zd_83694_51]."=\"".$zd_05366_672."\"", $zd_9c7bd_31); } } } } $zd_1057b_3->IsHTML(true); $zd_1057b_3->Body = $zd_9c7bd_31; if (empty($zd_1057b_3->AltBody)) { $zd_340c5_1158 = trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\/\\1>/s', '', $zd_9c7bd_31))); if (!empty($zd_340c5_1158)) { $zd_1057b_3->AltBody = html_entity_decode($zd_340c5_1158, ENT_QUOTES, $zd_1057b_3->CharSet); } } if (empty($zd_1057b_3->AltBody)) { $zd_1057b_3->AltBody = 'To view this email message, open it in a program that understands HTML!' . "\n\n"; } return $zd_9c7bd_31; } public static function _mime_types($zd_2a453_1129 = '') { $zd_4557b_1168 = array( 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'doc' => 'application/msword', 'bin' => 'application/macbinary', 'dms' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'class' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'so' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php3' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'js' => 'application/x-javascript', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xhtml' => 'application/xhtml+xml', 'xht' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mpga' => 'audio/mpeg', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'rv' => 'video/vnd.rn-realvideo', 'wav' => 'audio/x-wav', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'txt' => 'text/plain', 'text' => 'text/plain', 'log' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'mpeg' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'qt' => 'video/quicktime', 'mov' => 'video/quicktime', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'doc' => 'application/msword', 'word' => 'application/msword', 'xl' => 'application/excel', 'eml' => 'message/rfc822' ); return (!isset($zd_4557b_1168[strtolower($zd_2a453_1129)])) ? 'application/octet-stream' : $zd_4557b_1168[strtolower($zd_2a453_1129)]; } public function set($zd_ca43a_605, $zd_8e1c1_606 = '') { try { if (isset($zd_1057b_3->$zd_ca43a_605) ) { $zd_1057b_3->$zd_ca43a_605 = $zd_8e1c1_606; } else { throw new phpmailerException($zd_1057b_3->Lang('variable_set') . $zd_ca43a_605, self::STOP_CRITICAL); } } catch (Exception $zd_f1868_59) { $zd_1057b_3->SetError($zd_f1868_59->getMessage()); if ($zd_f1868_59->getCode() == self::STOP_CRITICAL) { return false; } } return true; } public function SecureHeader($zd_65b67_743) { $zd_65b67_743 = str_replace("\r", '', $zd_65b67_743); $zd_65b67_743 = str_replace("\n", '', $zd_65b67_743); return trim($zd_65b67_743); } public function Sign($zd_ac8c4_1192, $zd_14d7f_1193, $zd_ad737_1194) { $zd_1057b_3->sign_cert_file = $zd_ac8c4_1192; $zd_1057b_3->sign_key_file = $zd_14d7f_1193; $zd_1057b_3->sign_key_pass = $zd_ad737_1194; } public function DKIM_QP($zd_8eeed_1201) { $zd_cf2d4_1202 = ''; $zd_34caa_47 = ''; for ($zd_83694_51 = 0; $zd_83694_51 < strlen($zd_8eeed_1201); $zd_83694_51++) { $zd_833d0_1208 = ord($zd_8eeed_1201[$zd_83694_51]); if ( ((0x21 <= $zd_833d0_1208) && ($zd_833d0_1208 <= 0x3A)) || $zd_833d0_1208 == 0x3C || ((0x3E <= $zd_833d0_1208) && ($zd_833d0_1208 <= 0x7E)) ) { $zd_34caa_47 .= $zd_8eeed_1201[$zd_83694_51]; } else { $zd_34caa_47 .= "=".sprintf("%02X", $zd_833d0_1208); } } return $zd_34caa_47; } public function DKIM_Sign($zd_df541_954) { $zd_8096f_1223 = file_get_contents($zd_1057b_3->DKIM_private); if ($zd_1057b_3->DKIM_passphrase != '') { $zd_0ee9f_1226 = openssl_pkey_get_private($zd_8096f_1223, $zd_1057b_3->DKIM_passphrase); } else { $zd_0ee9f_1226 = $zd_8096f_1223; } if (openssl_sign($zd_df541_954, $zd_0d9f5_1232, $zd_0ee9f_1226)) { return base64_encode($zd_0d9f5_1232); } } public function DKIM_HeaderC($zd_df541_954) { $zd_df541_954 = preg_replace("/\r\n\s+/", " ", $zd_df541_954); $zd_c66ac_880 = explode("\r\n", $zd_df541_954); foreach ($zd_c66ac_880 as $zd_69d47_1091 => $zd_34caa_47) { list($zd_b2c21_1243, $zd_8e1c1_606) = explode(":", $zd_34caa_47, 2); $zd_b2c21_1243 = strtolower($zd_b2c21_1243); $zd_8e1c1_606 = preg_replace("/\s+/", " ", $zd_8e1c1_606) ; $zd_c66ac_880[$zd_69d47_1091] = $zd_b2c21_1243.":".trim($zd_8e1c1_606) ; } $zd_df541_954 = implode("\r\n", $zd_c66ac_880); return $zd_df541_954; } public function DKIM_BodyC($zd_f444e_322) { if ($zd_f444e_322 == '') return "\r\n"; $zd_f444e_322 = str_replace("\r\n", "\n", $zd_f444e_322); $zd_f444e_322 = str_replace("\n", "\r\n", $zd_f444e_322); while (substr($zd_f444e_322, strlen($zd_f444e_322) - 4, 4) == "\r\n\r\n") { $zd_f444e_322 = substr($zd_f444e_322, 0, strlen($zd_f444e_322) - 2); } return $zd_f444e_322; } public function DKIM_Add($zd_d8f94_1269, $zd_880a5_1270, $zd_f444e_322) { $zd_8f687_1272 = 'rsa-sha1'; $zd_6ba4c_1273 = 'relaxed/simple'; $zd_e5a22_1274 = 'dns/txt'; $zd_1e8e9_1275 = time() ; $zd_1e306_1276 = "Subject: $zd_880a5_1270"; $zd_7a0b3_1278 = explode($zd_1057b_3->LE, $zd_d8f94_1269); foreach($zd_7a0b3_1278 as $zd_58848_1282) { if (strpos($zd_58848_1282, 'From:') === 0) { $zd_c76f4_1284 = $zd_58848_1282; } elseif (strpos($zd_58848_1282, 'To:') === 0) { $zd_6638c_1287 = $zd_58848_1282; } } $zd_4a444_225 = str_replace('|', '=7C', $zd_1057b_3->DKIM_QP($zd_c76f4_1284)); $zd_138fd_1039 = str_replace('|', '=7C', $zd_1057b_3->DKIM_QP($zd_6638c_1287)); $zd_880a5_1270 = str_replace('|', '=7C', $zd_1057b_3->DKIM_QP($zd_1e306_1276)) ; $zd_f444e_322 = $zd_1057b_3->DKIM_BodyC($zd_f444e_322); $zd_0b8e0_1301 = strlen($zd_f444e_322) ; $zd_c3243_1303 = base64_encode(pack("H*", sha1($zd_f444e_322))) ; $zd_db9b7_1305 = ($zd_1057b_3->DKIM_identity == '')? '' : " i=" . $zd_1057b_3->DKIM_identity . ";"; $zd_65f62_1308 = "DKIM-Signature: v=1; a=" . $zd_8f687_1272 . "; q=" . $zd_e5a22_1274 . "; l=" . $zd_0b8e0_1301 . "; s=" . $zd_1057b_3->DKIM_selector . ";\r\n". "\tt=" . $zd_1e8e9_1275 . "; c=" . $zd_6ba4c_1273 . ";\r\n". "\th=From:To:Subject;\r\n". "\td=" . $zd_1057b_3->DKIM_domain . ";" . $zd_db9b7_1305 . "\r\n". "\tz=$zd_4a444_225\r\n". "\t|$zd_138fd_1039\r\n". "\t|$zd_880a5_1270;\r\n". "\tbh=" . $zd_c3243_1303 . ";\r\n". "\tb="; $zd_470af_1321 = $zd_1057b_3->DKIM_HeaderC($zd_c76f4_1284 . "\r\n" . $zd_6638c_1287 . "\r\n" . $zd_1e306_1276 . "\r\n" . $zd_65f62_1308); $zd_9a0e5_544 = $zd_1057b_3->DKIM_Sign($zd_470af_1321); return "X-PHPMAILER-DKIM: phpmailer.worxware.com\r\n".$zd_65f62_1308.$zd_9a0e5_544."\r\n"; } protected function doCallback($zd_70f33_1332, $zd_138fd_1039, $zd_33a87_1044, $zd_64c41_1049, $zd_880a5_1270, $zd_f444e_322) { if (!empty($zd_1057b_3->action_function) && function_exists($zd_1057b_3->action_function)) { $zd_30010_951 = array($zd_70f33_1332, $zd_138fd_1039, $zd_33a87_1044, $zd_64c41_1049, $zd_880a5_1270, $zd_f444e_322); call_user_func_array($zd_1057b_3->action_function, $zd_30010_951); } } } class phpmailerException extends Exception { public function errorMessage() { $zd_4ed57_1349 = '<strong>' . $zd_1057b_3->getMessage() . "</strong><br />\n"; return $zd_4ed57_1349; } } class SMTP { public $zd_d0d7c_1352 = 25; public $zd_d01e5_1353 = "\r\n"; public $zd_669fa_1354; public $zd_c5f64_1355 = false; public $zd_3702b_1356 = '5.2.1'; private $zd_da474_1357; private $zd_b42a3_1358; private $zd_94c34_1359; public function __construct() { $zd_1057b_3->smtp_conn = 0; $zd_1057b_3->error = null; $zd_1057b_3->helo_rply = null; $zd_1057b_3->do_debug = 0; } public function Connect($zd_0a0df_1364, $zd_6cf90_1365 = 0, $zd_fae50_1366 = 5) { $zd_1057b_3->error = null; if($zd_1057b_3->connected()) { $zd_1057b_3->error = array("error" => "Already connected to a server"); return false; } if(empty($zd_6cf90_1365)) { $zd_6cf90_1365 = $zd_1057b_3->SMTP_PORT; } $zd_a086d_1373 = 0; $zd_9aea9_1374 = ''; $zd_1057b_3->smtp_conn = @fsockopen($zd_0a0df_1364, $zd_6cf90_1365, $zd_a086d_1373, $zd_9aea9_1374, $zd_fae50_1366); if(empty($zd_1057b_3->smtp_conn)) { $zd_1057b_3->error = array("error" => "Failed to connect to server", "errno" => $zd_a086d_1373, "errstr" => $zd_9aea9_1374); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": $zd_9aea9_1374 ($zd_a086d_1373)" . $zd_1057b_3->CRLF . '<br />'; } return false; } if(substr(PHP_OS, 0, 3) != "WIN") socket_set_timeout($zd_1057b_3->smtp_conn, $zd_fae50_1366, 0); $zd_c2b6f_1392 = $zd_1057b_3->get_lines(); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_c2b6f_1392 . $zd_1057b_3->CRLF . '<br />'; } return true; } public function StartTLS() { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array("error" => "Called StartTLS() without being connected"); return false; } fputs($zd_1057b_3->smtp_conn,"STARTTLS" . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 220) { $zd_1057b_3->error = array("error" => "STARTTLS not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } if(!stream_socket_enable_crypto($zd_1057b_3->smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) { return false; } return true; } public function Authenticate($zd_cede4_1418, $zd_30c8b_1419) { fputs($zd_1057b_3->smtp_conn,"AUTH LOGIN" . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_376c8_1404 != 334) { $zd_1057b_3->error = array("error" => "AUTH not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } fputs($zd_1057b_3->smtp_conn, base64_encode($zd_cede4_1418) . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_376c8_1404 != 334) { $zd_1057b_3->error = array("error" => "Username not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } fputs($zd_1057b_3->smtp_conn, base64_encode($zd_30c8b_1419) . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_376c8_1404 != 235) { $zd_1057b_3->error = array("error" => "Password not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } return true; } public function Connected() { if(!empty($zd_1057b_3->smtp_conn)) { $zd_ee9be_1465 = socket_get_status($zd_1057b_3->smtp_conn); if($zd_ee9be_1465["eof"]) { if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> NOTICE:" . $zd_1057b_3->CRLF . "EOF caught while checking if connected"; } $zd_1057b_3->Close(); return false; } return true; } return false; } public function Close() { $zd_1057b_3->error = null; $zd_1057b_3->helo_rply = null; if(!empty($zd_1057b_3->smtp_conn)) { fclose($zd_1057b_3->smtp_conn); $zd_1057b_3->smtp_conn = 0; } } public function Data($zd_d728c_1476) { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array( "error" => "Called Data() without being connected"); return false; } fputs($zd_1057b_3->smtp_conn,"DATA" . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 354) { $zd_1057b_3->error = array("error" => "DATA command not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } $zd_d728c_1476 = str_replace("\r\n","\n",$zd_d728c_1476); $zd_d728c_1476 = str_replace("\r","\n",$zd_d728c_1476); $zd_c66ac_880 = explode("\n",$zd_d728c_1476); $zd_df267_1503 = substr($zd_c66ac_880[0],0,strpos($zd_c66ac_880[0],":")); $zd_3afcc_1506 = false; if(!empty($zd_df267_1503) && !strstr($zd_df267_1503," ")) { $zd_3afcc_1506 = true; } $zd_6e3ad_1510 = 998; foreach ($zd_c66ac_880 as $zd_34caa_47) { $zd_2c33a_1513 = null; if($zd_34caa_47 == "" && $zd_3afcc_1506) { $zd_3afcc_1506 = false; } while(strlen($zd_34caa_47) > $zd_6e3ad_1510) { $zd_513a4_1519 = strrpos(substr($zd_34caa_47,0,$zd_6e3ad_1510)," "); if(!$zd_513a4_1519) { $zd_513a4_1519 = $zd_6e3ad_1510 - 1; $zd_2c33a_1513[] = substr($zd_34caa_47,0,$zd_513a4_1519); $zd_34caa_47 = substr($zd_34caa_47,$zd_513a4_1519); } else { $zd_2c33a_1513[] = substr($zd_34caa_47,0,$zd_513a4_1519); $zd_34caa_47 = substr($zd_34caa_47,$zd_513a4_1519 + 1); } if($zd_3afcc_1506) { $zd_34caa_47 = "\t" . $zd_34caa_47; } } $zd_2c33a_1513[] = $zd_34caa_47; foreach ($zd_2c33a_1513 as $zd_d40b8_1543) { if(strlen($zd_d40b8_1543) > 0) { if(substr($zd_d40b8_1543, 0, 1) == ".") { $zd_d40b8_1543 = "." . $zd_d40b8_1543; } } fputs($zd_1057b_3->smtp_conn,$zd_d40b8_1543 . $zd_1057b_3->CRLF); } } fputs($zd_1057b_3->smtp_conn, $zd_1057b_3->CRLF . "." . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 250) { $zd_1057b_3->error = array("error" => "DATA not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } return true; } public function Hello($zd_0a0df_1364 = '') { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array( "error" => "Called Hello() without being connected"); return false; } if(empty($zd_0a0df_1364)) { $zd_0a0df_1364 = "localhost"; } if(!$zd_1057b_3->SendHello("EHLO", $zd_0a0df_1364)) { if(!$zd_1057b_3->SendHello("HELO", $zd_0a0df_1364)) { return false; } } return true; } private function SendHello($zd_8b498_1579, $zd_0a0df_1364) { fputs($zd_1057b_3->smtp_conn, $zd_8b498_1579 . " " . $zd_0a0df_1364 . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER: " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 250) { $zd_1057b_3->error = array("error" => $zd_8b498_1579 . " not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } $zd_1057b_3->helo_rply = $zd_424f4_1402; return true; } public function Mail($zd_4a444_225) { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array( "error" => "Called Mail() without being connected"); return false; } $zd_9e988_1607 = ($zd_1057b_3->do_verp ? "XVERP" : ""); fputs($zd_1057b_3->smtp_conn,"MAIL FROM:<" . $zd_4a444_225 . ">" . $zd_9e988_1607 . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 250) { $zd_1057b_3->error = array("error" => "MAIL not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } return true; } public function Quit($zd_ba4d3_1628 = true) { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array( "error" => "Called Quit() without being connected"); return false; } fputs($zd_1057b_3->smtp_conn,"quit" . $zd_1057b_3->CRLF); $zd_500b0_1634 = $zd_1057b_3->get_lines(); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_500b0_1634 . $zd_1057b_3->CRLF . '<br />'; } $zd_a93a2_1639 = true; $zd_f1868_59 = null; $zd_376c8_1404 = substr($zd_500b0_1634,0,3); if($zd_376c8_1404 != 221) { $zd_f1868_59 = array("error" => "SMTP server rejected quit command", "smtp_code" => $zd_376c8_1404, "smtp_rply" => substr($zd_500b0_1634,4)); $zd_a93a2_1639 = false; if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_f1868_59["error"] . ": " . $zd_500b0_1634 . $zd_1057b_3->CRLF . '<br />'; } } if(empty($zd_f1868_59) || $zd_ba4d3_1628) { $zd_1057b_3->Close(); } return $zd_a93a2_1639; } public function Recipient($zd_138fd_1039) { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array( "error" => "Called Recipient() without being connected"); return false; } fputs($zd_1057b_3->smtp_conn,"RCPT TO:<" . $zd_138fd_1039 . ">" . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 250 && $zd_376c8_1404 != 251) { $zd_1057b_3->error = array("error" => "RCPT not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } return true; } public function Reset() { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array( "error" => "Called Reset() without being connected"); return false; } fputs($zd_1057b_3->smtp_conn,"RSET" . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 250) { $zd_1057b_3->error = array("error" => "RSET failed", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } return true; } public function SendAndMail($zd_4a444_225) { $zd_1057b_3->error = null; if(!$zd_1057b_3->connected()) { $zd_1057b_3->error = array( "error" => "Called SendAndMail() without being connected"); return false; } fputs($zd_1057b_3->smtp_conn,"SAML FROM:" . $zd_4a444_225 . $zd_1057b_3->CRLF); $zd_424f4_1402 = $zd_1057b_3->get_lines(); $zd_376c8_1404 = substr($zd_424f4_1402,0,3); if($zd_1057b_3->do_debug >= 2) { echo "SMTP -> FROM SERVER:" . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } if($zd_376c8_1404 != 250) { $zd_1057b_3->error = array("error" => "SAML not accepted from server", "smtp_code" => $zd_376c8_1404, "smtp_msg" => substr($zd_424f4_1402,4)); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> ERROR: " . $zd_1057b_3->error["error"] . ": " . $zd_424f4_1402 . $zd_1057b_3->CRLF . '<br />'; } return false; } return true; } public function Turn() { $zd_1057b_3->error = array("error" => "This method, TURN, of the SMTP ". "is not implemented"); if($zd_1057b_3->do_debug >= 1) { echo "SMTP -> NOTICE: " . $zd_1057b_3->error["error"] . $zd_1057b_3->CRLF . '<br />'; } return false; } public function getError() { return $zd_1057b_3->error; } private function get_lines() { $zd_ab70d_1726 = ""; while(!feof($zd_1057b_3->smtp_conn)) { $zd_65b67_743 = @fgets($zd_1057b_3->smtp_conn,515); if($zd_1057b_3->do_debug >= 4) { echo "SMTP -> get_lines(): \$zd_ab70d_1726 was \"$zd_ab70d_1726\"" . $zd_1057b_3->CRLF . '<br />'; echo "SMTP -> get_lines(): \$zd_65b67_743 is \"$zd_65b67_743\"" . $zd_1057b_3->CRLF . '<br />'; } $zd_ab70d_1726 .= $zd_65b67_743; if($zd_1057b_3->do_debug >= 4) { echo "SMTP -> get_lines(): \$zd_ab70d_1726 is \"$zd_ab70d_1726\"" . $zd_1057b_3->CRLF . '<br />'; } if(substr($zd_65b67_743,3,1) == " ") { break; } } return $zd_ab70d_1726; } } function xn_send_mail($smtp, $username, $email, $subject, $message, $charset = 'UTF-8') { // hook xn_send_mail_start.php // hook xn_send_mail_data.php $zd_04923_0 = new PHPMailer(); $zd_04923_0->IsSMTP(); $zd_04923_0->IsHTML(TRUE); $zd_04923_0->SMTPDebug = 0; $zd_04923_0->SMTPAuth = TRUE; $zd_04923_0->Host = $smtp['host']; $zd_04923_0->Port = $smtp['port']; $zd_04923_0->Username = $smtp['user']; $zd_04923_0->Password = $smtp['pass']; $zd_04923_0->Timeout = 5; $zd_04923_0->CharSet = $charset; $zd_04923_0->Encoding = 'base64'; $zd_04923_0->SetFrom($smtp['email'], $username); $zd_04923_0->AddReplyTo($smtp['email'], $email); $zd_04923_0->Subject = $subject; $zd_04923_0->AltBody = $message; $message = str_replace("\\",'',$message); $zd_04923_0->MsgHTML($message); $zd_04923_0->AddAddress($email, $username); if(!$zd_04923_0->Send()) { return xn_error(-1, $zd_04923_0->ErrorInfo); } else { return TRUE; } // hook xn_send_mail_end.php } ?>
